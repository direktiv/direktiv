kind: ZarfPackageConfig 
metadata:
  name: direktiv 
  version: 0.9.1
  description: "direktiv installation"

variables:
- name: DATABASE_HOST
  default: ""
- name: DATABASE_PORT
  default: "5432"
- name: DATABASE_USER
  default: ""
- name: DATABASE_PASSWORD
  default: ""
- name: DATABASE_DBNAME
  default: ""
- name: DATABASE_SSLMODE
  default: "require"
- name: DIREKTIV_HOST
  default: ""
- name: DIREKTIV_WITH_CERTIFICATE
  default: "false"
- name: DIREKTIV_CERTIFICATE
  default: ""
- name: DIREKTIV_HTTP_PROXY
  default: ""
- name: DIREKTIV_HTTPS_PROXY
  default: ""
- name: DIREKTIV_NO_PROXY
  default: ""
- name: DIREKTIV_REPLICAS
  default: "1"
- name: DIREKTIV_INGRESS_INSTALL
  default: "true"
- name: DIREKTIV_IMAGE
  default: "direktiv/direktiv"
- name: DIREKTIV_REQUEST_TIMEOUT
  default: "7200"
- name: DIREKTIV_FUNCTION_SIZES
  autoIndent: true
  default: |
    limits:
      memory:
        small: 512
        medium: 1024
        large: 2048
      cpu:
        small: 250m
        medium: 500m
        large: 1
      disk:
        small: 256
        medium: 1024
        large: 4096
- name: DIREKTIV_FLUENTBIT_CONFIG
  autoIndent: true
- name: DIREKTIV_OTEL_CONFIG
  autoIndent: true

components:
- name: direktiv
  required: true
  actions:
    onDeploy:
      before:
      - cmd: if [ "${ZARF_VAR_DIREKTIV_WITH_CERTIFICATE}" = "true" ] && [ ! -f server.key ]; then openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -sha256 -days 3650 -nodes -subj "/CN=`echo $ZARF_VAR_DIREKTIV_HOST`"; fi
      - cmd: zarf tools kubectl create namespace direktiv || true
      - cmd: if [ "${ZARF_VAR_DIREKTIV_WITH_CERTIFICATE}" = "true" ] && [ -f server.key ]; then zarf tools kubectl create secret tls -n direktiv --cert=server.crt --key=server.key direktiv-tls || true; fi
      - cmd: if [ "${ZARF_VAR_DIREKTIV_WITH_CERTIFICATE}" = "true" ] && zarf tools kubectl get secrets -n direktiv direktiv-tls > /dev/null 2>&1; then echo direktiv-tls; fi
        setVariables:
        - name: DIREKTIV_CERTIFICATE
      - cmd: zarf tools kubectl create namespace direktiv || true
      - cmd: zarf tools kubectl annotate namespaces direktiv linkerd.io/inject=enabled
      - cmd: ((zarf tools kubectl get secrets -n postgres pg-db-pguser-direktiv -o 'go-template={{index .data "host"}}' 2>/dev/null || (echo $ZARF_VAR_DATABASE_HOST | base64 -w0))  | base64 --decode)
        setVariables:
          - name: DATABASE_HOST
            sensitive: false
      - cmd: ((zarf tools kubectl get secrets -n postgres pg-db-pguser-direktiv -o 'go-template={{index .data "port"}}' 2>/dev/null || (echo $ZARF_VAR_DATABASE_PORT | base64 -w0))  | base64 --decode)
        setVariables:
          - name: DATABASE_PORT
            sensitive: false
      - cmd: ((zarf tools kubectl get secrets -n postgres pg-db-pguser-direktiv -o 'go-template={{index .data "user"}}' 2>/dev/null || (echo $ZARF_VAR_DATABASE_USER | base64 -w0))  | base64 --decode)
        setVariables:
          - name: DATABASE_USER
            sensitive: false
      - cmd: ((zarf tools kubectl get secrets -n postgres pg-db-pguser-direktiv -o 'go-template={{index .data "password"}}' 2>/dev/null || (echo $ZARF_VAR_DATABASE_PASSWORD | base64 -w0))  | base64 --decode)
        setVariables:
          - name: DATABASE_PASSWORD
            sensitive: true
      - cmd: ((zarf tools kubectl get secrets -n postgres pg-db-pguser-direktiv -o 'go-template={{index .data "dbname"}}' 2>/dev/null || (echo $ZARF_VAR_DATABASE_DBNAME | base64 -w0))  | base64 --decode)
        setVariables:
          - name: DATABASE_DBNAME
            sensitive: false
  charts:
  - name: direktiv
    namespace: direktiv
    version: 0.9.1
    url: https://charts.direktiv.io
    valuesFiles:
    - values.yaml
    variables:
    - name: DATABASE_HOST
      description: postgres database host 
      path: database.host
    - name: DATABASE_PORT
      description: postgres database port 
      path: database.port
    - name: DATABASE_USER
      description: postgres database user 
      path: database.user
    - name: DATABASE_PASSWORD
      description: postgres database password 
      path: database.password
    - name: DATABASE_DBNAME
      description: postgres database database name 
      path: database.name
    - name: DIREKTIV_HOST
      description: hostname for ingress
      path: ingress.host
    - name: DIREKTIV_CERTIFICATE
      description: tls certificate
      path: ingress.certificate
    - name: DIREKTIV_API_KEY
      description: direktiv api key
      path: apikey
    - name: DIREKTIV_LICENSE
      description: direktiv license
      path: license    

  
  