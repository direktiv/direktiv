version: '3'

vars: 
  TELEMETRY: '{{.TELEMETRY | default "false"}}'
  TLS: '{{.TLS | default "false"}}'
  NAME: '{{.REPLICAS | default 1 }}'

tasks:
  clean:
    desc: Clean kind cluster
    cmds:
    - kind delete clusters --all

  one-node:
    desc: Setup empty one node kind cluster. Use `TLS` to enable 443 instead of port 80.
    cmds:
    - task: clean
    - |
      {{- if eq .TLS "true" -}} sed "s/80/443/" kind-config.yaml {{- else }} cat kind-config.yaml {{- end -}} | kind create cluster --config -
    - task: metrics-server

  multi-node:
    desc: Setup empty multi-node kind cluster. Use `TLS` to enable 443 instead of port 80.
    cmds:
    - task: clean
    - |
      {{- if eq .TLS "true" -}} sed "s/80/443/" kind-config-cluster.yaml {{- else }} cat kind-config-cluster.yaml {{- end -}} | kind create cluster --config -
    - task: metrics-server

  metrics-server:
    desc: Installing metrics server 
    cmds:
    - kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
    # disable tls in metrics server
    - kubectl patch deployment metrics-server -n kube-system --type=json -p='[{"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--kubelet-insecure-tls"}]'

  database:
    desc: Installing basic Postgres database
    cmds:
    - kubectl apply -f kind/postgres.yaml

  docker-proxy-delete:
    desc: Deleting repository proxies
    cmds:
    - docker stop proxy-docker-hub kind-registry proxy-quay proxy-gcr proxy-k8s-gcr proxy-registry-k8s-io proxy-cr-fluentbit-io | true
    - docker rm proxy-docker-hub kind-registry proxy-quay proxy-gcr proxy-k8s-gcr proxy-registry-k8s-io proxy-cr-fluentbit-io | true
    # internal: true

  docker-proxy-create:
    desc: Creating repository proxies
    cmds:
    - if ! docker inspect proxy-docker-hub >/dev/null 2>&1; then docker run -d --name proxy-docker-hub --restart=always --net=kind -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io registry:2; fi
    - if ! docker inspect kind-registry >/dev/null 2>&1; then docker run -d -p "127.0.0.1:5001:5000" --network bridge --name kind-registry --restart=always registry:2; docker network connect kind kind-registry; fi
    - if ! docker inspect proxy-quay >/dev/null 2>&1; then docker run -d --name proxy-quay --restart=always --net=kind -e REGISTRY_PROXY_REMOTEURL=https://quay.io registry:2; fi
    - if ! docker inspect proxy-gcr >/dev/null 2>&1; then docker run -d --name proxy-gcr --restart=always --net=kind -e REGISTRY_PROXY_REMOTEURL=https://gcr.io registry:2; fi
    - if ! docker inspect proxy-k8s-gcr >/dev/null 2>&1; then docker run -d --name proxy-k8s-gcr --restart=always --net=kind -e REGISTRY_PROXY_REMOTEURL=https://k8s.gcr.io registry:2; fi
    - if ! docker inspect proxy-registry-k8s-io >/dev/null 2>&1; then docker run -d --name proxy-registry-k8s-io --restart=always --net=kind -e REGISTRY_PROXY_REMOTEURL=https://registry.k8s.io registry:2; fi
    - if ! docker inspect proxy-cr-fluentbit-io >/dev/null 2>&1; then docker run -d --name proxy-cr-fluentbit-io --restart=always --net=kind -e REGISTRY_PROXY_REMOTEURL=https://cr.fluentbit.io registry:2; fi
    # internal: true

  install:
    desc: Install Direktiv on Kind. Run with TELEMETRY=true to enable telemetry.
    deps: ["database"]
    cmds:
    - |
      helm repo add nats https://nats-io.github.io/k8s/helm/charts
      helm repo update
      helm install nats nats/nats \
      --set config.jetstream.enabled=true \
      --set config.jetstream.memStorage.enabled=true \
      --set config.jetstream.memStorage.size=1Gi \
      --set config.jetstream.fileStorage.enabled=false
    - |
       helm install --set database.host=postgres.default.svc \
        -f kind/nginx-tcp.yaml \
        --set database.port=5432 \
        --set database.user=admin \
        --set database.password=password \
        --set database.name=direktiv \
        --set database.sslmode=disable \
        --set flow.replicas={{ .REPLICAS }} \
        --set pullPolicy=Always \
        --set ingress-nginx.controller.hostPort.enabled=true \
        --set image=direktiv \
        --set nats.delay=0 \
        --set registry=localhost:5001 \
        --set tag=dev \
        {{- if eq .TELEMETRY "true" }}
        --set otel.install=true -f scripts/telemetry/telemetry.yaml \
        {{- end }}
        direktiv charts/direktiv; \
    - task: telemetry

  telemetry:
    cmds:
    - |
      {{- if eq .TELEMETRY "true" }}
      helm repo add grafana https://grafana.github.io/helm-charts
      helm repo update
      helm uninstall tempo || true
      helm install tempo grafana/tempo
      helm uninstall grafana || true
      helm install \
      --set ingress.enabled=false \
      --set ingress.path=/grafana \
      --set adminPassword=admin \
      --set ingress.hosts={} \
      --set ingress.ingressClassName=nginx \
      --set datasources."datasources\.yaml".apiVersion=1 \
      --set datasources."datasources\.yaml".datasources[0].name=loki \
      --set datasources."datasources\.yaml".datasources[0].type=loki \
      --set datasources."datasources\.yaml".datasources[0].access=proxy \
      --set datasources."datasources\.yaml".datasources[0].url=http://loki-gateway \
      --set datasources."datasources\.yaml".datasources[1].name=tempo \
      --set datasources."datasources\.yaml".datasources[1].type=tempo \
      --set datasources."datasources\.yaml".datasources[1].access=proxy \
      --set datasources."datasources\.yaml".datasources[1].url=http://tempo:3100 \
      --set service.nodePort=31788 \
      --set service.type=NodePort \
      grafana grafana/grafana
      helm uninstall loki || true
      helm install \
      --set loki.useTestSchema=true \
      --set loki.commonConfig.replication_factor=1 \
      --set loki.pattern_ingester.enabled=true \
      --set loki.limits_config.allow_structured_metadata=true \
      --set loki.limits_config.volume_enabled=true \
      --set deploymentMode=SingleBinary \
      --set singleBinary.replicas=1 \
      --set loki.ruler.enable_api=true \
      --set backend.replicas=0 \
      --set read.replicas=0 \
      --set write.replicas=0 \
      --set ingester.replicas=0 \
      --set querier.replicas=0 \
      --set queryFrontend.replicas=0 \
      --set queryScheduler.replicas=0 \
      --set ingdistributorester.replicas=0 \
      --set indexGateway.replicas=0 \
      --set bloomCompactor.replicas=0 \
      --set bloomGateway.replicas=0 \
      --set minio.enabled=true \
      --set loki.auth_enabled=false \
      loki grafana/loki
      {{- end }}

  uninstall:
    desc: Uninstalling Direktiv
    cmds:
    - 'kubectl get namespace "direktiv-services-direktiv" -o json   | tr -d "\n" | sed "s/\"finalizers\": \[[^]]\+\]/\"finalizers\": []/"   | kubectl replace --raw /api/v1/namespaces/direktiv-services-direktiv/finalize -f - || true'
    - helm uninstall direktiv

  kill-pod:
    desc: Kill all direktiv pods
    cmds: 
    - kubectl delete pods -l app=direktiv-flow