version: '3'

includes:
  build:  
    taskfile: taskfile_build.yaml
    internal: true  

vars: 
  DIREKTIV_HOST: '{{.DIREKTIV_HOST | default "localhost:9090"}}'
  
tasks:
  scan-ui:
    desc: Runs trivy for the UI folder
    cmds:
      - trivy filesystem -s HIGH -s CRITICAL --exit-code 1 --ignore-unfixed ui

  scan-backend:
    desc: Runs trivy on go binary
    deps: [build:build-push]
    cmds: 
      - trivy image -s HIGH -s CRITICAL --exit-code 1 --ignore-unfixed {{ .DOCKER_REPO }}/direktiv:{{ .VERSION }}

  scan-helm:
    desc: Runs trivy on Helm charts. Includes dependencies.
    deps: [build:build-push]
    cmds: 
      - trivy config -s HIGH -s CRITICAL charts/direktiv

  scan-docker:
    desc: Scans Dockerfile for misconfiguration
    cmds:
    - trivy config --exit-code 1 Dockerfile

  go-unit:
    desc: Run go unit tests
    dir: pkg
    cmds:
    - go test ./...
  
  api-ee:
    desc: Runs EE API tests against server set with `DIREKTIV_HOST`.
    cmds: 
    - kubectl wait --for=condition=ready pod -l "app=direktiv-flow"
    - docker run -it --rm \
      -v `pwd`/direktiv-ee/tests:/tests \
      -e 'DIREKTIV_HOST=http://{{ .DIREKTIV_HOST }}' \
      -e 'NODE_TLS_REJECT_UNAUTHORIZED=0' \
      --network=host \
      node:lts-alpine3.18 npm --prefix "/tests" run jest -- ${JEST_PREFIX} --runInBand

  api:
    desc: Runs API tests against server set with `DIREKTIV_HOST`.
    cmds:
    - kubectl wait --for=condition=ready pod -l "app=direktiv-flow"
    - |
      docker run -it --rm \
      -v `pwd`/tests:/tests \
      -e 'DIREKTIV_HOST=http://{{ .DIREKTIV_HOST }}' \
      -e 'NODE_TLS_REJECT_UNAUTHORIZED=0' \
      --network=host \
      node:lts-alpine3.18 npm --prefix "/tests" run jest -- {{ .JEST_PREFIX }} --runInBand

  lint:
    desc: Runs Go linting
    cmds:
    - |
      docker run \
      --rm \
      --tty \
      -v `pwd`:/app \
      -w /app \
      -v /tmp/golangci:/root/.cache:rw \
      -e GOCACHE=/root/.cache/  \
      -e GOLANGCI_LINT_CACHE=/root/.cache/ \
      -e GOMODCACHE=/root/.cache/go/pkg/mod  \
      golangci/golangci-lint:v2.5.0 golangci-lint run --verbose --config /app/.golangci.yaml

  licenses:
    desc: Scans dependencies looking for blacklisted licenses.
    cmds:
      - |
        go install github.com/google/go-licenses@latest
        go-licenses check --ignore=github.com/bbuck/go-lexer,github.com/xi2/xz,modernc.org/mathutil ./... --disallowed_types forbidden,unknown,restricted

  licenses:
    desc: Scans dependencies looking for blacklisted licenses.
    cmds:
      - |
        go install github.com/google/go-licenses@latest
        go-licenses check --ignore=github.com/bbuck/go-lexer,github.com/xi2/xz,modernc.org/mathutil ./... --disallowed_types forbidden,unknown,restricted

  playwright:
    desc: sjsjs
    cmds: 
    - |
      docker run \
      -v {{ .PWD }}/ui:/app/ui \
      -e NODE_TLS_REJECT_UNAUTHORIZED=0 \
        -e PLAYWRIGHT_USE_VITE=FALSE \
        -e PLAYWRIGHT_UI_BASE_URL=http://{{ .DIREKTIV_HOST }} \
        -e PLAYWRIGHT_SHARD=1/1 \
        -e PLAYWRIGHT_CI=TRUE \
      -w /app/ui \
      --net=host \
      node:20-slim \
      bash -c "\
        corepack enable && \
        corepack prepare pnpm@9.15.4 --activate && \
        pnpm install && \
        pnpm exec playwright install --with-deps chromium && \
        pnpm exec playwright test --shard=1/1 --project \"chromium\" --reporter=line"
    vars:
      PWD:
        sh: pwd
