{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["states"],
  "title": "direktiv-workflow",
  "meta": {
    "maintainer": {
      "name": "Direktiv",
      "email": "info@direktiv.io"
    },
    "company": {
      "name": "Direktiv",
      "website": "https://direktiv.io"
    },
    "documentation": "https://docs.direktiv.io/",
    "version": "15.09.2023",
    "createdAt": "15.09.2023"
  },
  "properties": {
    "url": {
      "description": "Link to further information.",
      "type": "string"
    },
    "description": {
      "type": "string",
      "description": "Description of the workflow."
    },
    "functions": {
      "type": "object",
      "description": "List of function definitions for use by function-based states.",
      "examples": [
        "functions:\n- type: knative-workflow\n  id: request\n  image: direktiv/request:latest\n  size: small"
      ],
      "oneOf": [
        { "$ref": "#/definitions/knativeNamespaceFunction" },
        { "$ref": "#/definitions/knativeWorkflowFunction" },
        { "$ref": "#/definitions/subflowFunction" }
      ]
    },
    "start": {
      "type": "object",
      "description": "Configuration for how the workflow should start. If omitted from the workflow definition the DefaultStartDefinition will be used, which means the workflow will only be executed when called.",
      "oneOf": [
        { "$ref": "#/definitions/DefaultStartDefinition" },
        { "$ref": "#/definitions/ScheduledStartDefinition" },
        { "$ref": "#/definitions/EventStartDefinition" },
        { "$ref": "#/definitions/EventsXorDefinition" },
        { "$ref": "#/definitions/EventsAndDefinition" }
      ]
    },
    "states": {
      "type": "array",
      "items": {
        "type": "object",
        "oneOf": [
          {
            "title": "action",
            "type": "object",
            "required": ["id", "type", "action"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["action"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "action": { "$ref": "#/definitions/actionState" },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "timeout": {
                "$ref": "#/definitions/timeout"
              },
              "async": {
                "$ref": "#/definitions/async"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "consumeEvent",
            "required": ["id", "type", "event"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["event"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "event": {
                "$ref": "#/definitions/EventProperties"
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "timeout": {
                "$ref": "#/definitions/timeout"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "eventsAnd",
            "required": ["id", "type", "events"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["eventsAnd"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "events": {
                "type": "array",
                "items": {
                  "event": {
                    "$ref": "#/definitions/EventProperties"
                  }
                }
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "timeout": {
                "$ref": "#/definitions/timeout"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "eventsXor",
            "required": ["id", "type", "events"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["eventsXor"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "events": {
                "type": "array",
                "items": {
                  "event": {
                    "required": ["type", "transition"],
                    "type": "object",
                    "properties": {
                      "event": {
                        "$ref": "#/definitions/EventProperties"
                      },
                      "transition": {
                        "type": "string",
                        "description": "Next state to transition to if the event is received."
                      },
                      "transform": {
                        "type": "object",
                        "description": "Transformation to be applied to the event."
                      }
                    }
                  }
                }
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "timeout": {
                "$ref": "#/definitions/timeout"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "foreach",
            "required": ["id", "type", "array"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["foreach"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "action": {
                "$ref": "#/definitions/actionState"
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "timeout": {
                "$ref": "#/definitions/timeout"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "generateEvent",
            "required": ["id", "type", "event"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["generateEvent"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "event": {
                "required": ["type", "source"],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Identifies which CloudEvents events can trigger the workflow by requiring an exact match to the event's own type context value."
                  },
                  "source": {
                    "type": "string",
                    "description": "Sets the CloudEvents event source."
                  },
                  "data": {
                    "type": "object",
                    "description": "Defines the content of the payload for the CloudEvents event."
                  },
                  "datacontenttype": {
                    "type": "object",
                    "description": "An RFC2046 string specifying the payload content type."
                  },
                  "context": {
                    "type": "object",
                    "description": "If defined, must evaluate to an object of key-value pairs. These will be used to define CloudEvents event context data."
                  }
                }
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "getter",
            "required": ["id", "type", "key"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["getter"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "key": {
                "type": "string",
                "description": "Variable name."
              },
              "scope": {
                "type": "string",
                "description": "Selects the scope to which the variable belongs. If undefined, defaults to instance. See Variables."
              },
              "as": {
                "type": "string",
                "description": "Names the resulting data. If left unspecified, the key will be used instead."
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "noop",
            "required": ["id", "type", "log"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["noop"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "parallel",
            "required": ["id", "type", "actions"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["parallel"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "mode": {
                "type": "string",
                "enum": ["and", "or"],
                "description": "If defined, must be either and or or. The default is and. This setting determines whether the state is considered successfully completed only if all threads have returned without error (and) or as soon as any single thread returns without error (or)."
              },
              "action": {
                "$ref": "#/definitions/actionState"
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "setter",
            "required": ["id", "type", "variables"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["setter"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "variables": {
                "type": "array",
                "description": "Defines variables to push.",
                "items": {
                  "key": {
                    "type": "string",
                    "description": "Variable name."
                  },
                  "scope": {
                    "type": "string",
                    "description": "Selects the scope to which the variable belongs. If undefined, defaults to instance. See Variables."
                  },
                  "mimeType": {
                    "type": "string",
                    "description": "Store a MIME type with the variable. If left undefined, it will default to application/json. Two specific MIME types cause this state to behave differently: text/plain and application/octet-stream. If the value evaluates to a JSON string the MIME type is text/plain, that string will be stored in plaintext (without JSON quotes and escapes). If if the value is a JSON string containing base64 encoded data and the MIME type is application/octet-stream, the base64 data will be decoded and stored as binary data."
                  },
                  "value": {
                    "type": "string",
                    "description": "Select or generate the data to store."
                  }
                }
              },
              "transform": {
                "type": "string",
                "description": "Transformation to be applied to the state's output."
              },
              "transition": {
                "type": "string",
                "description": "Next state to transition to"
              },
              "log": {
                "type": "string",
                "description": "Log message to be written to instance logs. Supports structured JQ for querying instance data."
              },
              "metadata": {
                "type": "object",
                "description": "Instance metadata to be updated by the state. Supports structured JQ for querying instance data and inserting it into the metadata."
              },
              "catch": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error code pattern to catch."
                    },
                    "transition": {
                      "type": "string",
                      "description": "Next state to transition to if the error is caught."
                    }
                  },
                  "required": ["error"],
                  "description": "Error catch configuration."
                },
                "description": "List of error catchers for the state."
              }
            }
          },
          {
            "type": "object",
            "title": "switch",
            "required": ["id", "type", "conditions"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["switch"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "conditions": {
                "type": "array",
                "description": "List of conditions, which are evaluated in-order until a match is found.",
                "items": {
                  "properties": {
                    "condition": {
                      "type": "string",
                      "description": "Selects or generates the data used to determine if condition is met. The condition is considered met if the result is anything other than null, false, {}, [], \"\", or 0."
                    },
                    "transform": {
                      "type": "string",
                      "description": "If defined, modifies the instance's data upon completing the state logic. See StateTransforms."
                    },
                    "transition": {
                      "type": "string",
                      "description": "Identifies which state to transition to next, referring to the next state's unique id. If undefined, matching this condition terminates the workflow."
                    }
                  }
                }
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "validate",
            "required": ["id", "type", "schema"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["validate"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "delay",
            "required": ["id", "type", "durration"],
            "properties": {
              "id": {
                "type": "string",
                "description": "id of the state.",
                "enum": ["durration"]
              },
              "durration": {
                "type": "string",
                "description": "ISO8601 Durration string"
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "timeout": {
                "$ref": "#/definitions/timeout"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          },
          {
            "type": "object",
            "title": "error",
            "required": ["id", "type", "error"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["error"],
                "description": "Type of the state."
              },
              "id": {
                "type": "string",
                "description": "id of the state."
              },
              "error": {
                "type": "string",
                "description": "Error code pattern to catch."
              },
              "message": {
                "type": "string",
                "description": "Error message."
              },
              "args": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "transform": {
                "$ref": "#/definitions/transform"
              },
              "transition": {
                "$ref": "#/definitions/transition"
              },
              "timeout": {
                "$ref": "#/definitions/timeout"
              },
              "log": {
                "$ref": "#/definitions/log"
              },
              "metadata": {
                "$ref": "#/definitions/metadata"
              },
              "catch": {
                "$ref": "#/definitions/catch"
              }
            }
          }
        ]
      }
    },
    "timeouts": {
      "type": "object",
      "properties": {
        "interrupt": {
          "type": "string",
          "description": "An ISO8601 duration string. Sets the time to wait before throwing a catchable direktiv.cancels.timeout.soft error. Consider this a soft timeout."
        },
        "kill": {
          "type": "string",
          "description": "An ISO8601 duration string. Sets the time to wait before throwing an uncatchable direktiv.cancels.timeout.hard error. This is a hard timeout."
        }
      },
      "description": "Global timeouts for the workflow."
    }
  },
  "definitions": {
    "transform": {
      "type": "string",
      "description": "Transformation to be applied to the state's output."
    },
    "transition": {
      "type": "string",
      "description": "Next state to transition to."
    },
    "timeout": {
      "type": "string",
      "description": "Timeout duration for the state."
    },
    "async": {
      "type": "boolean",
      "description": "If set to true, the workflow execution will continue without waiting for the action to return."
    },
    "log": {
      "type": "string",
      "description": "Log message to be written to instance logs. Supports structured JQ for querying instance data."
    },
    "metadata": {
      "type": "object",
      "description": "Instance metadata to be updated by the state. Supports structured JQ for querying instance data and inserting it into the metadata."
    },
    "catch": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code pattern to catch."
          },
          "transition": {
            "type": "string",
            "description": "Next state to transition to if the error is caught."
          }
        },
        "required": ["error"],
        "description": "Error catch configuration."
      },
      "description": "List of error catchers for the state."
    },
    "actionState": {
      "type": "object",
      "description": "Definition of an action type state.",
      "required": ["function"],
      "properties": {
        "function": {
          "type": "string",
          "description": "Name of the referenced function."
        },
        "input": {
          "type": "string",
          "description": "Selects or generates the data to send as input to the function."
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Defines a list of secrets to temporarily add to the instance data under .secrets, before evaluating the input."
        },
        "retries": {
          "type": "object",
          "description": "RetryPolicyDefinition structure.",
          "required": ["maxattempts"],
          "properties": {
            "codes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of 'glob' patterns to determine if this retry policy applies."
            },
            "maxattempts": {
              "type": "integer",
              "description": "Maximum number of retry attempts."
            },
            "delay": {
              "type": "string",
              "description": "ISO8601 duration string giving a time delay between retry attempts."
            },
            "multiplier": {
              "type": "number",
              "description": "Value by which the delay is multiplied after each attempt."
            }
          }
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "description": "Identifies which variable to load into a file."
              },
              "scope": {
                "type": "string",
                "enum": ["instance", "workflow", "namespace"],
                "description": "Specifies the scope from which to load the variable."
              },
              "as": {
                "type": "string",
                "description": "Names the resulting file."
              }
            },
            "description": "FunctionFileDefinition structure."
          }
        }
      }
    },
    "baseFunction": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Identifies which kind of FunctionDefinition is being used."
        },
        "id": {
          "type": "string",
          "description": "A unique identifier for the function within the workflow definition."
        }
      },
      "required": ["type", "id"]
    },
    "knativeNamespaceFunction": {
      "allOf": [
        { "$ref": "#/definitions/baseFunction" },
        {
          "properties": {
            "type": {
              "enum": ["knative-namespace"],
              "description": "In this case it must be set to knative-namespace."
            },
            "service": {
              "type": "string",
              "description": "URI to a function on the namespace."
            }
          },
          "required": ["service"]
        }
      ]
    },
    "knativeWorkflowFunction": {
      "allOf": [
        { "$ref": "#/definitions/baseFunction" },
        {
          "properties": {
            "type": {
              "enum": ["knative-workflow"]
            },
            "image": {
              "type": "string",
              "description": "URI to a knative-workflow compliant container."
            },
            "size": {
              "type": "string",
              "enum": ["small", "medium", "large"],
              "description": "Specifies the container size."
            },
            "cmd": {
              "type": "string",
              "description": "Command to run in the knative-workflow compliant container."
            }
          },
          "required": ["image"]
        }
      ]
    },
    "subflowFunction": {
      "allOf": [
        { "$ref": "#/definitions/baseFunction" },
        {
          "properties": {
            "type": {
              "enum": ["subflow"]
            },
            "workflow": {
              "type": "string",
              "description": "URI to a workflow within the same namespace."
            }
          },
          "required": ["workflow"]
        }
      ]
    },
    "BaseStartDefinition": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Identifies which kind of StartDefinition is being used."
        },
        "state": {
          "type": "string",
          "description": "References a defined state's id. This state will be used as the entrypoint into the workflow. If left undefined, it defaults to the first state defined in the states list."
        }
      }
    },
    "EventProperties": {
      "required": ["type"],
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Identifies which CloudEvents events can trigger the workflow."
        },
        "context": {
          "type": "object",
          "description": "Key-value pairs to restrict events."
        }
      }
    },
    "DefaultStartDefinition": {
      "allOf": [
        { "$ref": "#/definitions/BaseStartDefinition" },
        {
          "properties": {
            "type": { "enum": ["default"] }
          }
        }
      ]
    },
    "ScheduledStartDefinition": {
      "allOf": [
        { "$ref": "#/definitions/BaseStartDefinition" },
        {
          "properties": {
            "type": { "enum": ["scheduled"] },
            "cron": {
              "type": "string",
              "description": "Defines the time(s) when the workflow should execute using a CRON expression."
            }
          },
          "required": ["cron"]
        }
      ]
    },
    "EventStartDefinition": {
      "allOf": [
        { "$ref": "#/definitions/BaseStartDefinition" },
        {
          "properties": {
            "type": { "enum": ["event"] },
            "event": { "$ref": "#/definitions/EventProperties" }
          },
          "required": ["event"]
        }
      ]
    },
    "EventsXorDefinition": {
      "allOf": [
        { "$ref": "#/definitions/BaseStartDefinition" },
        {
          "properties": {
            "type": { "enum": ["eventsXor"] },
            "events": {
              "type": "array",
              "items": { "$ref": "#/definitions/EventProperties" }
            }
          },
          "required": ["events"]
        }
      ]
    },
    "EventsAndDefinition": {
      "allOf": [
        { "$ref": "#/definitions/BaseStartDefinition" },
        {
          "properties": {
            "type": { "enum": ["eventsAnd"] },
            "lifespan": {
              "type": "string",
              "description": "An ISO8601 duration string. Sets the maximum duration an event can be stored before being discarded while waiting for other events."
            },
            "events": {
              "type": "array",
              "items": { "$ref": "#/definitions/EventProperties" }
            }
          },
          "required": ["events"]
        }
      ]
    }
  }
}
