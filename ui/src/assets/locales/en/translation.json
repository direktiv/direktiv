{
  "pages": {
    "error": {
      "status": "Oops!",
      "message": "Something went wrong here....",
      "goBack": "Go back",
      "reload": "Reload",
      "goHome": "Go to homepage",
      "notFound": "The resource you are trying to access does not exist. This might be due to a typo in the URL or the resource might have been deleted or renamed."
    },
    "onboarding": {
      "welcomeTo": "Welcome to",
      "noNamespace": "Create a namespace to get started.",
      "createNamespaceBtn": "Create namespace",
      "error": "There was an error fetching the namespaces",
      "logout": "Logout",
      "links": {
        "docs": {
          "title": "Getting started",
          "description": "Read our docs"
        },
        "slack": {
          "title": "Slack",
          "description": "Join our Open Source Support channel on Slack"
        },
        "github": {
          "title": "Github",
          "description": "Check out our Github repository"
        }
      }
    },
    "authenticate": {
      "title": "Authenticate",
      "description": "An authentication token is required to connect to the API.",
      "apiKey": "API key",
      "apiKeyPlaceholder": "Enter your API key",
      "wrongKey": "The API key is incorrect",
      "wrongOldKey": "The previously used API key is incorrect, it may have changed after your last use",
      "loginBtn": "Login"
    },
    "explorer": {
      "tree": {
        "list": {
          "filter": "Filter files...",
          "oneLevelUp": "..",
          "contextMenu": {
            "title": "Edit",
            "delete": "Delete",
            "rename": "Rename"
          },
          "empty": {
            "title": "This directory is empty",
            "createWorkflow": "Create Workflow",
            "createService": "Create Service",
            "createEndpoint": "Create Endpoint",
            "createDirectory": "Create Directory"
          },
          "noSearchResults": {
            "title": "No file matches your search"
          }
        },
        "rename": {
          "title": "Rename",
          "renameBtn": "Rename",
          "cancelBtn": "Cancel",
          "nameAlreadyExists": "The name already exists"
        },
        "newDirectory": {
          "title": "Create a new directory",
          "nameLabel": "Name",
          "folderPlaceholder": "folder-name",
          "nameAlreadyExists": "The name already exists",
          "createBtn": "Create",
          "cancelBtn": "Cancel"
        },
        "fileViewer": {
          "title": "Preview",
          "notSupported": "Preview for this mime type is not currently supported.",
          "closeBtn": "Close"
        },
        "delete": {
          "title": "Delete",
          "fileMsg": "Are you sure you want to delete <b>{{name}}</b>? This cannot be undone.",
          "directoryMsg": "Are you sure you want to delete <b>{{name}}</b>? All content of this directory will be deleted as well.",
          "cancelBtn": "Cancel",
          "deleteBtn": "Delete"
        },
        "newFileButton": {
          "buttonText": "New",
          "label": "Create New",
          "items": {
            "directory": "Directory",
            "workflow": "Workflow",
            "service": "Service",
            "page": "Page",
            "gateway": {
              "label": "Gateway",
              "route": "Route",
              "consumer": "Consumer",
              "openapiSpecification": "OpenAPI Specification"
            }
          }
        },
        "newWorkflow": {
          "title": "Create a new workflow",
          "nameLabel": "Name",
          "namePlaceholder": "workflow-name.yaml",
          "templateLabel": "Template",
          "nameAlreadyExists": "The name already exists",
          "cancelBtn": "Cancel",
          "createBtn": "Create"
        },
        "newService": {
          "title": "Create a new service",
          "nameLabel": "Name",
          "namePlaceholder": "service-name.yaml",
          "nameAlreadyExists": "The name already exists",
          "cancelBtn": "Cancel",
          "createBtn": "Create"
        },
        "newRoute": {
          "title": "Create a new route",
          "nameLabel": "Name",
          "namePlaceholder": "route-name.yaml",
          "nameAlreadyExists": "The name already exists",
          "cancelBtn": "Cancel",
          "createBtn": "Create"
        },
        "newConsumer": {
          "title": "Create a new consumer",
          "nameLabel": "Name",
          "namePlaceholder": "consumer-name.yaml",
          "nameAlreadyExists": "The name already exists",
          "cancelBtn": "Cancel",
          "createBtn": "Create"
        },
        "newPage": {
          "title": "Create a new page",
          "nameLabel": "Name",
          "namePlaceholder": "page-name.yaml",
          "nameAlreadyExists": "The name already exists",
          "cancelBtn": "Cancel",
          "createBtn": "Create"
        },
        "openapiSpecification": {
          "title": "Create a new OpenAPI Specification",
          "nameLabel": "Name",
          "namePlaceholder": "openapi-specification-name.yaml",
          "link": "Go to Gateway Info",
          "cancelBtn": "Cancel",
          "createBtn": "Create",
          "unknownFilePath": "Unknown File Path",
          "infoTooltip": "Every namespace should only have <1>one</1> OpenAPI Specification",
          "errorTitle": "Parsing Error",
          "errorDescription": "The OpenAPI Specification is not valid.<br />Please provide at least the following required fields:<br />openapi:<br />info:<br /> - title:<br />  - description:<br />  - version:",
          "saveError": "There was an error saving the OpenAPI Specification.",
          "saveSuccessTitle": "File Saved",
          "saveSuccess": "OpenAPI Specification saved successfully.",
          "unknownError": "An unknown error occurred",
          "saveFailed": "Failed to save the OpenAPI Specification."
        },
        "workflow": {
          "runWorkflow": {
            "title": "Run Workflow",
            "jsonInput": "JSON Input",
            "invalidYaml": "Cannot run the workflow as it is not a valid YAML file.",
            "formInput": "Form Input",
            "formInputHint": "The first state of this Workflow must be of type 'validate' to generate a form.",
            "learnMoreBtn": "Learn more",
            "cancelBtn": "Cancel",
            "runBtn": "Run",
            "genericRunError": "Something went wrong running this workflow."
          },
          "settings": {
            "variables": {
              "list": {
                "title": "Workflow variables",
                "createBtn": "Add variable",
                "emptySearch": "No variable matches your search",
                "empty": "No variable found",
                "deleteSelected": "Delete selected"
              }
            }
          },
          "overview": {
            "instances": {
              "header": "Workflow instances",
              "noResult": "No instances of this workflow have been executed recently."
            },
            "metrics": {
              "header": "Success / failure rate",
              "noResult": "no data available",
              "loading": "loading...",
              "legend": "{{successRate}}% successful"
            },
            "services": {
              "header": "Workflow services"
            }
          }
        }
      },
      "workflow": {
        "menu": {
          "fileContent": "File Content",
          "overview": "Overview",
          "settings": "Settings",
          "services": "Services"
        },
        "updated": "Updated {{relativeTime}} ago",
        "runBtn": "Run",
        "apiCommands": {
          "tooltip": "Open API commands",
          "title": "Workflow API interactions",
          "namespace": "Namespace",
          "namespacePlaceholder": "your-namespace",
          "workflow": "Workflow",
          "workflowPlaceholder": "path-to-workflow",
          "interaction": "Interaction",
          "interactionPlaceholder": "select an interaction",
          "openDocsBtn": "Open API docs",
          "copyBtn": "Copy as cURL command",
          "copyBtnCopied": "Copied",
          "labels": {
            "execute": "Execute workflow",
            "awaitExecute": "Execute workflow and wait",
            "update": "Update a workflow"
          }
        },
        "editor": {
          "unsavedNote": "unsaved changes",
          "theresOneIssue": "There is an issue",
          "runBtn": "Run",
          "saveBtn": "Save",
          "layout": {
            "code": "Code View",
            "diagram": "Diagram View",
            "splitVertically": "Split Vertically",
            "splitHorizontally": "Split Horizontally"
          }
        }
      },
      "service": {
        "goToService": "Go to service",
        "goToServices": "Go to services",
        "editor": {
          "saveBtn": "Save",
          "form": {
            "serialisationError": "There was an error serializing the form data",
            "image": "Image",
            "scale": {
              "label": "Scale",
              "placeholder": "Select a scale",
              "tooltip": "\"Scale\" configures the desired instances of this resource in Kubernetes."
            },
            "size": {
              "label": "Size",
              "placeholder": "Select a size"
            },
            "cmd": "Cmd",
            "patches": {
              "label": "{{count}} Patches",
              "label_one": "{{count}} Patch",
              "addButton": "add patch",
              "modal": {
                "title": {
                  "edit": "Edit patch",
                  "create": "Create patch"
                },
                "op": {
                  "label": "Operation",
                  "placeholder": "Select an operation"
                },
                "path": "Path",
                "value": "Value"
              }
            },
            "envs": {
              "label": "Environment variables",
              "namePlaceholder": "NAME",
              "valuePlaceholder": "VALUE"
            }
          }
        }
      },
      "endpoint": {
        "openRouteLogs": "Open Logs",
        "editor": {
          "form": {
            "serialisationError": "There was an error serializing the form data",
            "path": "path",
            "timeout": "timeout (optional)",
            "methods": {
              "label": "methods",
              "modal": {
                "headline": "Remove this method with all its documentation?",
                "description": "You are about to remove the {{method}} method. Removing this method will also delete all its documentation. Do you want to delete the documentation as well or move it to another method?",
                "cancelBtn": "Cancel",
                "confirmBtn": "Remove method with documentation",
                "copy": "Move to {{method}}",
                "overwrite": "Move to {{method}} (overwrite)"
              }
            },
            "allowAnonymous": "allow anonymous",
            "plugins": {
              "target": {
                "table": {
                  "headline": "Target plugin",
                  "addButton": "set target plugin"
                },
                "modal": {
                  "headline": "Configure target plugin",
                  "label": "Target plugin",
                  "placeholder": "Please select a target plugin"
                },
                "types": {
                  "instant-response": "Instant Response",
                  "target-flow": "Workflow",
                  "target-flow-var": "Workflow Variable",
                  "target-namespace-file": "Namespace File",
                  "target-namespace-var": "Namespace Variable",
                  "target-event": "Event"
                },
                "instantResponse": {
                  "statusCode": "Status Code",
                  "statusCodePlaceholder": "200",
                  "contentType": "Content Type (optional)",
                  "contentTypePlaceholder": "application/json",
                  "statusMessage": "Status Message (optional)"
                },
                "targetFlow": {
                  "namespace": "Namespace (optional)",
                  "workflow": "Workflow",
                  "asynchronous": "Asynchronous",
                  "contentType": "Content Type (optional)",
                  "contentTypePlaceholder": "application/json"
                },
                "targetFlowVar": {
                  "namespace": "Namespace (optional)",
                  "workflow": "Workflow",
                  "variable": "Variable",
                  "contentType": "Content Type (optional)",
                  "contentTypePlaceholder": "application/json"
                },
                "targetNamespaceFile": {
                  "namespace": "Namespace (optional)",
                  "file": "File",
                  "contentType": "Content Type (optional)",
                  "contentTypePlaceholder": "application/json"
                },
                "targetNamespaceVariable": {
                  "namespace": "Namespace (optional)",
                  "variable": "Variable",
                  "contentType": "Content Type (optional)",
                  "contentTypePlaceholder": "application/json"
                },
                "targetEvent": {
                  "namespace": "Namespace (optional)"
                },
                "disableNamespaceSelectNote": "You can only access other namespaces when you are in the system namespace."
              },
              "inbound": {
                "modal": {
                  "headlineAdd": "Add inbound plugin",
                  "headlineEdit": "Edit inbound plugin",
                  "label": "Inbound plugin",
                  "placeholder": "Please select an inbound plugin"
                },
                "table": {
                  "headline": "{{count}} inbound plugins",
                  "headline_one": "{{count}} inbound plugin",
                  "addButton": "add inbound plugin"
                },
                "types": {
                  "acl": "Access control list (acl)",
                  "js-inbound": "JavaScript",
                  "header-manipulation": "Header manipulation",
                  "request-convert": "Request convert",
                  "event-filter": "Event filter"
                },
                "jsInbound": {
                  "script": "JavaScript"
                },
                "requestConvert": {
                  "omitHeaders": "Omit Headers",
                  "omitQueries": "Omit Queries",
                  "omitBody": "Omit Body",
                  "omitConsumer": "Omit Consumer"
                },
                "acl": {
                  "allow_groups": "Allow Groups (optional)",
                  "deny_groups": "Deny Groups (optional)",
                  "allow_tags": "Allow tags (optional)",
                  "deny_tags": "Deny tags (optional)",
                  "groupPlaceholder": "Enter a group",
                  "tagPlaceholder": "Enter a tag"
                },
                "headerManipulation": {
                  "headers_to_add": "Headers to add (optional)",
                  "headers_to_modify": "Headers to modify (optional)",
                  "headers_to_remove": "Headers to remove (optional)",
                  "namePlaceholder": "Enter a header name",
                  "valuePlaceholder": "Enter a header value"
                },
                "eventFilter": {
                  "script": "JavaScript",
                  "allow_non_events": "Allow non events (optional)"
                }
              },
              "outbound": {
                "modal": {
                  "headlineAdd": "Add outbound plugin",
                  "headlineEdit": "Edit outbound plugin",
                  "label": "Outbound plugin",
                  "placeholder": "Please select an outbound plugin"
                },
                "table": {
                  "headline": "{{count}} outbound plugins",
                  "headline_one": "{{count}} outbound plugin",
                  "addButton": "add outbound plugin"
                },
                "types": {
                  "js-outbound": "JavaScript"
                },
                "jsOutbound": {
                  "script": "JavaScript"
                }
              },
              "auth": {
                "modal": {
                  "headlineAdd": "Add auth plugin",
                  "headlineEdit": "Edit auth plugin",
                  "label": "Auth plugin",
                  "placeholder": "Please select an auth plugin"
                },
                "table": {
                  "headline": "{{count}} auth plugins",
                  "headline_one": "{{count}} auth plugin",
                  "addButton": "add auth plugin"
                },
                "types": {
                  "basic-auth": "Basic Auth",
                  "github-webhook-auth": "Github Webhook",
                  "gitlab-webhook-auth": "Gitlab Webhook",
                  "slack-webhook-auth": "Slack Webhook",
                  "key-auth": "Key Auth"
                },
                "basciAuth": {
                  "addUsernameHeader": "Add username header",
                  "addTagsHeader": "Add tags header",
                  "addGroupsHeader": "Add groups header"
                },
                "githubWebhookAuth": {
                  "secret": "secret"
                },
                "keyAuth": {
                  "addUsernameHeader": "Add username header",
                  "addTagsHeader": "Add tags header",
                  "addGroupsHeader": "Add groups header",
                  "keyName": "Key name (optional)",
                  "keyNamePlaceholder": "name of the key"
                }
              }
            },
            "docs": {
              "buttonLabel": "Edit OpenAPI Docs",
              "modal": {
                "title": "OpenAPI Docs",
                "unsupportedMethods": "Unsupported methods detected in the docs. Please only use one of the following methods: {{methods}}",
                "invalidYaml": "The YAML file is invalid. Please check the syntax and structure for errors."
              }
            }
          },
          "saveBtn": "Save"
        }
      },
      "consumer": {
        "goToConsumer": "Go to consumers",
        "editor": {
          "form": {
            "serialisationError": "There was an error serializing the form data",
            "username": "Username",
            "password": "Password",
            "apiKey": "Api key",
            "tags": "Tags (optional)",
            "groups": "Groups (optional)",
            "tagsPlaceholder": "Enter a tag",
            "groupsPlaceholder": "Enter a group"
          },
          "saveBtn": "Save"
        }
      }
    },
    "events": {
      "tabs": {
        "history": "Event history",
        "listeners": "Event listeners"
      },
      "history": {
        "title": "Cloud events history",
        "send": {
          "dialogTrigger": "Send new event",
          "dialogHeader": "Create new event",
          "submit": "Send"
        },
        "view": {
          "info": "This information is read-only, 'retrigger' will replay a stored copy of the event.",
          "dialogHeader": "View event",
          "submit": "Retrigger"
        },
        "tableHeader": {
          "id": "id",
          "type": "type",
          "source": "source",
          "receivedAt": "received"
        },
        "tableRow": {
          "realtiveTime": "{{relativeTime}} ago"
        },
        "empty": {
          "noFilterResults": "No events found with these filter criteria",
          "noResults": "No events found"
        },
        "filter": {
          "filterButton": "Filter",
          "placeholder": {
            "mainMenu": "Type or select a field...",
            "typeContains": "cloud.event.type",
            "eventContains": "search cloudevent content"
          },
          "field": {
            "typeContains": "type contains",
            "eventContains": "content contains",
            "receivedAfter": "received after",
            "receivedBefore": "received before"
          },
          "menuHeading": {
            "main": "Select filter",
            "typeContains": "type contains",
            "eventContains": "content contains"
          }
        },
        "selectPageSize": {
          "selectItem": "Show {{count}} rows"
        }
      },
      "listeners": {
        "title": "Event listeners",
        "tableHeader": {
          "target": "target",
          "type": "type",
          "mode": "mode",
          "createdAt": "updated",
          "eventTypes": "cloud event type",
          "contextFilters": "context filters"
        },
        "empty": {
          "noResults": "No event listeners found"
        },
        "tableRow": {
          "realtiveTime": "{{relativeTime}} ago",
          "type": {
            "workflow": "start workflow",
            "instance": "resume instance"
          },
          "contextFilters": "{{count}} filters",
          "contextFilters_zero": "-"
        }
      }
    },
    "monitoring": {
      "title": "Monitoring",
      "instances": {
        "successfulExecutions": {
          "title": "Successful Executions",
          "empty": "There are no recent successful executions."
        },
        "failedExecutions": {
          "title": "Failed Executions",
          "empty": "There are no recent failed executions."
        }
      }
    },
    "instances": {
      "list": {
        "title": "Recently executed instances",
        "refetchLabel": "Refetch instances",
        "empty": {
          "noInstances": "There are no recently executed instances",
          "noFilterResults": "No recently executed instances found with these filter criteria"
        },
        "tableHeader": {
          "name": "name",
          "id": "id",
          "invoker": "trigger",
          "state": "state",
          "startedAt": "started at",
          "finishedAt": "finished at",
          "childInstances": {
            "label": "spawned",
            "instanceCount": "{{count}} instances",
            "instanceCountMax": "+ {{count}} instances",
            "searchPlaceholder": "Search child instances...",
            "searchPlaceholderMax": "Search the latest {{count}} child instances...",
            "notFound": "No child instances found."
          }
        },
        "tableRow": {
          "realtiveTime": "{{relativeTime}} ago",
          "stillRunning": "still running"
        },
        "filter": {
          "filterButton": "Filter",
          "menuHeading": {
            "main": "Select filter",
            "AS": "filter by name",
            "STATUS": "filter by status",
            "TRIGGER": "filter by trigger",
            "AFTER": "filter created after",
            "BEFORE": "filter created before"
          },
          "field": {
            "AS": "name",
            "STATUS": "status",
            "TRIGGER": "trigger",
            "AFTER": "created after",
            "BEFORE": "created before"
          },
          "placeholder": {
            "mainMenu": "Type or select a field...",
            "AS": "filename.yaml",
            "STATUS": "Type or select status...",
            "TRIGGER": "Type or select trigger type..."
          }
        }
      },
      "detail": {
        "header": {
          "openWorkflow": "Open workflow",
          "cancelWorkflow": "Cancel workflow",
          "invoker": "trigger",
          "state": "state",
          "startedAt": "started at",
          "finishedAt": "finished at",
          "realtiveTime": "{{relativeTime}} ago"
        },
        "logs": {
          "title": "Logs for {{path}}",
          "tooltips": {
            "verbose": "Verbose logs",
            "minimize": "Minimize logs",
            "maximize": "Maximize logs"
          },
          "filter": {
            "filterButton": "Filter",
            "menuHeading": {
              "main": "Select filter",
              "workflowName": "workflow name",
              "stateName": "state name"
            },
            "field": {
              "workflowName": "workflow name",
              "stateName": "state name"
            },
            "placeholder": {
              "mainMenu": "Type or select a field...",
              "workflowName": "/path/filename.yaml",
              "stateName": "someStateName"
            }
          }
        },
        "diagram": {
          "minimizeInput": "Minimize diagram",
          "maximizeInput": "Maximize diagram"
        },
        "inputOutput": {
          "copyInput": "Copy input",
          "minimizeInput": "Minimize input",
          "maximizeInput": "Maximize input",
          "copyOutput": "Copy output",
          "minimizeOutput": "Minimize output",
          "maximizeOutput": "Maximize output",
          "tabs": {
            "input": "Input",
            "output": "Output"
          },
          "output": {
            "stillRunningMsg": "The workflow is still running",
            "noOutputMsg": "no output data was resolved"
          }
        }
      }
    },
    "mirror": {
      "header": {
        "ref": "ref",
        "url": "url",
        "editMirror": "Edit mirror",
        "sync": "Sync"
      },
      "syncDialog": {
        "title": "Sync {{namespace}}",
        "description": "Fetch and sync mirror with latest content from remote repository?",
        "warning": "Warning: This will overwrite all files in this namespace",
        "confirm": "Sync"
      },
      "syncs": {
        "list": {
          "title": "Syncs",
          "noResults": "No syncs found"
        },
        "detail": {
          "header": {
            "createdAt": "started",
            "relativeTime": "{{relativeTime}} ago",
            "type": "type",
            "status": "status"
          },
          "logs": {
            "title": "Activity log"
          }
        },
        "tableHeader": {
          "createdAt": "Started",
          "id": "ID",
          "status": "Status",
          "type": "Type"
        },
        "tableRow": {
          "realtiveTime": "{{relativeTime}} ago"
        }
      },
      "noMirror": {
        "title": "This namespace is not a mirror",
        "description1": "This page is only available for Git mirrors.",
        "description2": "When you create a new namespace, you can set it up as a Git mirror. This means the contents of a Git repository will be imported, and changes to your files will be synched between namespace and repository.",
        "docs": {
          "title": "Git mirrors",
          "description": "Read more about Git synching in our docs."
        },
        "example": {
          "title": "Try it out!",
          "description": "Create a mirror using our examples repository."
        }
      }
    },
    "services": {
      "list": {
        "title": "Services",
        "refetchLabel": "Refetch services",
        "tableHeader": {
          "name": "name",
          "image": "image",
          "scale": "scale",
          "size": "size",
          "cmd": "cmd",
          "tooltip": "Desired instances / currently running instances in Kubernetes"
        },
        "tableRow": {
          "errorLabel": "Error",
          "envsLabel": "{{count}} environment variables",
          "envsLabel_one": "{{count}} environment variable"
        },
        "contextMenu": {
          "rebuild": "Rebuild"
        },
        "empty": {
          "title": "No services exist yet"
        },
        "rebuild": {
          "title": "Rebuild service",
          "msg": "Are you sure you want to rebuild <b>{{name}}</b>? This will kill the running service, repull the image and start the service again.",
          "cancelBtn": "Cancel",
          "deleteBtn": "Rebuild"
        }
      },
      "detail": {
        "logs": {
          "noPods": "No running pods",
          "title": "Logs for {{name}}",
          "tab": "Pod {{number}} of {{total}}"
        }
      }
    },
    "permissions": {
      "tabs": {
        "tokens": "Tokens",
        "roles": "Roles"
      },
      "permissionsInfo": {
        "all": "all topics",
        "partial": "{{count}} topics",
        "partial_one": "{{count}} topic",
        "noPermissions": "no permissions"
      },
      "OidcGroupsInfo": {
        "title": "{{count}} OIDC Groups",
        "title_one": "{{count}} OIDC Group",
        "title_zero": "no OIDC Groups"
      },
      "durationHint": {
        "title": "Token lifetime",
        "description": "The token lifetime must be a valid ISO 8601 duration string.",
        "examples": "Examples:",
        "P1Y": "1 year",
        "PT48H": "48 hours",
        "P1Y2M15D": "1 year, 2 months, and 15 days"
      },
      "permissionsSelector": {
        "permissions": "Permissions",
        "selectAll": "Select all",
        "noPermissions": "No permissions"
      },
      "oidcGroupSelector": {
        "label": "Oidc groups",
        "placeholder": "enter-oidc-group"
      },
      "roles": {
        "tableHeader": {
          "name": "name",
          "description": "description",
          "oidcGroups": "oidc groups",
          "permissions": "permissions",
          "createdAt": "created at"
        },
        "createBtn": "Create a new role",
        "noRoles": "There are no roles yet.",
        "contextMenu": {
          "edit": "Edit",
          "delete": "Delete"
        },
        "edit": {
          "title": "Edit Role",
          "saveBtn": "Save",
          "cancelBtn": "Cancel"
        },
        "create": {
          "title": "Create a Role",
          "saveBtn": "Create",
          "cancelBtn": "Cancel"
        },
        "form": {
          "name": {
            "label": "Name",
            "placeholder": "role-name",
            "alreadyExist": "The name already exists"
          },
          "description": {
            "label": "Description",
            "placeholder": "Enter a description for the role"
          }
        },
        "delete": {
          "title": "Delete role",
          "msg": "Are you sure you want to delete <b>{{name}}</b>? This cannot be undone.",
          "cancelBtn": "Cancel",
          "deleteBtn": "Delete"
        }
      },
      "tokens": {
        "tableHeader": {
          "name": "name",
          "description": "description",
          "prefix": "Secret hint",
          "permissions": "permissions",
          "created": "created",
          "expires": "expires"
        },
        "createBtn": "Create a new token",
        "created": "{{relativeTime}} ago",
        "expiresIn": "in {{relativeTime}}",
        "expiredAgo": "{{relativeTime}} ago",
        "noTokens": "There are no tokens yet.",
        "contextMenu": {
          "delete": "Delete"
        },
        "create": {
          "title": "Create a token",
          "cancelBtn": "Cancel",
          "createBtn": "Create",
          "name": {
            "label": "Name",
            "placeholder": "Enter a name for the token",
            "alreadyExist": "The name already exists"
          },
          "description": {
            "label": "Description",
            "placeholder": "Enter a description for the token"
          },
          "duration": {
            "label": "Duration",
            "placeholder": "Lifetime of the token in ISO 8601 like e.g P1Y (1 year) or PT12H (12 hours)"
          },
          "permissions": {
            "noPermissions": "You must select at least one permission"
          },
          "success": {
            "title": "Token was Created",
            "description": "Your token was created successfully. Please copy it and store it in a safe place as it will not be shown again.",
            "copy": "Copy token",
            "copied": "Copied!",
            "close": "Close"
          }
        },
        "delete": {
          "title": "Delete token",
          "msg": "Are you sure you want to delete this token? This cannot be undone.",
          "cancelBtn": "Cancel",
          "deleteBtn": "Delete"
        }
      }
    },
    "settings": {
      "generic": {
        "contextMenu": {
          "title": "Actions",
          "delete": "Delete",
          "edit": "Edit",
          "download": "Download"
        }
      },
      "secrets": {
        "list": {
          "title": "Secrets",
          "empty": "No secrets exist yet",
          "createBtn": "Create secret",
          "searchPlaceholder": "Filter secrets...",
          "emptySearch": "No secret matches your search",
          "initializeBtn": "Initialize secret",
          "notInitializedTooltip": "We created a placeholder for this secret because we detected a reference to it in one of your workflows. Please initialize the secret by uploading a file or entering a value."
        },
        "delete": {
          "description": "Are you sure you want to delete <b>{{name}}</b>?<br/> This cannot be undone."
        },
        "form": {
          "unsupported": "Unsupported MimeType: Only text-based files can be used for secrets",
          "name": {
            "label": "Name",
            "placeholder": "secret-name",
            "nameAlreadyExists": "The name already exists"
          }
        },
        "create": {
          "title": "Add a secret"
        },
        "edit": {
          "title": "Edit {{name}}",
          "editNote": "Existing secrets cannot be retrieved after creating. But you can overwrite the existing value with a new one"
        }
      },
      "registries": {
        "list": {
          "title": "Container Registries",
          "empty": "No registries exist yet",
          "createBtn": "Create registry",
          "searchPlaceholder": "Filter registries...",
          "emptySearch": "No registry matches your search"
        },
        "delete": {
          "description": "Are you sure you want to delete <b>{{name}}</b>?<br/> This cannot be undone."
        },
        "create": {
          "description": "Add a container registry",
          "url": "URL",
          "user": "User",
          "password": "Password"
        }
      },
      "variables": {
        "list": {
          "title": "Variables",
          "empty": "No variables exist yet",
          "createBtn": "Create variable",
          "searchPlaceholder": "Filter variables...",
          "emptySearch": "No variable matches your search"
        },
        "delete": {
          "description": "Are you sure you want to delete <b>{{name}}</b>?<br/> This cannot be undone."
        }
      },
      "deleteNamespace": {
        "title": "Delete namespace",
        "description": "This will permanently delete the current active namespace and all resources associated with it.",
        "deleteBtn": "Delete namespace",
        "modal": {
          "description": "Are you sure you want to delete <b>{{namespace}}</b>?<br/> This cannot be undone.",
          "confirm": "Please type <b>{{namespace}}</b> to confirm."
        }
      },
      "theme": {
        "title": "Theme"
      },
      "namespace": {
        "title": "Namespace"
      },
      "apiKey": {
        "title": "API Key"
      },
      "version": {
        "title": "Version"
      },
      "namespacesList": {
        "title": "Namespaces"
      }
    },
    "gateway": {
      "tabs": {
        "routes": "Routes",
        "consumers": "Consumers",
        "info": "Routes Info",
        "documentation": "Documentation"
      },
      "routes": {
        "columns": {
          "filePath": "file path",
          "methods": "methods",
          "path": "path",
          "plugins": "plugins",
          "anonymous": "allow anonymous"
        },
        "row": {
          "methods": {
            "tooltipLabel": "{{count}} methods",
            "tooltipLabel_one": "{{count}} method",
            "tooltipLabel_zero": "no methods set"
          },
          "allowAnonymous": {
            "yes": "yes",
            "no": "no",
            "public": "public endpoint"
          },
          "error": {
            "count": "{{count}} errors",
            "count_one": "{{count}} error"
          },
          "warnings": {
            "count": "{{count}} warnings",
            "count_one": "{{count}} warning"
          },
          "plugin": {
            "countAll": "{{count}} plugins",
            "countAll_one": "{{count}} plugin",
            "countType": "{{count}} {{type}} plugins",
            "countType_one": "{{count}} {{type}} plugin"
          }
        },
        "empty": "No routes exist yet",
        "searchPlaceholder": "Filter routes...",
        "emptySearch": "No route matches your search",
        "detail": {
          "editRoute": "Edit Route"
        }
      },
      "consumer": {
        "refetchLabel": "Refetch consumers",
        "columns": {
          "username": "username",
          "password": "password",
          "apikey": "apikey",
          "tags": "tags",
          "groups": "groups"
        },
        "empty": "No consumers exist yet"
      },
      "info": {
        "title": "Gateway Info",
        "columns": {
          "title": "Title",
          "version": "Version",
          "description": "Description",
          "file": "File",
          "errors": "Errors",
          "errorSiblingFields": "The OpenAPI Specification contains unexpected fields. Please remove any extra fields that are not part of a valid OpenAPI structure."
        }
      },
      "documentation": {
        "title": "OpenAPI Documentation",
        "noDocumentation": "No documentation found",
        "copySpec": "Copy Spec",
        "copied": "Copied!"
      }
    },
    "jqPlayground": {
      "title": "jq Playground",
      "description": "jq Playground is an environment where you can quickly test your jq commands against JSON input.",
      "openManualBtn": "Open jq manual",
      "queryPlaceholder": "Enter your jq query here...",
      "input": "Input",
      "output": "Output",
      "logs": "Logs",
      "submitBtn": "Run query",
      "examples": {
        "title": "Examples",
        "buttonLabel": "Run",
        "snippets": {
          "unchangedInput": "unchanged input",
          "valueAtKey": "value at key",
          "arrayOperation": "array operation",
          "arrayObjectConstruction": "array/object construction",
          "lengthOfValue": "length of a value",
          "keysInArray": "keys in an array",
          "feedInput": "feed input into multiple filters",
          "pipeOutput": "pipe output of one filter to the next filter",
          "inputUnchanged": "input unchanged if foo returns true",
          "invokeFilter": "invoke filter foo for each input",
          "conditionals": "conditionals",
          "stringInterpolation": "string interpolation"
        }
      }
    }
  },
  "components": {
    "mainMenu": {
      "explorer": "Explorer",
      "monitoring": "Monitoring",
      "instances": "Instances",
      "events": "Events",
      "gateway": "Gateway",
      "permissions": "Permissions",
      "services": "Services",
      "settings": "Settings",
      "jqPlayground": "jq Playground",
      "mirror": "Mirror"
    },
    "breadcrumb": {
      "searchPlaceholder": "Search namespace...",
      "notFound": "No namespace found.",
      "createBtn": "Create new namespace",
      "loading": "loading...",
      "instances": "Instances",
      "eventHistory": "Event History",
      "services": "Services",
      "eventListeners": "Event Listeners",
      "monitoring": "Monitoring",
      "mirror": "Mirror",
      "permissions": "Permissions",
      "permissionsPolicy": "Policy",
      "permissionsTokens": "Tokens",
      "permissionsRoles": "Roles",
      "settings": "Settings",
      "gateway": "Gateway",
      "gatewayRoutes": "Routes",
      "gatewayConsumers": "Consumers",
      "gatewayDocumentation": "Documentation",
      "gatewayInfo": "Routes Info",
      "jqPlayground": "jq Playground"
    },
    "contextMenu": {
      "deleteBtn": "Delete",
      "moveUpBtn": "Move up",
      "moveDownBtn": "Move down"
    },
    "namespaceEdit": {
      "title": {
        "new": "Create a new namespace",
        "edit": "Update mirror for {{namespace}}"
      },
      "submitBtn": {
        "create": "Create",
        "save": "Save"
      },
      "nameAlreadyExists": "The name already exists",
      "cancelBtn": "Cancel",
      "tab": {
        "namespace": "Namespace",
        "mirror": "Mirror"
      },
      "formTypeSelect": {
        "keep-token": "Keep existing token (http)",
        "keep-ssh": "Keep existing keys (ssh)",
        "public": "Public",
        "token": "Token (http)",
        "ssh": "Key pair (ssh)"
      },
      "formTypeMessage": {
        "keep": "Your authentication data will be kept unless you chose a different option.",
        "replace": "The new authentication settings will overwrite any stored credentials. Select the 'keep' option above to prevent this."
      },
      "placeholder": {
        "name": "new-namespace-name",
        "ref": "branch or commit hash",
        "httpUrl": "https://example.com/direktiv/repo.git",
        "gitUrl": "git@example.com/direktiv/repo.git",
        "passphrase": "Passphrase (optional)",
        "publicKey": "Public Key (required)",
        "privateKey": "Private Key (required)",
        "token": "token",
        "formType": "Select authentication method"
      },
      "label": {
        "name": "Name",
        "ref": "Ref",
        "url": "Url",
        "passphrase": "Passphrase",
        "publicKey": "Public key",
        "privateKey": "Private key",
        "token": "Token",
        "formType": "Auth type",
        "insecure": "Skip certificate validation"
      },
      "tooltip": {
        "url": "URL to repository. If auth method is SSH, a git url must be used, e.g. 'git@github.com:direktiv/apps-svc.git'. All other auth methods must use HTTP/S urls.",
        "ref": "Repository reference to sync from. For example this could be a commit hash ('b139f0e') or branch ('main').",
        "token": "Personal access token (for authentication with a HTTP/S url).",
        "passphrase": "Passphrase to decrypt keys (optional).",
        "privateKey": "Private SSH key used for authentication via git@ url.",
        "publicKey": "Public SSH key used for authenticating via git@ url.",
        "insecure": "This will skip all checks for TLS certificate validity (only relevant for https and ssh, has no effect on http)",
        "systemNamespaceTooltip": "Using the name 'system' will create a privileged namespace with special system-wide impacts"
      }
    },
    "button": {
      "label": {
        "cancel": "Cancel",
        "create": "Create",
        "delete": "Delete",
        "save": "Save"
      }
    },
    "dialog": {
      "header": {
        "confirm": "Confirmation required"
      }
    },
    "apiError": {
      "onlyLabel": "The API returned an unexpected error",
      "withMessage": "The API returned an unexpected error: {{message}}"
    },
    "formErrors": {
      "fieldInvalid": "this field is invalid"
    },
    "notificationMenu": {
      "title": "Notifications",
      "isLoading": {
        "description": "Loading..."
      },
      "noIssues": {
        "description": "You do not have any notifications."
      },
      "hasIssues": {
        "secrets": {
          "description": "You have {{count}} uninitialized secrets.",
          "description_one": "You have {{count}} uninitialized secret."
        }
      }
    },
    "namespaceSelector": {
      "placeholder": "Select Namespace",
      "loading": "loading...",
      "optionDoesNotExist": "{{namespace}} (does not exist)",
      "systemNamespaceTooltip": "A privileged namespace with special system-wide impacts"
    },
    "variableForm": {
      "title": {
        "create": "Create a variable",
        "edit": "Edit {{name}}"
      },
      "name": {
        "label": "Name",
        "placeholder": "variable-name",
        "nameAlreadyExists": "The name already exists"
      },
      "mimeType": {
        "label": "Mimetype",
        "unspecified": "Mimetype is unspecified",
        "placeholder": "Select a mimetype"
      },
      "noPreview": "Only text based mime types are supported for preview and editing"
    },
    "namespaceVariablepicker": {
      "title": "Variables in \"{{path}}\"",
      "buttonText": "Browse Variables",
      "placeholder": "No Variable selected",
      "error": {
        "pathNotFound": "The directory \"{{path}}\" was not found.",
        "noVarsInNamespace": "No Variables found"
      }
    },
    "workflowVariablepicker": {
      "title": "Variables in \"{{path}}\"",
      "buttonText": "Browse Variables",
      "placeholder": "No Variable selected",
      "error": {
        "pathNotFound": "The workflow \"{{path}}\" was not found.",
        "noVarsInWorkflow": "No Variables found in \"{{path}}\"",
        "unselected": "Please select a workflow first."
      }
    },
    "filepicker": {
      "buttonText": "Browse Files",
      "placeholder": "No File selected",
      "emptyDirectory": {
        "title": "The directory \"{{path}}\" is empty."
      },
      "error": {
        "title": "The path \"{{path}}\" was not found.",
        "linkText": "Go back to root directory"
      }
    },
    "fileUpload": {
      "label": "Upload a file"
    },
    "userMenu": {
      "loggedIn": "You are logged in",
      "loggedInAs": "You are logged in as {{username}}",
      "logout": "Logout",
      "appearance": "Appearance",
      "switchToLight": "Switch to light mode",
      "switchToDark": "Switch to dark mode",
      "help": "Help",
      "docs": "Open the docs",
      "supportChannelOnSlack": "Support Channel on Slack"
    },
    "modalWrapper": {
      "saveBtn": "Save",
      "cancelBtn": "Cancel"
    },
    "logs": {
      "title": "Logs",
      "followLogs": "Follow logs",
      "logsCount": "received {{count}} log entries",
      "logsCount_one": "received {{count}} log entry",
      "copy": "Copy logs",
      "logEntry": {
        "pathLabel": "path:",
        "messageLabel": "msg:",
        "stateLabel": "state:",
        "instanceLabel": "instance:",
        "errorLabel": "error:"
      }
    },
    "blocker": {
      "unsavedChangesWarning": "You have unsaved changes that will be lost when leaving this route. Are you sure you want to leave?"
    },
    "filters": {
      "menuHeading": {
        "receivedAfter": "filter by received after",
        "receivedBefore": "filter by received before"
      }
    },
    "timepicker": {
      "menuHeading": "refine time",
      "menuLabels": {
        "hours": "Hours",
        "minutes": "Minutes",
        "seconds": "Seconds"
      }
    }
  },
  "api": {
    "generic": {
      "error": "An error occurred",
      "noPermissionTitle": "No permission",
      "noPermissionMutationDescription": "You do not have permission to perform this action",
      "noPermissionQueryDescription": "You do not have permission to view this data"
    },
    "authentication": {
      "mutate": {
        "authenticate": {
          "error": {
            "description": "The auth endpoint did not answer as expected 😢"
          }
        }
      }
    },
    "tree": {
      "mutate": {
        "directory": {
          "create": {
            "success": {
              "title": "Directory created"
            },
            "delete": {
              "title": "Directory deleted"
            },
            "rename": {
              "title": "Directory renamed"
            }
          }
        },
        "file": {
          "create": {
            "success": {
              "title": "File created",
              "description": "{{name}} was created in {{path}}"
            },
            "error": {
              "description": "could not create {{name}} 😢"
            }
          },
          "delete": {
            "success": {
              "title": "File deleted",
              "description": "{{name}} was deleted"
            },
            "error": {
              "description": "could not delete {{name}} 😢"
            }
          },
          "rename": {
            "success": {
              "title": "File renamed",
              "description": "{{name}} was renamed"
            },
            "error": {
              "description": "could not rename {{name}} 😢"
            }
          }
        },
        "setVariable": {
          "success": {
            "title": "Worfklow variable saved",
            "description": "Saved variable {{variable}} for workflow {{workflow}}"
          },
          "error": {
            "description": "could not save workflow variable 😢"
          }
        },
        "downloadVariable": {
          "error": {
            "description": "could not download variable 😢"
          }
        }
      }
    },
    "namespaces": {
      "mutate": {
        "create": {
          "success": {
            "title": "Create a new namespace",
            "description": "Namespace {{name}} was created successfully."
          },
          "error": {
            "description": "could not create namespace 😢"
          }
        },
        "update": {
          "success": {
            "title": "Edit namespace",
            "description": "Namespace {{name}} was updated successfully."
          },
          "error": {
            "description": "could not update namespace 😢"
          }
        },
        "delete": {
          "success": {
            "title": "Delete namespace",
            "description": "Namespace {{name}} was deleted successfully."
          },
          "error": {
            "description": "could not delete namespace 😢"
          }
        },
        "syncMirror": {
          "success": {
            "title": "Sync namespace",
            "description": "Triggered sync for namespace {{namespace}}"
          },
          "error": {
            "description": "could not sync namespace 😢"
          }
        },
        "updateMirror": {
          "success": {
            "title": "Update mirror",
            "description": "Settings for mirror {{namespace}} were updated"
          },
          "error": {
            "description": "could not update mirror settings 😢"
          }
        }
      }
    },
    "registries": {
      "mutate": {
        "createRegistry": {
          "success": {
            "title": "Registry created",
            "description": "Registry {{name}} was created."
          },
          "error": {
            "description": "Could not create registry 😢"
          }
        },
        "deleteRegistry": {
          "success": {
            "title": "Registry deleted",
            "description": "Registry {{name}} was deleted."
          },
          "error": {
            "description": "Could not delete registry 😢"
          }
        }
      }
    },
    "services": {
      "mutate": {
        "rebuildService": {
          "success": {
            "title": "Service rebuild",
            "description": "Service was rebuilt."
          },
          "error": {
            "description": "Could not rebuild service 😢"
          }
        }
      }
    },
    "variables": {
      "mutate": {
        "updateVariable": {
          "success": {
            "title": "Variable saved",
            "description": "Variable {{name}} was saved."
          },
          "error": {
            "description": "Could not save variable 😢"
          }
        },
        "deleteVariable": {
          "allItemsMsg": "Are you sure you want to delete <b>all</b> variables?",
          "multipleItemsMsg": "Are you sure you want to delete <b>{{count}}</b> variables?",
          "singleItemMsg": "Are you sure you want to delete variable <b>'{{name}}'</b>?",
          "success": {
            "title": "Variable deleted",
            "description": "{{count}} variables have been deleted.",
            "description_one": "{{count}} variable has been deleted."
          },
          "error": {
            "description": "Could not delete variable 😢"
          }
        },
        "downloadVariable": {
          "error": {
            "description": "Could not download variable 😢"
          }
        }
      }
    },
    "secrets": {
      "mutate": {
        "updateSecret": {
          "success": {
            "title": "Secret saved",
            "description": "Secret {{name}} was saved."
          },
          "error": {
            "description": "Could not save secret 😢"
          }
        },
        "deleteSecret": {
          "success": {
            "title": "Secret deleted",
            "description": "Secret {{name}} was deleted"
          },
          "error": {
            "description": "Could not delete secret 😢"
          }
        }
      }
    },
    "events": {
      "mutate": {
        "sendEvent": {
          "success": {
            "title": "Event sent",
            "description": "The event was sent"
          },
          "error": {
            "description": "The event could not be sent 😢"
          }
        },
        "replayEvent": {
          "success": {
            "title": "Event retriggered",
            "description": "The event was retriggered"
          },
          "error": {
            "description": "The event could not be retriggered 😢"
          }
        }
      }
    },
    "tokens": {
      "mutate": {
        "createToken": {
          "error": {
            "description": "The token could not be created 😢"
          }
        },
        "deleteToken": {
          "success": {
            "title": "Token deleted",
            "description": "The token was deleted"
          },
          "error": {
            "description": "The token could not be deleted 😢"
          }
        }
      }
    },
    "roles": {
      "mutate": {
        "createRole": {
          "success": {
            "title": "Role created",
            "description": "The role was created"
          },
          "error": {
            "description": "The role could not be created 😢"
          }
        },
        "editRole": {
          "success": {
            "title": "Role updated",
            "description": "The role was updated"
          },
          "error": {
            "description": "The role could not be updated 😢"
          }
        },
        "deleteRole": {
          "success": {
            "title": "Role deleted",
            "description": "The role was deleted"
          },
          "error": {
            "description": "The role could not be deleted 😢"
          }
        }
      }
    }
  },
  "direktivPage": {
    "error": {
      "invalidSchema": "The page can not be rendered because it has an invalid configuration",
      "blockNotImplemented": "The block type \"{{type}}\" is not implemented yet",
      "genericError": "There was an unexpected error",
      "duplicateId": "Error in block with id {{id}}: The id is already used by one of the parent blocks",
      "query": {
        "queryFailed": "Error in query with id {{id}}: {{url}} responded with {{status}}",
        "invalidJson": "Error in query with id {{id}}: {{url}} returned an invalid JSON"
      },
      "blocks": {
        "table": { "noResult": "No entries to show" }
      },
      "templateString": {
        "namespaceInvalid": "Variable error ({{variable}}): The template string does not have a valid namespace.",
        "idUndefined": "Variable error ({{variable}}): The template string is missing an id.",
        "pointerUndefined": "Variable error ({{variable}}): The template string is missing a pointer.",
        "NoStateForId": "Variable error ({{variable}}): Could not find any state for the id",
        "invalidJson": "Variable error ({{variable}}): Trying to process a template string on an invalid JSON object",
        "invalidPath": "Variable error ({{variable}}): The path is not valid. It points to an undefined value",
        "couldNotStringify": "Variable error ({{variable}}): Pointing to a value that can not be stringified. Make sure to point to either a String, Number, Boolean, or Null.",
        "notAnArray": "Variable error ({{variable}}): Pointing to a value that is not an array.",
        "notAnArrayOfStrings": "Variable error ({{variable}}): Pointing to a value that is not an array of strings.",
        "notABoolean": "Variable error ({{variable}}): Pointing to a value that is not a boolean.",
        "notANumber": "Variable error ({{variable}}): Pointing to a value that is not a number."
      }
    },
    "page": {
      "blocks": {
        "loop": {
          "hiddenItems": "{{count}} hidden loop entries",
          "hiddenItems_one": "{{count}} hidden loop entry",
          "infoHiddenItems_first": "Click on the Live View Button",
          "infoHiddenItems_second": "to see the full list"
        },
        "table": { "noResult": "No entries to show" },
        "form": {
          "success": "The form has been submitted successfully",
          "error": "Form submission failed",
          "optional": "(optional)",
          "selectPlaceholder": "Select an option",
          "datePickerPlaceholder": "Pick a date"
        }
      }
    },
    "blockEditor": {
      "generic": {
        "settingsTab": "Settings",
        "addBlockTab": "Add Block",
        "saveButton": "Save",
        "cancelButton": "Cancel",
        "confirmButton": "Confirm"
      },

      "toolbar": {
        "code": "Code View",
        "edit": "Edit",
        "live": "Live View"
      },
      "blockName": {
        "headline": "Headline",
        "text": "Text",
        "button": "Button",
        "card": "Card",
        "dialog": "Dialog",
        "form": "Form",
        "form-checkbox": "Checkbox",
        "form-string-input": "String Input",
        "form-date-input": "Date Input",
        "form-number-input": "Number Input",
        "form-select": "Select",
        "form-textarea": "Textarea",
        "loop": "Loop",
        "query-provider": "Query Provider",
        "column": "Column",
        "columns": "Columns",
        "image": "Image",
        "table": "Table"
      },
      "blockForms": {
        "keyValue": {
          "key": "Key",
          "value": "Value",
          "variable": "variable name"
        },
        "text": {
          "description": "Text blocks are used to display a block of text.",
          "contentLabel": "Content",
          "contentPlaceholder": "Enter text here..."
        },
        "headline": {
          "description": "Headlines are used to display a title for a section of content. They can be used to create a hierarchy of content.",
          "labelLabel": "Label",
          "labelPlaceholder": "Headline",
          "levelLabel": "Level"
        },
        "image": {
          "description": "Image blocks are used to display images on the page.",
          "srcLabel": "Image Source",
          "srcPlaceholder": "Enter image URL",
          "widthLabel": "Width",
          "widthPlaceholder": "Width in pixels",
          "heightLabel": "Height",
          "heightPlaceholder": "Height in pixels"
        },
        "dialog": {
          "description": "A Dialog block contains a button that opens a dialog when clicked. The dialog can contain any number of blocks.",
          "triggerLabelLabel": "Button Label",
          "triggerLabelPlaceholder": "Open Dialog"
        },
        "loop": {
          "description": "A Loop block allows you to repeat a set of blocks for each item in an array.",
          "idLabel": "loop ID",
          "idPlaceholder": "unique identifier name to reference the content of a loop iteration",
          "dataLabel": "data",
          "dataPlaceholder": "Path to an array for the loop (e.g. query.companies.data)",
          "pageSizeLabel": "Page Size",
          "pageSizePlaceholder": "Number of items to show on a page (e.g. 10)"
        },
        "table": {
          "description": "A Table block displays data in a table format, as one row for each item in an array. It can be used to display data from a Query Provider",
          "data": {
            "idLabel": "loop ID",
            "idPlaceholder": "unique identifier to reference the data for the current row",
            "dataLabel": "data",
            "dataPlaceholder": "Path to an array for the table (e.g. query.companies.data)"
          },
          "action": {
            "labelLabel": "Label",
            "labelPlaceholder": "The label of the Action (e.g. Edit, Delete)",
            "itemLabel": "Action",
            "tableLabel": "{{count}} Actions",
            "tableLabel_one": "{{count}} Action"
          },
          "column": {
            "labelLabel": "Label",
            "labelPlaceholder": "Column label",
            "contentLabel": "Content",
            "contentPlaceholder": "The content of the column (e.g. E-Mail: {{loop.company-table.email}})",
            "itemLabel": "Column",
            "tableLabel": "{{count}} Columns",
            "tableLabel_one": "{{count}} Column"
          }
        },
        "queryProvider": {
          "description": "A Query Provider fetches data from one or multiple APIs and makes the results accessible to its child blocks.",
          "query": {
            "idLabel": "ID",
            "idPlaceholder": "unique identifier name to reference this query in any child block",
            "urlLabel": "URL",
            "urlPlaceholder": "relative or absolute url like /path/to/endpoint or https://...",
            "itemLabel": "Query",
            "tableLabel": "{{count}} Queries",
            "tableLabel_one": "{{count}} Query",
            "queryParamsLabel": "Query Parameters"
          }
        },
        "form": {
          "description": "A Form block allows you to create a form that can be submitted to a URL.",
          "mutation": {
            "triggerLabelLabel": "Button Label",
            "triggerLabelPlaceholder": "Submit Form",
            "idLabel": "form ID",
            "idPlaceholder": "unique identifier name to reference this form in any child block",
            "methodLabel": "HTTP Method",
            "urlLabel": "URL",
            "urlPlaceholder": "relative or absolute url like /path/to/endpoint or https://...",
            "queryParamsLabel": "Query Parameters",
            "requestHeadersLabel": "Request Headers",
            "requestBodyLabel": "Request Body"
          }
        },
        "formPrimitives": {
          "idLabel": "ID",
          "idPlaceholder": "unique identifier to reference this form element in the form block",
          "label": "Label",
          "labelPlaceholder": "Label for the form element",
          "description": "Description",
          "descriptionPlaceholder": "Description for the form element",
          "optional": "Optional field",
          "defaultValue": {
            "label": "Default value",
            "type": {
              "boolean": "Static",
              "number": "Static",
              "variable": "Variable"
            },
            "placeholder": "Enter default value",
            "placeholderVariable": "Enter variable name",
            "placeholderSelect": "Select default option"
          },
          "stringInput": {
            "description": "An input field that allows users to enter text.",
            "variantLabel": "Input Type"
          },
          "dateInput": {
            "description": "An input field that allows users to enter a date."
          },
          "numberInput": {
            "description": "An input field that allows users to enter a number."
          },
          "checkbox": {
            "description": "A checkbox allows users to select or unselect a boolean option."
          },
          "textarea": {
            "description": "A textarea allows users to enter multi-line text."
          },
          "select": {
            "description": "A select dropdown allows users to choose from a predefined list of options.",
            "valuesLabel": "Options",
            "valuesPlaceholder": "Select option",
            "type": {
              "variable": "Variable",
              "array": "Static"
            }
          }
        }
      },
      "contextMenu": {
        "deleteButton": "Delete"
      },
      "blockForm": {
        "title": "{{action}} {{type}} @{{path}}",
        "noFormDescription": "This block has no properties other than child blocks, which you can add/remove in the page preview.",
        "action": {
          "create": "create",
          "edit": "edit",
          "delete": "delete"
        },
        "type": {
          "page": "page",
          "text": "text block",
          "headline": "headline block",
          "button": "button block",
          "card": "card block",
          "dialog": "dialog block",
          "form": "form block",
          "form-checkbox": "checkbox block",
          "form-string-input": "string input block",
          "form-number-input": "number input block",
          "form-date-input": "date input block",
          "form-select": "select block",
          "form-textarea": "textarea block",
          "loop": "loop block",
          "query-provider": "query provider",
          "column": "column block",
          "columns": "set of columns",
          "image": "image block",
          "table": "table block"
        }
      },
      "delete": {
        "warning": "This will remove the current block and all content (including blocks nested into it). Are you sure you want to proceed?"
      }
    }
  }
}
