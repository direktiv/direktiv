/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as NNamespaceRouteImport } from './routes/n/$namespace/route'
import { Route as NNamespaceServicesIndexImport } from './routes/n/$namespace/services/index'
import { Route as NNamespaceExplorerIndexImport } from './routes/n/$namespace/explorer/index'
import { Route as NNamespaceServicesServiceImport } from './routes/n/$namespace/services/$service'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NNamespaceRouteRoute = NNamespaceRouteImport.update({
  id: '/n/$namespace',
  path: '/n/$namespace',
  getParentRoute: () => rootRoute,
} as any)

const NNamespaceServicesIndexRoute = NNamespaceServicesIndexImport.update({
  id: '/services/',
  path: '/services/',
  getParentRoute: () => NNamespaceRouteRoute,
} as any)

const NNamespaceExplorerIndexRoute = NNamespaceExplorerIndexImport.update({
  id: '/explorer/',
  path: '/explorer/',
  getParentRoute: () => NNamespaceRouteRoute,
} as any)

const NNamespaceServicesServiceRoute = NNamespaceServicesServiceImport.update({
  id: '/services/$service',
  path: '/services/$service',
  getParentRoute: () => NNamespaceRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/n/$namespace': {
      id: '/n/$namespace'
      path: '/n/$namespace'
      fullPath: '/n/$namespace'
      preLoaderRoute: typeof NNamespaceRouteImport
      parentRoute: typeof rootRoute
    }
    '/n/$namespace/services/$service': {
      id: '/n/$namespace/services/$service'
      path: '/services/$service'
      fullPath: '/n/$namespace/services/$service'
      preLoaderRoute: typeof NNamespaceServicesServiceImport
      parentRoute: typeof NNamespaceRouteImport
    }
    '/n/$namespace/explorer/': {
      id: '/n/$namespace/explorer/'
      path: '/explorer'
      fullPath: '/n/$namespace/explorer'
      preLoaderRoute: typeof NNamespaceExplorerIndexImport
      parentRoute: typeof NNamespaceRouteImport
    }
    '/n/$namespace/services/': {
      id: '/n/$namespace/services/'
      path: '/services'
      fullPath: '/n/$namespace/services'
      preLoaderRoute: typeof NNamespaceServicesIndexImport
      parentRoute: typeof NNamespaceRouteImport
    }
  }
}

// Create and export the route tree

interface NNamespaceRouteRouteChildren {
  NNamespaceServicesServiceRoute: typeof NNamespaceServicesServiceRoute
  NNamespaceExplorerIndexRoute: typeof NNamespaceExplorerIndexRoute
  NNamespaceServicesIndexRoute: typeof NNamespaceServicesIndexRoute
}

const NNamespaceRouteRouteChildren: NNamespaceRouteRouteChildren = {
  NNamespaceServicesServiceRoute: NNamespaceServicesServiceRoute,
  NNamespaceExplorerIndexRoute: NNamespaceExplorerIndexRoute,
  NNamespaceServicesIndexRoute: NNamespaceServicesIndexRoute,
}

const NNamespaceRouteRouteWithChildren = NNamespaceRouteRoute._addFileChildren(
  NNamespaceRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/n/$namespace': typeof NNamespaceRouteRouteWithChildren
  '/n/$namespace/services/$service': typeof NNamespaceServicesServiceRoute
  '/n/$namespace/explorer': typeof NNamespaceExplorerIndexRoute
  '/n/$namespace/services': typeof NNamespaceServicesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/n/$namespace': typeof NNamespaceRouteRouteWithChildren
  '/n/$namespace/services/$service': typeof NNamespaceServicesServiceRoute
  '/n/$namespace/explorer': typeof NNamespaceExplorerIndexRoute
  '/n/$namespace/services': typeof NNamespaceServicesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/n/$namespace': typeof NNamespaceRouteRouteWithChildren
  '/n/$namespace/services/$service': typeof NNamespaceServicesServiceRoute
  '/n/$namespace/explorer/': typeof NNamespaceExplorerIndexRoute
  '/n/$namespace/services/': typeof NNamespaceServicesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/n/$namespace'
    | '/n/$namespace/services/$service'
    | '/n/$namespace/explorer'
    | '/n/$namespace/services'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/n/$namespace'
    | '/n/$namespace/services/$service'
    | '/n/$namespace/explorer'
    | '/n/$namespace/services'
  id:
    | '__root__'
    | '/'
    | '/n/$namespace'
    | '/n/$namespace/services/$service'
    | '/n/$namespace/explorer/'
    | '/n/$namespace/services/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NNamespaceRouteRoute: typeof NNamespaceRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NNamespaceRouteRoute: NNamespaceRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/n/$namespace"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/n/$namespace": {
      "filePath": "n/$namespace/route.tsx",
      "children": [
        "/n/$namespace/services/$service",
        "/n/$namespace/explorer/",
        "/n/$namespace/services/"
      ]
    },
    "/n/$namespace/services/$service": {
      "filePath": "n/$namespace/services/$service.tsx",
      "parent": "/n/$namespace"
    },
    "/n/$namespace/explorer/": {
      "filePath": "n/$namespace/explorer/index.tsx",
      "parent": "/n/$namespace"
    },
    "/n/$namespace/services/": {
      "filePath": "n/$namespace/services/index.tsx",
      "parent": "/n/$namespace"
    }
  }
}
ROUTE_MANIFEST_END */
