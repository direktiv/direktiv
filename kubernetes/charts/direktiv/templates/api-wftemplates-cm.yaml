apiVersion: v1
data:
  action.yml: "id: action\ndescription: A simple 'action' state that sends a get request\"\nfunctions:\n-
    id: get\n  type: reusable\n  image: vorteil/request:v6\nstates:\n- id: getter
    \n  type: action\n  action:\n    function: get\n    input: \n      method: \"GET\"\n
    \     url: \"https://jsonplaceholder.typicode.com/todos/1\"\n"
  consume-event.yml: |
    id: consume-event
    functions:
    - id: greeter
      type: reusable
      image: vorteil/greeting:v2
    description: A simple 'consumeEvent' state that listens for the greetingcloudevent generated from the template 'generate-event'.
    states:
    - id: ce
      type: consumeEvent
      event:
        type: greetingcloudevent
      timeout: PT1H
      transition: greet
    - id: greet
      type: action
      action:
        function: greeter
        input: jq(.greetingcloudevent)
      transform:
        greeting: jq(.return.greeting)
  delay.yml: |-
    id: delay
    description: A simple 'delay' state that waits for 5 seconds
    states:
    - id: delay
      type: delay
      duration: PT5S
  error.yml: "id: error\ndescription: A simple 'error' state workflow that checks
    an email attempts to validate it.\nstates:\n- id: data\n  type: noop\n  transform:
    \n    email: \"trent.hilliamvorteil.io\"\n  transition: validate-email\n- id:
    validate-email\n  type: validate\n  subject: jq(.)\n  schema:\n    type: object\n
    \   properties:\n      email:\n        type: string\n        format: email\n  catch:\n
    \ - error: direktiv.schema.*\n    transition: email-not-valid \n  transition:
    email-valid\n- id: email-not-valid\n  type: error\n  error: direktiv.schema.*\n
    \ message: \"email '.email' is not valid\"\n- id: email-valid\n  type: noop\n
    \ transform: \n    result: \"Email is valid.\"\n"
  event-and.yml: "id: event-and\nfunctions:\n- id: greeter\n  type: reusable\n  image:
    vorteil/greeting:v2\n- id: solve\n  type: reusable\n  image: vorteil/solve:v2\ndescription:
    A simple 'eventAnd' that waits for events to be received.\nstates:\n- id: event-and\n
    \ type: eventAnd\n  timeout: PT1H\n  events:\n  - type: greetingcloudevent\n  -
    type: solveexpressioncloudevent\n  transition: greet\n- id: greet\n  type: action\n
    \ action:\n    function: greeter\n    input: .greetingcloudevent\n  transform:
    \n    greeting: jq(.return.greeting)\n    ceevent: jq(.solveexpressioncloudevent)\n
    \ transition: solve\n- id: solve\n  type: action\n  action:\n    function: solve\n
    \   input: jq(.ceevent)\n  transform: \n    msggreeting: jq(.greeting)\n    solvedexpression:
    jq(.return)"
  event-xor.yml: "id: event-xor\nfunctions:\n- id: greeter\n  type: reusable\n  image:
    vorteil/greeting:v2\n- id: solve2\n  type: reusable\n  image: vorteil/solve:v2\ndescription:
    A simple 'eventXor' that waits for events to be received.\nstates:\n- id: event-xor\n
    \ type: eventXor\n  timeout: PT1H\n  events:\n  - event: \n      type: solveexpressioncloudevent\n
    \   transition: solve\n  - event: \n      type: greetingcloudevent\n    transition:
    greet\n- id: greet\n  type: action\n  action:\n    function: greeter\n    input:
    jq(.greetingcloudevent)\n  transform: \n    greeting: jq(.return.greeting)\n-
    id: solve\n  type: action\n  action:\n    function: solve2\n    input: jq(.solveexpressioncloudevent)\n
    \ transform: \n    solvedexpression: jq(.return)"
  foreach.yml: "id: foreach\ndescription: A simple 'foreach' state that solves expressions\nfunctions:
    \n- id: solve\n  type: reusable\n  image: vorteil/solve:v2\nstates:\n- id: data\n
    \ type: noop\n  transform: \n    expressions: [\"4+10\", \"15-14\", \"100*3\",\"200/2\"]
    \n  transition: solve\n- id: solve\n  type: foreach\n  array: 'jq(.expressions[]
    | { expression: . })'\n  action:\n    function: solve\n    input:\n      x: jq(.expression)\n
    \ transform:\n    solved: jq(.return)"
  generate-greeting-event.yml: "id: generate-greeting-event\ndescription: A simple
    'generateEvent' state that sends data to a greeting listener.\nstates:\n- id:
    generate\n  type: generateEvent\n  event:\n    type: greetingcloudevent\n    source:
    Direktiv\n    data: \n      name: \"Trent\""
  generate-solve-event.yml: "id: generate-solve-event\ndescription: A simple 'generateEvent'
    state that sends an expression to a solve listener.\nstates:\n- id: generate\n
    \ type: generateEvent\n  event:\n    type: solveexpressioncloudevent\n    source:
    Direktiv\n    data: \n      x: \"10+5\""
  noop.yml: |
    id: noop
    description: A simple 'no-op' state that returns 'Hello world!'
    states:
    - id: helloworld
      type: noop
      transform:
        result: "Hello world!"
  parallel.yml: "id: parallel\ndescription: A simple 'parallel' state workflow that
    runs solve container to solve expressions.\nfunctions: \n- id: solve\n  type:
    reusable\n  image: vorteil/solve:v2\nstates:\n- id: run\n  type: parallel\n  actions:\n
    \ - function: solve\n    input: \n      x: \"10*2\"\n  - function: solve\n    input:\n
    \     x: \"10%2\"\n  - function: solve\n    input:\n      x: \"10-2\"\n  - function:
    solve\n    input:\n      x: \"10+2\"\n  # Mode 'and' waits for all actions to
    be completed\n  # Mode 'or' waits for the first action to be completed\n  mode:
    and"
  switch.yml: "id: switch\ndescription: A simple 'switch' state that checks whether
    the age provided is older than 18.\nstates:\n- id: data\n  type: noop\n  transform:\n
    \   age: 27\n  transition: check\n- id: check\n  type: switch\n  conditions:\n
    \ - condition: 'jq(.age > 18)'\n    transition: olderthan18\n  defaultTransition:
    youngerthan18\n- id: olderthan18\n  type: noop\n  transform: \n    result: \"You
    are older than 18.\"\n- id: youngerthan18\n  type: noop\n  transform: \n    result:
    \"You are younger than 18.\""
  validate.yml: "id: validate\ndescription: A simple 'validate' state workflow that
    checks an email\nstates:\n- id: data\n  type: noop\n  transform:\n    email: \"trent.hilliam@vorteil.io\"\n
    \ transition: validate-email\n- id: validate-email\n  type: validate\n  subject:
    jq(.)\n  schema:\n    type: object\n    properties:\n      email:\n        type:
    string\n        format: email\n  catch:\n  - error: direktiv.schema.*\n    transition:
    email-not-valid \n  transition: email-valid\n- id: email-not-valid\n  type: noop\n
    \ transform:\n    result: \"Email is not valid.\"\n- id: email-valid\n  type:
    noop\n  transform:\n    result: \"Email is valid.\"\n"
kind: ConfigMap
metadata:
  labels:
    {{ include "direktiv.labelsAPI" . | nindent 4 }}-api
  name: api-wftemplates-cm
  namespace: {{ .Release.Namespace }}
