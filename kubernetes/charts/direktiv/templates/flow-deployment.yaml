{{- if .Values.withFlow -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "direktiv.fullname" . }}
  labels:
    {{- include "direktiv.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "direktiv.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "direktiv.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 33333
        runAsGroup: 22222
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "direktiv.serviceAccountName" . }}
      containers:
        {{- if .Values.gcp.useSqlProxy }}
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.17
          command:
            - "/cloud_sql_proxy"
            - "-instances={{- .Values.gcp.db_instance }}=tcp:5432"
            {{- if .Values.gcp.ip_private }}
            - "-ip_address_types=PRIVATE"
            {{- end }}
          securityContext:
            runAsNonRoot: true
          resources:
            requests:
              memory: "2Gi"
              cpu:    "1"
        {{- end }}
        - name: ingress
          readinessProbe:
            exec: # -tls=true  -tls-no-verify
              {{- if ne .Values.flow.certificate "none" }}
              command: ["/bin/grpc_health_probe", "-addr=127.0.0.1:6666", "-tls=true", "-tls-no-verify"]
              {{- else }}
              command: ["/bin/grpc_health_probe", "-addr=127.0.0.1:6666"]
              {{- end }}
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "8192Mi"
              cpu: "8"
          image: "{{ .Values.registry }}/{{ .Values.flow.image }}:{{ .Values.flow.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.pullPolicy }}
          command: ["/bin/direktiv", "--config", "/config/default.toml"]
          volumeMounts:
          - name: server-config
            mountPath: /config
            readOnly: true
          - name: service-template
            mountPath: /etc/config
          {{- if ne .Values.flow.certificate "none" }}
          - name: certs
            mountPath: "/etc/certs/direktiv"
            readOnly: true
          {{- end }}
          ports:
            - name: ingress
              containerPort: 6666
              protocol: TCP
            - name: flow
              containerPort: 7777
              protocol: TCP
          env:
          - name: DIREKTIV_DEBUG
            value: {{ .Values.debug | quote }}
          - name: DIREKTIV_KUBERNETES_NAMESPACE
            value: {{ .Release.Namespace }}
          - name: DIREKTIV_FLOW_INITPOD
            value: {{ .Values.flow.initPod }}
          - name: GRPC_MAX_SEND_SIZE_CLIENT
            value: {{ .Values.grpc.client.maxSendSize | quote }}
          - name: GRPC_MAX_RECEIVE_SIZE_CLIENT
            value: {{ .Values.grpc.client.maxRecvSize | quote }}
          - name: GRPC_MAX_SEND_SIZE_SERVER
            value: {{ .Values.grpc.server.maxSendSize | quote }}
          - name: GRPC_MAX_RECEIVE_SIZE_SEVER
            value: {{ .Values.grpc.server.maxRecvSize | quote }}
          {{- if or (ne .Values.http_proxy "") (ne .Values.https_proxy "") }}
          - name: "HTTP_PROXY"
            value: "{{ .Values.http_proxy }}"
          - name: "HTTPS_PROXY"
            value: "{{ .Values.https_proxy }}"
          - name: "NO_PROXY"
            value: "{{ .Values.no_proxy }}"
          {{- end }}
          - name: DIREKTIV_FLOW_EXCHANGE
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}-isolate
                key: exchangeKey
          - name: DIREKTIV_DB
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}
                key: db
          - name: DIREKTIV_WFNS
            value: {{ .Release.Namespace }}
        - name: secrets
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "1"
          image: "{{ .Values.registry }}/{{ .Values.secrets.image }}:{{ .Values.secrets.tag | default .Chart.AppVersion }}"
          command: ["/bin/secrets"]
          args: [{{.Values.secrets.backend }}]
          imagePullPolicy: {{ .Values.pullPolicy }}
          volumeMounts:
          {{- if ne  .Values.flow.certificate "none" }}
          - name: certs
            mountPath: "/etc/certs/direktiv"
            readOnly: true
          {{- end }}
          {{- if .Values.vaultAgent.enable}}
          - name: vault-agent-sink
            mountPath: "/sink"
          {{- end}}
          ports:
            - name: secrets
              containerPort: 2610
              protocol: TCP
          env:
          - name: DIREKTIV_DEBUG
            value: {{ .Values.debug | quote }}
          - name: DIREKTIV_SECRETS_BIND
            value: "127.0.0.1:2610"
          - name: GRPC_MAX_SEND_SIZE_CLIENT
            value: {{ .Values.grpc.client.maxSendSize | quote }}
          - name: GRPC_MAX_RECEIVE_SIZE_CLIENT
            value: {{ .Values.grpc.client.maxRecvSize | quote }}
          - name: GRPC_MAX_SEND_SIZE_SERVER
            value: {{ .Values.grpc.server.maxSendSize | quote }}
          - name: GRPC_MAX_RECEIVE_SIZE_SEVER
            value: {{ .Values.grpc.server.maxRecvSize | quote }}
          {{- if eq .Values.secrets.backend "db" }}
          - name: DIREKTIV_SECRETS_DB
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}
                key: secretsDb
          - name: DIREKTIV_SECRETS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}
                key: key
          {{- else if eq .Values.secrets.backend "vault" }}
          - name: DIREKTIV_SECRETS_VAULT
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}
                key: secretsVault
          - name: DIREKTIV_SECRETS_VAULT_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}
                key: secretsVaultToken
          - name: DIREKTIV_SECRETS_VAULT_TOKEN_PATH
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}
                key: secretsVaultTokenPath
          - name: DIREKTIV_SECRETS_VAULT_WATCH_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}
                key: secretsVaultWatchToken
          - name: DIREKTIV_SECRETS_VAULT_PATH
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}
                key: secretsVaultPath
          - name: DIREKTIV_SECRETS_VAULT_SKIP_VERIFY
            valueFrom:
              secretKeyRef:
                name: {{ include "direktiv.fullname" . }}
                key: secretsVaultSkipVerify
          {{- end}}
        {{- if .Values.vaultAgent.enable }}
        - name: vault-agent
          image: "{{ .Values.registry }}/{{ .Values.vaultAgent.image }}:{{ .Values.vaultAgent.tag | default .Chart.AppVersion }}"
          command: ["/bin/vault"]
          args: ["agent", "-config=/config/config.hcl"]
          imagePullPolicy: {{ .Values.pullPolicy }}
          env:
          - name: VAULT_SKIP_VERIFY
            value: "true"
          volumeMounts:
          - name: vault-agent-config
            mountPath: "/config"
            readOnly: false
          - name: vault-agent-sink
            mountPath: "/sink"
          ports:
            - name: vault-agent
              containerPort: 8100
              protocol: TCP
        {{- end}}
      volumes:
        - name: server-config
          configMap:
            name: flow-cm-config
        - name: service-template
          configMap:
            name: service-template
        {{- if .Values.vaultAgent.enable }}
        - name: vault-agent-config
          configMap:
            name: vault-agent-config
        - name: vault-agent-sink
          emptyDir: {}
        {{- end }}
        {{- if ne  .Values.flow.certificate "none" }}
        - name: certs
          secret:
            secretName: {{ .Values.flow.certificate }}
        {{- end }}
      {{- with .Values.nodeSelector }}:0

      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
