# -- enable debug across all direktiv components
debug: false

# -- knative eventing enabled, requires knative setup and configuration
eventing:
  enabled: false

# -- json or console logger
logging: json

# -- api timeouts
timeout: 900000

# -- api key, value 'apikey' required in header
apikey: ""

# used for encrpytion in the following resources: secrets
# if set to empty, one will be generated on install
encryptionKey: "01234567890123456789012345678912"

opentelemetry:
  # -- opentelemetry address where Direktiv is sending data to
  address: "localhost:4317"
  # -- installs opentelemtry agent as sidecar in flow
  enabled: false
  # -- config for sidecar agent
  agentconfig: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
    exporters:
      otlp:
        endpoint: "192.168.1.113:14250"
        insecure: true
        sending_queue:
          num_consumers: 4
          queue_size: 100
        retry_on_failure:
          enabled: true
      logging:
        loglevel: debug
    processors:
      batch:
      memory_limiter:
        # Same as --mem-ballast-size-mib CLI argument
        ballast_size_mib: 165
        # 80% of maximum memory up to 2G
        limit_mib: 400
        # 25% of limit up to 2G
        spike_limit_mib: 100
        check_interval: 5s
    extensions:
      zpages: {}
    service:
      extensions: [zpages]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [logging, otlp]

api:
  replicas: 1
  # -- Kong plugins to enable
  kongPlugins: "none"
  extraContainers: []
  # -- image for api pod
  image: "direktiv/api"
  # -- image tag for api pod
  tag: ""
  # -- extra container in api pod
  extraContainers: []
  # -- extra volume mounts in api pod
  extraVolumeMounts:
    # - name: service-template
    #   mountPath: /etc/config
  # -- extra volumes in api pod
  extraVolumes:
    # - name: service-template
    #   configMap:
    #     name: service-template

networkPolicies:
  # -- adds network policies
  enabled: false
  # -- CIDR for database, excempt from policies
  db: 0.0.0.0/0
  # -- CIDR for services, excempt from policies
  serviceCidr: 0.0.0.0/0
  # -- CIDR for pods, excempt from policies
  podCidr: 0.0.0.0/0

ingress:
  # -- host for external services, only required for TLS
  host: ""
  # -- TLS secret
  certificate: none
  # -- ingress class
  class: "kong"
  # -- timeout for /api route
  timeout: 900000

database:
  # -- database host
  host: "postgres-postgresql-ha-pgpool.postgres"
  # -- database port
  port: 5432
  # -- database user
  user: "direktiv"
  # -- database password
  password: "direktivdirektiv"
  # -- database name, auto created if it does not exist
  name: "direktiv"
  # -- sslmode for database
  sslmode: require

fluentbit:
  # -- postgres for direktiv services
  # Append extra output to fluentbit configuration.
  # There are two log types: application (system), functions (workflows)
  # these can be matched to new outputs.
  extraConfig: ""
  # extraConfig: |
  #   [OUTPUT]
  #           name stdout
  #           match application


# -- service account for flow component
serviceAccount:
  annotations: {}
  name: ""
  # example to annotate for GCP database access
  #   annotations:
  #      iam.gke.io/gcp-service-account: IAM_USER@GCP_PROJECT.iam.gserviceaccount.com


# flow config
flow:
  # -- number of flow replicas
  replicas: 1
  # -- image for flow pod
  image: "direktiv/flow"
  # -- image tag for flow pod
  tag: ""
  # -- extra container in flow pod
  extraContainers: []
  # -- extra volume mounts in flow pod
  extraVolumeMounts:
    # - name: service-template
    #   mountPath: /etc/config
  # -- extra volumes in flow pod
  extraVolumes:
    # - name: service-template
    #   configMap:
    #     name: service-template

thanos:
  # -- install Thanos
  enabled: false

nodeSelector: {}
tolerations: []
affinity: {}

registry: "docker.io"
pullPolicy: Always
imagePullSecrets: []

# -- http proxy settings
http_proxy: ""
# -- https proxy settings
https_proxy: ""
# -- no proxy proxy settings
no_proxy: ""

# -- secrets sidecar in flow pod
secrets:
  image: "direktiv/secrets"
  tag: ""
  db: ""
  extraVolumeMounts: []

# -- UI configuration
ui:
  kongPlugins: "none"
  image: "direktiv/ui"
  tag: ""
  certificate: none
  extraContainers: []

minio-operator:
  enabled: false
  tenants:
    - name: direktiv-tenant
      pools:
        # -- set to 4 for HA
        - servers: 1
          volumesPerServer: 4
          # -- storage class to use. k3s uses local-path
          storageClassName: local-path
          size: 1Gi
      secrets:
        enabled: true
        name: minio-secret
        accessKey: minio
        secretKey: minio123

prometheus:
  global:
    scrape_interval: 1m
    evaluation_interval: 1m
  server:
    retention: 96h
    persistentVolume:
      enabled: false
  alertmanager:
    enabled: false
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false
  kubeStateMetrics:
    enabled: false
  serviceAccounts:
    alertmanager:
      create: false
    nodeExporter:
      create: false
    pushgateway:
      create: false
    server:
      create: true

# direktiv-tenant-console
thanos:
  enabled: false
  global:
    storageClass: local-path
  objstoreConfig: |-
    type: s3
    config:
      bucket: thanos
      endpoint: direktiv-tenant-console.{{ .Release.Namespace }}.svc.cluster.local:9000
      access_key: minio
      secret_key: minio123
      insecure: true
  query:
    dnsDiscovery:
      sidecarsService: "{{ .Release.Namespace }}-kube-prometheus-prometheus"
      sidecarsNamespace: "{{ .Release.Namespace }}"
  bucketweb:
    enabled: true
  compactor:
    enabled: true
    persistence:
      storageClass: local-path
  storegateway:
    enabled: true
    persistence:
      storageClass: local-path
  ruler:
    enabled: false


functions:

  # -- http_proxy injected as environment variable in functions
  http_proxy: ""

  # -- https_proxy injected as environment variable in functions
  https_proxy: ""

  # -- no_proxy injected as environment variable in functions
  no_proxy: ""

  # namespace to run functions in
  namespace: direktiv-services-direktiv
  ingressClass: kong-internal

  # images for functions controller, knative sidecar and init-pod
  image: "direktiv/functions"
  tag: ""

  sidecar: "direktiv/sidecar"

  initPodImage:  "direktiv/direktiv-init-pod"

  # kong ingress knative timeout on services
  timeout: 900000

  # -- number of controller replicas
  replicaCount: 1

  # -- Egress/Ingress network limit for functions if supported by network
  netShape: "10M"

  # -- Cleaning up tasks, Kubernetes < 1.20 does not clean finished tasks
  podCleaner: true

  # -- runtime to use, e.g. gvisor on GCP
  runtime: "default"

  # -- extra containers for function controller, e.g. database containers for google cloud or logging
  extraContainersPod: []

  # -- extra volumes for tasks and knative pods
  extraVolumes:
    []
  #   - configMap:
  #   name: otel-agent-conf
  #   items:
  #     - key: otel-agent-config
  #       path: otel-agent-config.yaml
  # name: otel-agent-config-vol

  # -- extra containers for tasks and knative pods
  extraContainers:
    []
    # - name: cloud-sql-proxy
    #   image: gcr.io/cloudsql-docker/gce-proxy:1.17
    #   command:
    #     - "/cloud_sql_proxy"
    #     - "-instances=mygcpdb=tcp:5432"
    #     - "-ip_address_types=PRIVATE"
    #   securityContext:
    #     runAsNonRoot: true
    #   resources:
    #     requests:
    #       memory: "2Gi"
    #       cpu:    "1"
