# -- enable debug across all direktiv components
debug: false

database:
  # -- database host
  host: "yb-tservers.yugabyte"
  # -- database port
  port: 5433
  # -- database user
  user: "direktiv"
  # -- database password
  password: "direktivdirektiv"
  # -- database name, auto created if it does not exist
  name: "direktiv"
  # -- sslmode for database
  sslmode: require

fluentbit:
  # -- postgres for direktiv services
  # Append extra output to fluentbit configuration.
  # There are two log types: application (system), functions (workflows)
  # these can be matched to new outputs.
  extraConfig: ""
  # extraConfig: |
  #   [OUTPUT]
  #           name stdout
  #           match application


# -- service account for flow component
serviceAccount:
  annotations: {}
  name: ""
  # example to annotate for GCP database access
  #   annotations:
  #      iam.gke.io/gcp-service-account: IAM_USER@GCP_PROJECT.iam.gserviceaccount.com


# flow config
flow:
  # -- number of flow replicas
  replicas: 1
  # -- image for flow pod
  image: "vorteil/flow"
  # -- image tag for flow pod
  tag: ""
  # -- extra container in flow pod
  extraContainers: []
  # -- extra volume mounts in flow pod
  extraVolumeMounts:
    # - name: service-template
    #   mountPath: /etc/config
  # -- extra volumes in flow pod
  extraVolumes:
    # - name: service-template
    #   configMap:
    #     name: service-template


nodeSelector: {}
tolerations: []
affinity: {}

registry: "docker.io"
pullPolicy: Always
imagePullSecrets: []


  # -- proxy settings
http_proxy: ""
https_proxy: ""
no_proxy: ""



kube-prometheus:
  alertmanager:
    enabled: false
  operator:
    enabled: false
  exporters:
    node-exporter:
      enabled: false
    kube-state-metrics:
      enabled: false
    kubelet:
      enabled: false
    kubeApiServer:
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    coreDns:
      enabled: false
    kubeProxy:
      enabled: false


minio:
  enabled: false

thanos:
  enabled: true

prometheus:
  enabled: true


# Default values for direktiv.
replicaCount: 1


# autoscaling:
#   enabled: false
#   minReplicas: 1
#   maxReplicas: 10
#   targetCPUUtilizationPercentage: 80
#   targetMemoryUtilizationPercentage: 80

# support services

withUI: true
withAPI: true

supportPersist: false


networkPolicies:
  enabled: false
  # cidr for communication
  db: 0.0.0.0/0
  serviceCidr: 0.0.0.0/0
  podCidr: 0.0.0.0/0

ingress:
  host: ""
  certificate: none
  class: "kong"
  timeout: "900s"

# prometheus config
prometheus:
  enabled: true
  image: "prom/prometheus"
  targetAnnotations:
    prometheus.io/port: "2112"
    prometheus.io/path: "/metrics"
    prometheus.io/scrape: "true"
  queryAddress: "http://direktiv-prometheus-service.default:9090"



secrets:
  image: "vorteil/secrets"
  tag: ""
  db: ""
  key: "01234567890123456789012345678912"
  extraVolumeMounts: []

# ui config
ui:
  image: "vorteil/direktiv-ui"
  tag: ""
  certificate: none
  extraContainers: []

api:
  image: vorteil/api
  tag: ""
  key: ""
  certificate: none
  extraContainers: []

# Set Send and Recv limits for all grpc clients and servers
# grpc:
#   server:
#     maxSendSize: "4194304"
#     maxRecvSize: "4194304"
#   client:
#     maxSendSize: "4194304"
#     maxRecvSize: "4194304"

functions:
  # namespace to run functions in
  namespace: direktiv-services-direktiv

  # images for functions controller, knative sidecar and init-pod
  image: "vorteil/functions"
  tag: ""
  certificate: none
  mtls: none

  sidecar: "vorteil/sidecar"

  initPodImage:  "vorteil/direktiv-init-pod"
  initPodCertificate: none

  # number of controller replicas
  replicaCount: 1

  netShape: "10M"

  # database connection, required for pub/sub with flow
  db: ""

  # run pod cleaner for kubernetes < 1.20
  podCleaner: true

  # runtime to use, e.g. gvisor
  runtime: "default"

  # extra container for controller pod
  # e.g. database containers for google cloud or logging
  extraContainersPod: []
  extraContainers:
    []
    # - name: cloud-sql-proxy
    #   image: gcr.io/cloudsql-docker/gce-proxy:1.17
    #   command:
    #     - "/cloud_sql_proxy"
    #     - "-instances=mygcpdb=tcp:5432"
    #     - "-ip_address_types=PRIVATE"
    #   securityContext:
    #     runAsNonRoot: true
    #   resources:
    #     requests:
    #       memory: "2Gi"
    #       cpu:    "1"
