{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Direktiv Open API Specification\nDirektiv Documentation can be found at https://docs.direktiv.io/",
    "title": "Direktiv API",
    "contact": {
      "email": "info@direktiv.io"
    },
    "version": "1.0.0"
  },
  "host": "localhost",
  "paths": {
    "/api/functions/namespaces/{namespace}": {
      "get": {
        "description": "Gets a list of namespace knative services.\n",
        "tags": [
          "Namespace Services"
        ],
        "summary": "Get Namespace Services List",
        "operationId": "getNamespaceServiceList",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got services list"
          }
        }
      },
      "post": {
        "description": "Creates namespace scoped knative service.\nService Names are unique on a scope level.\nThese services can be used as functions in workflows, more about this can be read here:\nhttps://docs.direktiv.io/docs/walkthrough/using-functions.html\n",
        "tags": [
          "Namespace Services"
        ],
        "summary": "Create Namespace Service",
        "operationId": "createNamespaceService",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains information on new service",
            "name": "Service",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name",
                "image",
                "cmd",
                "minScale",
                "size"
              ],
              "properties": {
                "cmd": {
                  "type": "string"
                },
                "envs": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "image": {
                  "description": "Target image a service will use",
                  "type": "string"
                },
                "minScale": {
                  "description": "Minimum amount of service pods to be live",
                  "type": "integer"
                },
                "name": {
                  "description": "Name of new service",
                  "type": "string"
                },
                "size": {
                  "description": "Size of created service pods, 0 = small, 1 = medium, 2 = large",
                  "type": "integer"
                }
              },
              "example": {
                "cmd": "",
                "image": "direktiv/request:v12",
                "minScale": 1,
                "name": "fast-request",
                "size": 0
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created service"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/function/{serviceName}": {
      "get": {
        "description": "Get details of a namespace scoped knative service.\n",
        "tags": [
          "Namespace Services"
        ],
        "summary": "Get Namespace Service Details",
        "operationId": "getNamespaceService",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got service details"
          }
        }
      },
      "post": {
        "description": "Creates a new namespace scoped knative service revision.\n",
        "tags": [
          "Namespace Services"
        ],
        "summary": "Create Namespace Service Revision",
        "operationId": "updateNamespaceService",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains information on service revision",
            "name": "Service",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "image",
                "cmd",
                "minScale",
                "size"
              ],
              "properties": {
                "cmd": {
                  "type": "string"
                },
                "image": {
                  "description": "Target image a service will use",
                  "type": "string"
                },
                "minScale": {
                  "description": "Minimum amount of service pods to be live",
                  "type": "integer"
                },
                "size": {
                  "description": "Size of created service pods",
                  "type": "string",
                  "enum": [
                    "small",
                    "medium",
                    "large"
                  ]
                }
              },
              "example": {
                "cmd": "",
                "image": "direktiv/request:v10",
                "minScale": 1,
                "size": "small"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created service revision"
          }
        }
      },
      "delete": {
        "description": "Deletes namespace scoped knative service and all its revisions.\n",
        "tags": [
          "Namespace Services"
        ],
        "summary": "Delete Namespace Service",
        "operationId": "deleteNamespaceService",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted service"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/function/{serviceName}/revisions": {
      "get": {
        "description": "Watch the revision list of a namespace scoped knative service.\nNote: This is a Server-Sent-Event endpoint, and will not work with the default swagger client.\n",
        "produces": [
          "text/event-stream"
        ],
        "tags": [
          "Namespace Services"
        ],
        "summary": "Watch Namespace Service Revision List",
        "operationId": "watchNamespaceServiceRevisionList",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully watching service revisions"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/function/{serviceName}/revisions/{revisionGeneration}": {
      "get": {
        "description": "Watch a namespace scoped knative service revision.\nThe target revision generation is the number suffix on a revision.\nExample: A revision named 'namespace-direktiv-fast-request-00003' would have the revisionGeneration '00003'.\nNote: This is a Server-Sent-Event endpoint, and will not work with the default swagger client.\n",
        "produces": [
          "text/event-stream"
        ],
        "tags": [
          "Namespace Services"
        ],
        "summary": "Watch Namespace Service Revision",
        "operationId": "watchNamespaceServiceRevision",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target revision generation",
            "name": "revisionGeneration",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully watching service revision"
          }
        }
      },
      "delete": {
        "description": "Delete a namespace scoped knative service revision.\nThe target revision generation is the number suffix on a revision.\nExample: A revision named 'namespace-direktiv-fast-request-00003' would have the revisionGeneration '00003'.\n",
        "tags": [
          "Namespace Services"
        ],
        "summary": "Delete Namespace Service Revision",
        "operationId": "deleteNamespaceRevision",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target revision generation",
            "name": "revisionGeneration",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted service revision"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/function/{serviceName}/revisions/{revisionGeneration}/pods": {
      "get": {
        "description": "List a revisions pods of a namespace scoped knative service.\nThe target revision generation is the number suffix on a revision.\nExample: A revision named 'namespace-direktiv-fast-request-00003' would have the revisionGeneration '00003'.\n",
        "tags": [
          "Namespace Services"
        ],
        "summary": "Get Namespace Service Revision Pods List",
        "operationId": "listNamespaceServiceRevisionPods",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target revision generation",
            "name": "revisionGeneration",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got list of a service revision pods"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/tree/{workflow}?op=delete-service": {
      "delete": {
        "description": "Deletes workflow scoped knative service.\n",
        "tags": [
          "Workflow Services"
        ],
        "summary": "Delete Namespace Service",
        "operationId": "deleteWorkflowService",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "svn",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "target service version",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted service"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/tree/{workflow}?op=function": {
      "get": {
        "description": "Get a workflow scoped knative service details.\nNote: This is a Server-Sent-Event endpoint, and will not work with the default swagger client.\n",
        "tags": [
          "Workflow Services"
        ],
        "summary": "Get Workflow Service Details",
        "operationId": "getWorkflowService",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "svn",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "target service version",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got service details"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/tree/{workflow}?op=function-revision": {
      "get": {
        "description": "Get a workflow scoped knative service revision.\nThis will return details on a single revision.\nThe target revision generation (rev query) is the number suffix on a revision.\nExample: A revision named 'workflow-10640097968065193909-get-00001' would have the revisionGeneration '00001'.\n",
        "tags": [
          "Workflow Services"
        ],
        "summary": "Get Workflow Service Revision",
        "operationId": "getWorkflowServiceRevision",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "svn",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "target service revison",
            "name": "rev",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got service revision details"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/tree/{workflow}?op=function-revisions": {
      "get": {
        "description": "Get the revision list of a workflow scoped knative service.\n",
        "tags": [
          "Workflow Services"
        ],
        "summary": "Get Workflow Service Revision List",
        "operationId": "getWorkflowServiceRevisionList",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "svn",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "target service version",
            "name": "version",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got service revisions"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/tree/{workflow}?op=pods": {
      "get": {
        "description": "List a revisions pods of a workflow scoped knative service.\nThe target revision generation (rev query) is the number suffix on a revision.\nExample: A revision named 'workflow-10640097968065193909-get-00001' would have the revisionGeneration '00001'.\n",
        "tags": [
          "Workflow Services"
        ],
        "summary": "Get Workflow Service Revision Pods List",
        "operationId": "listWorkflowServiceRevisionPods",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target service name",
            "name": "svn",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "target service revison",
            "name": "rev",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got list of a service revision pods"
          }
        }
      }
    },
    "/api/functions/namespaces/{namespace}/tree/{workflow}?op=services": {
      "get": {
        "description": "Gets a list of workflow knative services.\n",
        "tags": [
          "Workflow Services"
        ],
        "summary": "Get Workflow Services List",
        "operationId": "listWorkflowServices",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got services list"
          }
        }
      }
    },
    "/api/functions/registries/namespaces/{namespace}": {
      "get": {
        "description": "Gets the list of namespace registries.\n",
        "tags": [
          "Registries"
        ],
        "summary": "Get List of Namespace Registries",
        "operationId": "getRegistries",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace registries"
          }
        }
      },
      "post": {
        "description": "Create a namespace container registry.\nThis can be used to connect your workflows to private container registries that require tokens.\nThe data property in the body is made up from the registry user and token. It follows the pattern :\ndata=USER:TOKEN\n",
        "tags": [
          "Registries"
        ],
        "summary": "Create a Namespace Container Registry",
        "operationId": "createRegistry",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains registry data",
            "name": "Registry Payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data",
                "reg"
              ],
              "properties": {
                "data": {
                  "description": "Target registry connection data containing the user and token.",
                  "type": "string"
                },
                "reg": {
                  "description": "Target registry URL",
                  "type": "string"
                }
              },
              "example": {
                "data": "admin:8QwFLg%D$qg*",
                "reg": "https://prod.customreg.io"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created namespace registry"
          }
        }
      },
      "delete": {
        "description": "Delete a namespace container registry\n",
        "tags": [
          "Registries"
        ],
        "summary": "Delete a Namespace Container Registry",
        "operationId": "deleteRegistry",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains registry data",
            "name": "Registry Payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "reg"
              ],
              "properties": {
                "reg": {
                  "description": "Target registry URL",
                  "type": "string"
                }
              },
              "example": {
                "data": "admin:8QwFLg%D$qg*",
                "reg": "https://prod.customreg.io"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully delete namespace registry"
          }
        }
      }
    },
    "/api/functions/registries/test": {
      "post": {
        "description": "Test a registry with provided url, username and token\n",
        "summary": "Test a registry to make sure the connection is okay",
        "operationId": "testRegistry",
        "parameters": [
          {
            "description": "Payload that contains registry data",
            "name": "Registry Payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "url",
                "username",
                "password"
              ],
              "properties": {
                "password": {
                  "description": "token to authenticate with the registry",
                  "type": "string"
                },
                "url": {
                  "description": "The url to test if the registry is valid",
                  "type": "string"
                },
                "username": {
                  "description": "username to authenticate with the registry",
                  "type": "string"
                }
              },
              "example": {
                "password": "8QwFLg%D$qg*",
                "url": "https://prod.customreg.io",
                "username": "admin"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "registry is valid"
          },
          "401": {
            "description": "unauthorized to access the registry"
          }
        }
      }
    },
    "/api/jq": {
      "post": {
        "description": "JQ Playground is a sandbox where you can test jq queries with custom data.\n",
        "tags": [
          "Other"
        ],
        "summary": "JQ Playground api to test jq queries",
        "operationId": "jqPlayground",
        "parameters": [
          {
            "description": "Payload that contains both the JSON data to manipulate and jq query.",
            "name": "JQ payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data",
                "query"
              ],
              "properties": {
                "data": {
                  "description": "JSON data encoded in base64",
                  "type": "string"
                },
                "query": {
                  "description": "jq query to manipulate JSON data",
                  "type": "string"
                }
              },
              "example": {
                "data": "eyJhIjogMSwgImIiOiAyLCAiYyI6IDQsICJkIjogN30=",
                "query": "map(select(. \u003e= 2))"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "jq query was successful"
          },
          "400": {
            "description": "the request was invalid"
          },
          "500": {
            "description": "an unexpected internal error occurred"
          }
        }
      }
    },
    "/api/logs": {
      "get": {
        "description": "Gets Direktiv Server Logs.\n",
        "tags": [
          "Logs"
        ],
        "summary": "Get Direktiv Server Logs",
        "operationId": "serverLogs",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PageOrderField",
            "description": "field to order by",
            "name": "order.field",
            "in": "query"
          },
          {
            "enum": [
              "DESC",
              " ASC"
            ],
            "type": "string",
            "x-go-name": "PageOrderDirection",
            "description": "order direction",
            "name": "order.direction",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterField",
            "description": "field to filter",
            "name": "filter.field",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterType",
            "description": "filter behaviour",
            "name": "filter.type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got server logs",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/logs/{pod}": {
      "get": {
        "description": "Watches logs of the pods for a service. This can be a namespace service or a workflow service.\n",
        "tags": [
          "Pod"
        ],
        "summary": "Watch Pod Logs",
        "operationId": "podLogs",
        "parameters": [
          {
            "type": "string",
            "description": "pod name",
            "name": "pod",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully watching pod logs"
          }
        }
      }
    },
    "/api/namespaces": {
      "get": {
        "description": "Gets the list of namespaces.\n",
        "tags": [
          "Namespaces"
        ],
        "summary": "Gets the list of namespaces",
        "operationId": "getNamespaces",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PageOrderField",
            "description": "field to order by",
            "name": "order.field",
            "in": "query"
          },
          {
            "enum": [
              "DESC",
              " ASC"
            ],
            "type": "string",
            "x-go-name": "PageOrderDirection",
            "description": "order direction",
            "name": "order.direction",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterField",
            "description": "field to filter",
            "name": "filter.field",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterType",
            "description": "filter behaviour",
            "name": "filter.type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got list of namespaces"
          }
        }
      }
    },
    "/api/namespaces/overwrite/{namespace}/secrets/{secret}": {
      "put": {
        "description": "Overwrite a namespace secret.\n",
        "consumes": [
          "text/plain"
        ],
        "tags": [
          "Secrets"
        ],
        "summary": "Overwrite a Namespace Secret",
        "operationId": "overwriteSecret",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target secret",
            "name": "secret",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains secret data.",
            "name": "Secret Payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7F8E7B0124ACB2BD20B383DE0756C7C0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "namespace has been successfully overwritten",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "secret not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/search/{namespace}/secrets/{name}": {
      "get": {
        "description": "secrets and folders which including given name.\n",
        "tags": [
          "Secrets"
        ],
        "summary": "Get List of Namespace nodes contains name",
        "operationId": "searchSecret",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace nodes",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}": {
      "put": {
        "description": "Creates a new namespace.\n",
        "tags": [
          "Namespaces"
        ],
        "summary": "Creates a namespace",
        "operationId": "createNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace to create",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace has been successfully created",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a namespace.\nA namespace will not delete by default if it has any child resources (workflows, etc...).\nDeleting the namespace with all its children can be done using the `recursive` query parameter.\n",
        "tags": [
          "Namespaces"
        ],
        "summary": "Delete a namespace",
        "operationId": "deleteNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace to delete",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "recursively deletes all child resources",
            "name": "recursive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "namespace has been successfully deleted",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/broadcast": {
      "post": {
        "description": "Broadcast a cloud event to a namespace.\nCloud events posted to this api will be picked up by any workflows listening to the same event type on the namescape.\nThe body of this request should follow the cloud event core specification defined at https://github.com/cloudevents/spec .\n",
        "tags": [
          "Other"
        ],
        "summary": "Broadcast Cloud Event",
        "operationId": "broadcastCloudevent",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "Cloud Event request to be sent.",
            "name": "cloudevent",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully sent cloud event"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/config": {
      "get": {
        "description": "Gets a namespace config.\n",
        "tags": [
          "Namespaces"
        ],
        "summary": "Gets a namespace config",
        "operationId": "getNamespaceConfig",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace to update",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace config"
          }
        }
      },
      "patch": {
        "description": "Sets a namespace config.\n",
        "tags": [
          "Namespaces"
        ],
        "summary": "Sets a namespace config",
        "operationId": "setNamespaceConfig",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace to update",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains the config information to set. Note: This payload only need to contain the properities you wish to set.",
            "name": "Config Payload",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "broadcast": {
                  "description": "Configuration on which direktiv operations will trigger coud events on the namespace",
                  "type": "object"
                }
              },
              "example": {
                "broadcast": {
                  "directory.create": false,
                  "directory.delete": false,
                  "instance.failed": false,
                  "instance.started": false,
                  "instance.success": false,
                  "instance.variable.create": false,
                  "instance.variable.delete": false,
                  "instance.variable.update": false,
                  "namespace.variable.create": false,
                  "namespace.variable.delete": false,
                  "namespace.variable.update": false,
                  "workflow.create": false,
                  "workflow.delete": false,
                  "workflow.update": false,
                  "workflow.variable.create": false,
                  "workflow.variable.delete": false,
                  "workflow.variable.update": false
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "namespace config has been successfully been updated"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/event-listeners": {
      "get": {
        "description": "Get current event listeners.\n",
        "tags": [
          "Events"
        ],
        "summary": "Get current event listeners.",
        "operationId": "getEventListeners",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got event listeners"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/events": {
      "get": {
        "description": "Get recent events history.\n",
        "tags": [
          "Events"
        ],
        "summary": "Get events history.",
        "operationId": "getEventHistory",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got events history"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/events/{event}/replay": {
      "post": {
        "description": "Replay a cloud event to a namespace.\n",
        "tags": [
          "Other"
        ],
        "summary": "Replay Cloud Event",
        "operationId": "replayCloudevent",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target cloudevent",
            "name": "event",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully replayed cloud event"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/instances": {
      "get": {
        "description": "Gets a list of instances in a namespace.\n",
        "tags": [
          "Instances"
        ],
        "summary": "Get List Instances",
        "operationId": "getInstanceList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PageOrderField",
            "description": "field to order by",
            "name": "order.field",
            "in": "query"
          },
          {
            "enum": [
              "DESC",
              " ASC"
            ],
            "type": "string",
            "x-go-name": "PageOrderDirection",
            "description": "order direction",
            "name": "order.direction",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterField",
            "description": "field to filter",
            "name": "filter.field",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterType",
            "description": "filter behaviour",
            "name": "filter.type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace instances"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/instances/{instance}": {
      "get": {
        "description": "Gets the details of a executed workflow instance in this namespace.\n",
        "tags": [
          "Instances"
        ],
        "summary": "Get a Instance",
        "operationId": "getInstance",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance",
            "name": "instance",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got instance",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/instances/{instance}/cancel": {
      "post": {
        "description": "Cancel a currently pending instance.\n",
        "tags": [
          "Instances"
        ],
        "summary": "Cancel a Pending Instance",
        "operationId": "cancelInstance",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance",
            "name": "instance",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully cancelled instance"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/instances/{instance}/input": {
      "get": {
        "description": "Gets the input an instance was provided when executed.\n",
        "tags": [
          "Instances"
        ],
        "summary": "Get a Instance Input",
        "operationId": "getInstanceInput",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance",
            "name": "instance",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got instance input"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/instances/{instance}/logs": {
      "get": {
        "description": "Gets the logs of an executed instance.\n",
        "tags": [
          "Logs"
        ],
        "summary": "Gets Instance Logs",
        "operationId": "instanceLogs",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PageOrderField",
            "description": "field to order by",
            "name": "order.field",
            "in": "query"
          },
          {
            "enum": [
              "DESC",
              " ASC"
            ],
            "type": "string",
            "x-go-name": "PageOrderDirection",
            "description": "order direction",
            "name": "order.direction",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterField",
            "description": "field to filter",
            "name": "filter.field",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterType",
            "description": "filter behaviour",
            "name": "filter.type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance id",
            "name": "instance",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got instance logs",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/instances/{instance}/metadata": {
      "get": {
        "description": "Gets the metadata of an instance.\n",
        "tags": [
          "Instances"
        ],
        "summary": "Get a Instance Metadata",
        "operationId": "getInstanceMetadata",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance",
            "name": "instance",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got instance metadata"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/instances/{instance}/output": {
      "get": {
        "description": "Gets the output an instance was provided when executed.\n",
        "tags": [
          "Instances"
        ],
        "summary": "Get a Instance Output",
        "operationId": "getInstanceOutput",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance",
            "name": "instance",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got instance output"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/instances/{instance}/vars": {
      "get": {
        "description": "Gets a list of variables in a instance.\n",
        "tags": [
          "Variables"
        ],
        "summary": "Get List of Instance Variable",
        "operationId": "getInstanceVariables",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance",
            "name": "instance",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got instance variables"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/instances/{instance}/vars/{variable}": {
      "get": {
        "description": "Get the value sorted in a instance variable.\n",
        "tags": [
          "Variables"
        ],
        "summary": "Get a Instance Variable",
        "operationId": "getInstanceVariable",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target variable",
            "name": "variable",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance",
            "name": "instance",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got instance variable"
          }
        }
      },
      "put": {
        "description": "Set the value sorted in a instance variable.\nIf the target variable does not exists, it will be created.\nVariable data can be anything.\n",
        "consumes": [
          "text/plain"
        ],
        "tags": [
          "Variables"
        ],
        "summary": "Set a Instance Variable",
        "operationId": "setInstanceVariable",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target variable",
            "name": "variable",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance",
            "name": "instance",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains variable data.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Data to Store"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully set instance variable"
          }
        }
      },
      "delete": {
        "description": "Delete a instance variable.\n",
        "tags": [
          "Variables"
        ],
        "summary": "Delete a Instance Variable",
        "operationId": "deleteInstanceVariable",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target variable",
            "name": "variable",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target instance",
            "name": "instance",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted instance variable"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/logs": {
      "get": {
        "description": "Gets Namespace Level Logs.\n",
        "tags": [
          "Logs"
        ],
        "summary": "Gets Namespace Level Logs",
        "operationId": "namespaceLogs",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "PageOrderField",
            "description": "field to order by",
            "name": "order.field",
            "in": "query"
          },
          {
            "enum": [
              "DESC",
              " ASC"
            ],
            "type": "string",
            "x-go-name": "PageOrderDirection",
            "description": "order direction",
            "name": "order.direction",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterField",
            "description": "field to filter",
            "name": "filter.field",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterType",
            "description": "filter behaviour",
            "name": "filter.type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace logs"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/metrics/failed": {
      "get": {
        "description": "Get metrics of failed workflows in the targeted namespace.\n",
        "tags": [
          "Metrics"
        ],
        "summary": "Gets Namespace Failed Workflow Instances Metrics",
        "operationId": "namespaceMetricsFailed",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace metrics"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/metrics/invoked": {
      "get": {
        "description": "Get metrics of invoked workflows in the targeted namespace.\n",
        "tags": [
          "Metrics"
        ],
        "summary": "Gets Namespace Invoked Workflow Metrics",
        "operationId": "namespaceMetricsInvoked",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace metrics"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/metrics/milliseconds": {
      "get": {
        "description": "Get timing metrics of workflows in the targeted namespace.\n",
        "tags": [
          "Metrics"
        ],
        "summary": "Gets Namespace Workflow Timing Metrics",
        "operationId": "namespaceMetricsMilliseconds",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace metrics"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/metrics/successful": {
      "get": {
        "description": "Get metrics of successful workflows in the targeted namespace.\n",
        "tags": [
          "Metrics"
        ],
        "summary": "Gets Namespace Successful Workflow Instances Metrics",
        "operationId": "namespaceMetricsSuccessful",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace metrics"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/secrets": {
      "get": {
        "description": "Gets the list of namespace secrets.\n",
        "tags": [
          "Secrets"
        ],
        "summary": "Get List of Namespace Secrets",
        "operationId": "getSecrets",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace nodes",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/secrets/{folder}/": {
      "get": {
        "description": "Gets the list of namespace secrets and folders inside specific folder.\n",
        "tags": [
          "Secrets"
        ],
        "summary": "Get List of Namespace nodes inside Folder",
        "operationId": "getSecretsInsideFolder",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target folder path",
            "name": "folder",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace nodes inside sepcific folder",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Create a namespace folder.\n",
        "tags": [
          "Secrets"
        ],
        "summary": "Create a Namespace Folder",
        "operationId": "createFolder",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target secret",
            "name": "folder",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace folder has been successfully created",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a namespace folder.\n",
        "tags": [
          "Secrets"
        ],
        "summary": "Delete a Namespace Folder",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target folder",
            "name": "folder",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace folder has been successfully deleted",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "folder not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/secrets/{secret}": {
      "put": {
        "description": "Create a namespace secret.\n",
        "consumes": [
          "text/plain"
        ],
        "tags": [
          "Secrets"
        ],
        "summary": "Create a Namespace Secret",
        "operationId": "createSecret",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target secret",
            "name": "secret",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains secret data.",
            "name": "Secret Payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7F8E7B0124ACB2BD20B383DE0756C7C0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "namespace secret has been successfully created",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a namespace secret.\n",
        "tags": [
          "Secrets"
        ],
        "summary": "Delete a Namespace Secret",
        "operationId": "deleteSecret",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target secret",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace secret has been successfully deleted",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "secret not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{directory}?op=create-directory": {
      "put": {
        "description": "Creates a directory at the target path.\n",
        "tags": [
          "Directory"
        ],
        "summary": "Create a Directory",
        "operationId": "createDirectory",
        "parameters": [
          {
            "type": "string",
            "default": "create-directory",
            "description": "the operation for the api",
            "name": "op",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target directory",
            "name": "directory",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "directory has been created",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{nodePath}": {
      "get": {
        "description": "Gets Workflow and Directory Nodes at nodePath.\n",
        "tags": [
          "Node"
        ],
        "summary": "Get List of Namespace Nodes",
        "operationId": "getNodes",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target path in tree",
            "name": "nodePath",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace nodes",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{node}?op=delete-node": {
      "delete": {
        "description": "Creates a directory at the target path.\n",
        "tags": [
          "Node"
        ],
        "summary": "Delete a node",
        "operationId": "deleteNode",
        "parameters": [
          {
            "type": "string",
            "default": "delete-node",
            "description": "the operation for the api",
            "name": "op",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target node",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "whether to recursively delete child nodes",
            "name": "recursive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "node has been deleted",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=create-workflow": {
      "put": {
        "description": "Creates a workflow at the target path.\nThe body of this request should contain the workflow yaml.\n",
        "consumes": [
          "text/plain"
        ],
        "tags": [
          "Workflows"
        ],
        "summary": "Create a Workflow",
        "operationId": "createWorkflow",
        "parameters": [
          {
            "type": "string",
            "default": "create-workflow",
            "description": "the operation for the api",
            "name": "op",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains the direktiv workflow yaml to create.",
            "name": "workflow data",
            "in": "body",
            "schema": {
              "type": "string",
              "example": "description: A simple no-op state that returns Hello world!\nstates:\n- id: helloworld\n  type: noop\n  transform:\n    result: Hello world!\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created workflow",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=delete-var": {
      "delete": {
        "description": "Delete a workflow variable.\n",
        "tags": [
          "Variables"
        ],
        "summary": "Delete a Workflow Variable",
        "operationId": "deleteWorkflowVariable",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target variable",
            "name": "var",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted workflow variable"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=execute": {
      "post": {
        "description": "Executes a workflow with optionally some input provided in the request body as json.\n",
        "tags": [
          "Workflows"
        ],
        "summary": "Execute a Workflow",
        "operationId": "executeWorkflow",
        "parameters": [
          {
            "type": "string",
            "default": "execute",
            "description": "the operation for the api",
            "name": "op",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "description": "The input of this workflow instance",
            "name": "Workflow Input",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "animals": [
                  "dog",
                  "cat",
                  "snake"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "node has been deleted",
            "schema": {
              "$ref": "#/definitions/OkBody"
            }
          },
          "default": {
            "description": "an error has occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=logs": {
      "get": {
        "description": "Get workflow level logs.\n",
        "tags": [
          "Logs"
        ],
        "summary": "Get Workflow Level Logs",
        "operationId": "getWorkflowLogs",
        "parameters": [
          {
            "enum": [
              "CREATED",
              "UPDATED"
            ],
            "type": "string",
            "x-go-name": "PageOrderField",
            "description": "field to order by",
            "name": "order.field",
            "in": "query"
          },
          {
            "enum": [
              "DESC",
              " ASC"
            ],
            "type": "string",
            "x-go-name": "PageOrderDirection",
            "description": "order direction",
            "name": "order.direction",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterField",
            "description": "field to filter",
            "name": "filter.field",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PageFilterType",
            "description": "filter behaviour",
            "name": "filter.type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got workflow logs"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=metrics-failed": {
      "get": {
        "description": "Get the timing metrics of a workflow's instance.\nThis returns a total sum of the milliseconds a workflow has been executed for.\n",
        "tags": [
          "Metrics"
        ],
        "summary": "Gets Workflow Time Metrics",
        "operationId": "workflowMetricsMilliseconds",
        "parameters": [
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got workflow metrics"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=metrics-invoked": {
      "get": {
        "description": "Get metrics of invoked workflow instances.\n",
        "tags": [
          "Metrics"
        ],
        "summary": "Gets Invoked Workflow Metrics",
        "operationId": "workflowMetricsInvoked",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got workflow metrics"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=metrics-sankey": {
      "get": {
        "description": "Get Sankey metrics of a workflow revision.\nIf ref query is not provided, metrics for the latest revision\nwill be retrieved.\n",
        "tags": [
          "Metrics"
        ],
        "summary": "Get Sankey metrics of a workflow revision.",
        "operationId": "workflowMetricsSankey",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target workflow revision reference",
            "name": "ref",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got workflow metrics"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=metrics-state-milliseconds": {
      "get": {
        "description": "Get the state timing metrics of a workflow's instance.\nThis returns the timing of individual states in a workflow.\n",
        "tags": [
          "Metrics"
        ],
        "summary": "Gets a Workflow State Time Metrics",
        "operationId": "workflowMetricsStateMilliseconds",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got workflow metrics"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=metrics-successful": {
      "get": {
        "description": "Get metrics of a workflow, where the instance was successful.\n",
        "tags": [
          "Metrics"
        ],
        "summary": "Gets Successful Workflow Metrics",
        "operationId": "workflowMetricsSuccessful",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got workflow metrics"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=set-var": {
      "put": {
        "description": "Set the value sorted in a workflow variable.\nIf the target variable does not exists, it will be created.\nVariable data can be anything.\n",
        "consumes": [
          "text/plain"
        ],
        "tags": [
          "Variables"
        ],
        "summary": "Set a Workflow Variable",
        "operationId": "setWorkflowVariable",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target variable",
            "name": "var",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains variable data.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Data to Store"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully set workflow variable"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=set-workflow-event-logging": {
      "post": {
        "description": "Set Cloud Event for Workflow to Log to.\nWhen configured type `direktiv.instanceLog` cloud events will be generated with the `logger` parameter set to the configured value.\nWorkflows can be configured to generate cloud events on their namespace anything the log parameter produces data.\nPlease find more information on this topic here:\nhttps://docs.direktiv.io/docs/examples/logging.html\n",
        "tags": [
          "Workflows"
        ],
        "summary": "Set Cloud Event for Workflow to Log to",
        "operationId": "setWorkflowCloudEventLogs",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "description": "Cloud event logger to target",
            "name": "Cloud Event Logger",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "logger"
              ],
              "properties": {
                "logger": {
                  "description": "Target Cloud Event",
                  "type": "string"
                }
              },
              "example": {
                "logger": "mylog"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully update workflow"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=toggle": {
      "post": {
        "description": "Toggle's whether or not a workflow is active.\nDisabled workflows cannot be invoked. This includes start event and scheduled workflows.\n",
        "tags": [
          "Workflows"
        ],
        "summary": "Set Cloud Event for Workflow to Log to",
        "operationId": "toggleWorkflow",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "description": "Whether or not the workflow is alive or disabled",
            "name": "Workflow Live Status",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "live"
              ],
              "properties": {
                "live": {
                  "description": "Workflow live status",
                  "type": "boolean"
                }
              },
              "example": {
                "live": false
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated workflow live status"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=update-workflow": {
      "post": {
        "description": "Updates a workflow at the target path.\nThe body of this request should contain the workflow yaml you want to update to.\n",
        "consumes": [
          "text/plain"
        ],
        "tags": [
          "Workflows"
        ],
        "summary": "Update a Workflow",
        "operationId": "updateWorkflow",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains the updated direktiv workflow yaml.",
            "name": "workflow data",
            "in": "body",
            "schema": {
              "type": "string",
              "example": "description: A simple no-op state that returns Hello world Updated !!!\nstates:\n- id: helloworld\n  type: noop\n  transform:\n    result: Hello world Updated !!!\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated workflow"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=var": {
      "get": {
        "description": "Get the value sorted in a workflow variable.\n",
        "tags": [
          "Variables"
        ],
        "summary": "Get a Workflow Variable",
        "operationId": "getWorkflowVariable",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target variable",
            "name": "var",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got workflow variable"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=vars": {
      "get": {
        "description": "Gets a list of variables in a workflow.\n",
        "tags": [
          "Variables"
        ],
        "summary": "Get List of Workflow Variables",
        "operationId": "getWorkflowVariables",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got workflow variables"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/tree/{workflow}?op=wait": {
      "get": {
        "description": "Executes a workflow. This path will wait until the workflow execution has completed and return the instance output.\nNOTE: Input can also be provided with the `input.X` query parameters; Where `X` is the json key.\nOnly top level json keys are supported when providing input with query parameters.\n",
        "tags": [
          "Workflows"
        ],
        "summary": "Await Execute a Workflow",
        "operationId": "awaitExecuteWorkflow",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Manually set the Content-Type response header instead of auto-detected. This doesn't change the body of the response in any way.",
            "name": "ctype",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If provided, instead of returning the entire output json the response body will contain the single top-level json field",
            "name": "field",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If set to true, will return an empty output as null, encoded base64 data as decoded binary data, and quoted json strings as a escaped string.",
            "name": "raw-output",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully executed workflow"
          }
        }
      },
      "post": {
        "description": "Executes a workflow with optionally some input provided in the request body as json.\nThis path will wait until the workflow execution has completed and return the instance output.\nNOTE: Input can also be provided with the `input.X` query parameters; Where `X` is the json key.\nOnly top level json keys are supported when providing input with query parameters.\nInput query parameters are only read if the request has no body.\n",
        "tags": [
          "Workflows"
        ],
        "summary": "Await Execute a Workflow With Body",
        "operationId": "awaitExecuteWorkflowBody",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to target workflow",
            "name": "workflow",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Manually set the Content-Type response header instead of auto-detected. This doesn't change the body of the response in any way.",
            "name": "ctype",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If provided, instead of returning the entire output json the response body will contain the single top-level json field",
            "name": "field",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If set to true, will return an empty output as null, encoded base64 data as decoded binary data, and quoted json strings as a escaped string.",
            "name": "raw-output",
            "in": "query"
          },
          {
            "description": "The input of this workflow instance",
            "name": "Workflow Input",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "animals": [
                  "dog",
                  "cat",
                  "snake"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully executed workflow"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/vars": {
      "get": {
        "description": "Gets a list of variables in a namespace.\n",
        "tags": [
          "Variables"
        ],
        "summary": "Get Namespace Variable List",
        "operationId": "getNamespaceVariables",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace variables"
          }
        }
      }
    },
    "/api/namespaces/{namespace}/vars/{variable}": {
      "get": {
        "description": "Get the value sorted in a namespace variable.\n",
        "tags": [
          "Variables"
        ],
        "summary": "Get a Namespace Variable",
        "operationId": "getNamespaceVariable",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target variable",
            "name": "variable",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully got namespace variable"
          }
        }
      },
      "put": {
        "description": "Set the value sorted in a namespace variable.\nIf the target variable does not exists, it will be created.\nVariable data can be anything.\n",
        "consumes": [
          "text/plain"
        ],
        "tags": [
          "Variables"
        ],
        "summary": "Set a Namespace Variable",
        "operationId": "setNamespaceVariable",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target variable",
            "name": "variable",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload that contains variable data.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Data to Store"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully set namespace variable"
          }
        }
      },
      "delete": {
        "description": "Delete a namespace variable.\n",
        "tags": [
          "Variables"
        ],
        "summary": "Delete a Namespace Variable",
        "operationId": "deleteNamespaceVariable",
        "parameters": [
          {
            "type": "string",
            "description": "target namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "target variable",
            "name": "variable",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted namespace variable"
          }
        }
      }
    },
    "/api/version": {
      "get": {
        "description": "Returns version information for servers in the cluster.\n",
        "tags": [
          "Other"
        ],
        "summary": "Returns version information for servers in the cluster.",
        "operationId": "version",
        "responses": {
          "200": {
            "description": "version query was successful"
          }
        }
      }
    }
  },
  "definitions": {
    "CreateNamespaceServiceBody": {
      "description": "CreateNamespaceServiceBody create namespace service body\nExample: {\"cmd\":\"\",\"image\":\"direktiv/request:v12\",\"minScale\":\"1\",\"name\":\"fast-request\",\"size\":\"small\"}",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/client/namespace_services"
    },
    "CreateRegistryBody": {
      "description": "CreateRegistryBody create registry body\nExample: {\"data\":\"admin:8QwFLg%D$qg*\",\"reg\":\"https://prod.customreg.io\"}",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/client/registries"
    },
    "DeleteRegistryBody": {
      "description": "DeleteRegistryBody delete registry body\nExample: {\"data\":\"admin:8QwFLg%D$qg*\",\"reg\":\"https://prod.customreg.io\"}",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/client/registries"
    },
    "ErrorResponse": {
      "description": "ErrorResponse error response",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/models"
    },
    "JqPlaygroundBody": {
      "description": "JqPlaygroundBody jq playground body\nExample: {\"data\":\"eyJhIjogMSwgImIiOiAyLCAiYyI6IDQsICJkIjogN30=\",\"query\":\"map(select(. \\u003e= 2))\"}",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/client/other"
    },
    "OkBody": {
      "description": "OkBody is an arbitrary placeholder response that represents an ok response body",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api"
    },
    "SetNamespaceConfigBody": {
      "description": "SetNamespaceConfigBody set namespace config body\nExample: {\"broadcast\":{\"directory.create\":false,\"directory.delete\":false,\"instance.failed\":false,\"instance.started\":false,\"instance.success\":false,\"instance.variable.create\":false,\"instance.variable.delete\":false,\"instance.variable.update\":false,\"namespace.variable.create\":false,\"namespace.variable.delete\":false,\"namespace.variable.update\":false,\"workflow.create\":false,\"workflow.delete\":false,\"workflow.update\":false,\"workflow.variable.create\":false,\"workflow.variable.delete\":false,\"workflow.variable.update\":false}}",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/client/namespaces"
    },
    "SetWorkflowCloudEventLogsBody": {
      "description": "SetWorkflowCloudEventLogsBody set workflow cloud event logs body\nExample: {\"logger\":\"mylog\"}",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/client/workflows"
    },
    "TestRegistryBody": {
      "description": "TestRegistryBody test registry body\nExample: {\"token\":\"8QwFLg%D$qg*\",\"url\":\"https://prod.customreg.io\",\"username\":\"admin\"}",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/client/operations"
    },
    "ToggleWorkflowBody": {
      "description": "ToggleWorkflowBody toggle workflow body\nExample: {\"live\":false}",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/client/workflows"
    },
    "UpdateNamespaceServiceBody": {
      "description": "UpdateNamespaceServiceBody update namespace service body\nExample: {\"cmd\":\"\",\"image\":\"direktiv/request:v10\",\"minScale\":\"1\",\"size\":\"small\"}",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/client/namespace_services"
    },
    "UpdateServiceRequest": {
      "description": "UpdateServiceRequest UpdateServiceRequest update service request",
      "x-go-name": "updateServiceRequest",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api"
    },
    "updateServiceRequest": {
      "description": "UpdateServiceRequest UpdateServiceRequest UpdateServiceRequest update service request",
      "x-go-name": "UpdateServiceRequest",
      "x-go-package": "github.com/direktiv/direktiv/pkg/api/models"
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "KEY",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ]
}