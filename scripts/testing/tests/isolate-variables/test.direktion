workflow test

// Isolated function
const request = isolate(image: "localhost:5000/isolate-requester:test")

const validate-vars = isolate(
    image: "localhost:5000/isolate-validate:test",
    "file":  file(key: "instance-var", scope: "instance", type: "plain"),
    "file":  file(key: "workflow-var", scope: "workflow", type: "plain"),
    "file":  file(key: "namespace-var", scope: "namespace", type: "plain"),
    "file":  file(key: "fact", scope: "workflow", type: "plain"),
    )

// Section 1: Testing variable states
log("Person 1: Hmm I really need a interesting number fact for this conference")

get(scope: "namespace", key: "api")

call-function:
    call(request, {
        method: "GET",
        url: "jq(.var.api.numberFacts)",
    })

transform(jq('. += {fact: .return.body.text}'))

log("Person 2: Did you know, jq(.fact)")

log("Person 1: Wow thats so interesting, I'm gonna save that for later")

set(scope: "workflow", key: "fact", value: "jq(.fact)")

sleep(duration: "PT5S")

get(scope: "workflow", key: "fact")

log("------ 1 Week Later At Conference ------")

if jq('.fact != .var.fact') {
    error("variable.ValueMismatch", "local 'fact' value and workflow varaible 'fact' did not match")
    exit
}

log("Person 1: Did you know jq(.var.fact)")

log("---- Laughter and applause. The End ----")


// Section 2: Testing isolated variables
validate:
    // Validate from inside container that workflow 'fact' variable from previous section has been set.
    // Set instance-var, workflow-var and namespace-var inside isolated container. The base64 of 'fact' is added to the end of
    // these variables to make these variables unqiue every test run.
    call(validate-vars, {
            "validate": [
                {key: "fact", value: "\"jq(.var.fact)\""},
            ],
            "set": [
                {key: "instance-var", scope: "instance", value: "Hello I am a instance variable. Fact b64=jq(.var.fact | @base64)"},
                {key: "workflow-var", scope: "workflow", value: "Hello I am a workflow variable. Fact b64=jq(.var.fact | @base64)"},
                {key: "namespace-var", scope: "namespace", value: "Hello I am a namespace variable. Fact b64=jq(.var.fact | @base64)"},
            ],
        })

    // Validate instance-var, workflow-var and namespace-var variables from inside isolated container
    call(validate-vars, {
            "validate": [
                {key: "instance-var", value: "Hello I am a instance variable. Fact b64=jq(.var.fact | @base64)"},
                {key: "workflow-var", value: "Hello I am a workflow variable. Fact b64=jq(.var.fact | @base64)"},
                {key: "namespace-var", value: "Hello I am a namespace variable. Fact b64=jq(.var.fact | @base64)"},
            ],
        })
