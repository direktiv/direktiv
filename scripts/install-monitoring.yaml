apiVersion: v1
kind: ConfigMap
metadata:
  name: direktiv-grafana-datasources
data:
  ds.yaml: |-
    {
        "apiVersion": 1,
        "datasources": [
            {
              "uid":"tempo",
              "name": "Tempo",
              "type": "tempo",
              "url": "http://tempo.default.svc.cluster.local:3100"
            },
            {
              "uid":"loki",
              "name": "Loki",
              "type": "loki",
              "url": "http://loki.default.svc.cluster.local:3100"
            },
            {
              "uid":"prometheus",
              "name": "Prometheus",
              "type": "prometheus",
              "url": "http://direktiv-prometheus-server.direktiv.svc.cluster.local"
            }
        ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
spec:
  selector:
    matchLabels:
      app: loki
  replicas: 1
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - name: loki
        image: grafana/loki
        ports:
        - containerPort: 3100
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: loki
spec:
  ports:
    - port: 3100
      protocol: TCP
  selector:
    app: loki
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:9.1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
              - mountPath: /etc/grafana/provisioning/datasources
                name: direktiv-grafana-datasources
                readOnly: false
      volumes:
        - name: direktiv-grafana-datasources
          configMap:
              defaultMode: 420
              name: direktiv-grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: LoadBalancer
---
