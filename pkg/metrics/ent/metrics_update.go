// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/metrics/ent/metrics"
	"github.com/direktiv/direktiv/pkg/metrics/ent/predicate"
)

// MetricsUpdate is the builder for updating Metrics entities.
type MetricsUpdate struct {
	config
	hooks     []Hook
	mutation  *MetricsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MetricsUpdate builder.
func (mu *MetricsUpdate) Where(ps ...predicate.Metrics) *MetricsUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetNamespace sets the "namespace" field.
func (mu *MetricsUpdate) SetNamespace(s string) *MetricsUpdate {
	mu.mutation.SetNamespace(s)
	return mu
}

// SetWorkflow sets the "workflow" field.
func (mu *MetricsUpdate) SetWorkflow(s string) *MetricsUpdate {
	mu.mutation.SetWorkflow(s)
	return mu
}

// SetRevision sets the "revision" field.
func (mu *MetricsUpdate) SetRevision(s string) *MetricsUpdate {
	mu.mutation.SetRevision(s)
	return mu
}

// SetInstance sets the "instance" field.
func (mu *MetricsUpdate) SetInstance(s string) *MetricsUpdate {
	mu.mutation.SetInstance(s)
	return mu
}

// SetState sets the "state" field.
func (mu *MetricsUpdate) SetState(s string) *MetricsUpdate {
	mu.mutation.SetState(s)
	return mu
}

// SetTimestamp sets the "timestamp" field.
func (mu *MetricsUpdate) SetTimestamp(t time.Time) *MetricsUpdate {
	mu.mutation.SetTimestamp(t)
	return mu
}

// SetWorkflowMs sets the "workflow_ms" field.
func (mu *MetricsUpdate) SetWorkflowMs(i int64) *MetricsUpdate {
	mu.mutation.ResetWorkflowMs()
	mu.mutation.SetWorkflowMs(i)
	return mu
}

// AddWorkflowMs adds i to the "workflow_ms" field.
func (mu *MetricsUpdate) AddWorkflowMs(i int64) *MetricsUpdate {
	mu.mutation.AddWorkflowMs(i)
	return mu
}

// SetIsolateMs sets the "isolate_ms" field.
func (mu *MetricsUpdate) SetIsolateMs(i int64) *MetricsUpdate {
	mu.mutation.ResetIsolateMs()
	mu.mutation.SetIsolateMs(i)
	return mu
}

// AddIsolateMs adds i to the "isolate_ms" field.
func (mu *MetricsUpdate) AddIsolateMs(i int64) *MetricsUpdate {
	mu.mutation.AddIsolateMs(i)
	return mu
}

// SetErrorCode sets the "error_code" field.
func (mu *MetricsUpdate) SetErrorCode(s string) *MetricsUpdate {
	mu.mutation.SetErrorCode(s)
	return mu
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (mu *MetricsUpdate) SetNillableErrorCode(s *string) *MetricsUpdate {
	if s != nil {
		mu.SetErrorCode(*s)
	}
	return mu
}

// ClearErrorCode clears the value of the "error_code" field.
func (mu *MetricsUpdate) ClearErrorCode() *MetricsUpdate {
	mu.mutation.ClearErrorCode()
	return mu
}

// SetInvoker sets the "invoker" field.
func (mu *MetricsUpdate) SetInvoker(s string) *MetricsUpdate {
	mu.mutation.SetInvoker(s)
	return mu
}

// SetNext sets the "next" field.
func (mu *MetricsUpdate) SetNext(i int8) *MetricsUpdate {
	mu.mutation.ResetNext()
	mu.mutation.SetNext(i)
	return mu
}

// AddNext adds i to the "next" field.
func (mu *MetricsUpdate) AddNext(i int8) *MetricsUpdate {
	mu.mutation.AddNext(i)
	return mu
}

// SetTransition sets the "transition" field.
func (mu *MetricsUpdate) SetTransition(s string) *MetricsUpdate {
	mu.mutation.SetTransition(s)
	return mu
}

// SetNillableTransition sets the "transition" field if the given value is not nil.
func (mu *MetricsUpdate) SetNillableTransition(s *string) *MetricsUpdate {
	if s != nil {
		mu.SetTransition(*s)
	}
	return mu
}

// ClearTransition clears the value of the "transition" field.
func (mu *MetricsUpdate) ClearTransition() *MetricsUpdate {
	mu.mutation.ClearTransition()
	return mu
}

// Mutation returns the MetricsMutation object of the builder.
func (mu *MetricsUpdate) Mutation() *MetricsMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MetricsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetricsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetricsUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetricsUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetricsUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MetricsUpdate) check() error {
	if v, ok := mu.mutation.Namespace(); ok {
		if err := metrics.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "Metrics.namespace": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Workflow(); ok {
		if err := metrics.WorkflowValidator(v); err != nil {
			return &ValidationError{Name: "workflow", err: fmt.Errorf(`ent: validator failed for field "Metrics.workflow": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Instance(); ok {
		if err := metrics.InstanceValidator(v); err != nil {
			return &ValidationError{Name: "instance", err: fmt.Errorf(`ent: validator failed for field "Metrics.instance": %w`, err)}
		}
	}
	if v, ok := mu.mutation.State(); ok {
		if err := metrics.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Metrics.state": %w`, err)}
		}
	}
	if v, ok := mu.mutation.WorkflowMs(); ok {
		if err := metrics.WorkflowMsValidator(v); err != nil {
			return &ValidationError{Name: "workflow_ms", err: fmt.Errorf(`ent: validator failed for field "Metrics.workflow_ms": %w`, err)}
		}
	}
	if v, ok := mu.mutation.IsolateMs(); ok {
		if err := metrics.IsolateMsValidator(v); err != nil {
			return &ValidationError{Name: "isolate_ms", err: fmt.Errorf(`ent: validator failed for field "Metrics.isolate_ms": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Next(); ok {
		if err := metrics.NextValidator(v); err != nil {
			return &ValidationError{Name: "next", err: fmt.Errorf(`ent: validator failed for field "Metrics.next": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MetricsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MetricsUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MetricsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metrics.Table,
			Columns: metrics.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metrics.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Namespace(); ok {
		_spec.SetField(metrics.FieldNamespace, field.TypeString, value)
	}
	if value, ok := mu.mutation.Workflow(); ok {
		_spec.SetField(metrics.FieldWorkflow, field.TypeString, value)
	}
	if value, ok := mu.mutation.Revision(); ok {
		_spec.SetField(metrics.FieldRevision, field.TypeString, value)
	}
	if value, ok := mu.mutation.Instance(); ok {
		_spec.SetField(metrics.FieldInstance, field.TypeString, value)
	}
	if value, ok := mu.mutation.State(); ok {
		_spec.SetField(metrics.FieldState, field.TypeString, value)
	}
	if value, ok := mu.mutation.Timestamp(); ok {
		_spec.SetField(metrics.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := mu.mutation.WorkflowMs(); ok {
		_spec.SetField(metrics.FieldWorkflowMs, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedWorkflowMs(); ok {
		_spec.AddField(metrics.FieldWorkflowMs, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.IsolateMs(); ok {
		_spec.SetField(metrics.FieldIsolateMs, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedIsolateMs(); ok {
		_spec.AddField(metrics.FieldIsolateMs, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.ErrorCode(); ok {
		_spec.SetField(metrics.FieldErrorCode, field.TypeString, value)
	}
	if mu.mutation.ErrorCodeCleared() {
		_spec.ClearField(metrics.FieldErrorCode, field.TypeString)
	}
	if value, ok := mu.mutation.Invoker(); ok {
		_spec.SetField(metrics.FieldInvoker, field.TypeString, value)
	}
	if value, ok := mu.mutation.Next(); ok {
		_spec.SetField(metrics.FieldNext, field.TypeInt8, value)
	}
	if value, ok := mu.mutation.AddedNext(); ok {
		_spec.AddField(metrics.FieldNext, field.TypeInt8, value)
	}
	if value, ok := mu.mutation.Transition(); ok {
		_spec.SetField(metrics.FieldTransition, field.TypeString, value)
	}
	if mu.mutation.TransitionCleared() {
		_spec.ClearField(metrics.FieldTransition, field.TypeString)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MetricsUpdateOne is the builder for updating a single Metrics entity.
type MetricsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MetricsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetNamespace sets the "namespace" field.
func (muo *MetricsUpdateOne) SetNamespace(s string) *MetricsUpdateOne {
	muo.mutation.SetNamespace(s)
	return muo
}

// SetWorkflow sets the "workflow" field.
func (muo *MetricsUpdateOne) SetWorkflow(s string) *MetricsUpdateOne {
	muo.mutation.SetWorkflow(s)
	return muo
}

// SetRevision sets the "revision" field.
func (muo *MetricsUpdateOne) SetRevision(s string) *MetricsUpdateOne {
	muo.mutation.SetRevision(s)
	return muo
}

// SetInstance sets the "instance" field.
func (muo *MetricsUpdateOne) SetInstance(s string) *MetricsUpdateOne {
	muo.mutation.SetInstance(s)
	return muo
}

// SetState sets the "state" field.
func (muo *MetricsUpdateOne) SetState(s string) *MetricsUpdateOne {
	muo.mutation.SetState(s)
	return muo
}

// SetTimestamp sets the "timestamp" field.
func (muo *MetricsUpdateOne) SetTimestamp(t time.Time) *MetricsUpdateOne {
	muo.mutation.SetTimestamp(t)
	return muo
}

// SetWorkflowMs sets the "workflow_ms" field.
func (muo *MetricsUpdateOne) SetWorkflowMs(i int64) *MetricsUpdateOne {
	muo.mutation.ResetWorkflowMs()
	muo.mutation.SetWorkflowMs(i)
	return muo
}

// AddWorkflowMs adds i to the "workflow_ms" field.
func (muo *MetricsUpdateOne) AddWorkflowMs(i int64) *MetricsUpdateOne {
	muo.mutation.AddWorkflowMs(i)
	return muo
}

// SetIsolateMs sets the "isolate_ms" field.
func (muo *MetricsUpdateOne) SetIsolateMs(i int64) *MetricsUpdateOne {
	muo.mutation.ResetIsolateMs()
	muo.mutation.SetIsolateMs(i)
	return muo
}

// AddIsolateMs adds i to the "isolate_ms" field.
func (muo *MetricsUpdateOne) AddIsolateMs(i int64) *MetricsUpdateOne {
	muo.mutation.AddIsolateMs(i)
	return muo
}

// SetErrorCode sets the "error_code" field.
func (muo *MetricsUpdateOne) SetErrorCode(s string) *MetricsUpdateOne {
	muo.mutation.SetErrorCode(s)
	return muo
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (muo *MetricsUpdateOne) SetNillableErrorCode(s *string) *MetricsUpdateOne {
	if s != nil {
		muo.SetErrorCode(*s)
	}
	return muo
}

// ClearErrorCode clears the value of the "error_code" field.
func (muo *MetricsUpdateOne) ClearErrorCode() *MetricsUpdateOne {
	muo.mutation.ClearErrorCode()
	return muo
}

// SetInvoker sets the "invoker" field.
func (muo *MetricsUpdateOne) SetInvoker(s string) *MetricsUpdateOne {
	muo.mutation.SetInvoker(s)
	return muo
}

// SetNext sets the "next" field.
func (muo *MetricsUpdateOne) SetNext(i int8) *MetricsUpdateOne {
	muo.mutation.ResetNext()
	muo.mutation.SetNext(i)
	return muo
}

// AddNext adds i to the "next" field.
func (muo *MetricsUpdateOne) AddNext(i int8) *MetricsUpdateOne {
	muo.mutation.AddNext(i)
	return muo
}

// SetTransition sets the "transition" field.
func (muo *MetricsUpdateOne) SetTransition(s string) *MetricsUpdateOne {
	muo.mutation.SetTransition(s)
	return muo
}

// SetNillableTransition sets the "transition" field if the given value is not nil.
func (muo *MetricsUpdateOne) SetNillableTransition(s *string) *MetricsUpdateOne {
	if s != nil {
		muo.SetTransition(*s)
	}
	return muo
}

// ClearTransition clears the value of the "transition" field.
func (muo *MetricsUpdateOne) ClearTransition() *MetricsUpdateOne {
	muo.mutation.ClearTransition()
	return muo
}

// Mutation returns the MetricsMutation object of the builder.
func (muo *MetricsUpdateOne) Mutation() *MetricsMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MetricsUpdateOne) Select(field string, fields ...string) *MetricsUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Metrics entity.
func (muo *MetricsUpdateOne) Save(ctx context.Context) (*Metrics, error) {
	var (
		err  error
		node *Metrics
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetricsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Metrics)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MetricsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetricsUpdateOne) SaveX(ctx context.Context) *Metrics {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MetricsUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetricsUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MetricsUpdateOne) check() error {
	if v, ok := muo.mutation.Namespace(); ok {
		if err := metrics.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "Metrics.namespace": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Workflow(); ok {
		if err := metrics.WorkflowValidator(v); err != nil {
			return &ValidationError{Name: "workflow", err: fmt.Errorf(`ent: validator failed for field "Metrics.workflow": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Instance(); ok {
		if err := metrics.InstanceValidator(v); err != nil {
			return &ValidationError{Name: "instance", err: fmt.Errorf(`ent: validator failed for field "Metrics.instance": %w`, err)}
		}
	}
	if v, ok := muo.mutation.State(); ok {
		if err := metrics.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Metrics.state": %w`, err)}
		}
	}
	if v, ok := muo.mutation.WorkflowMs(); ok {
		if err := metrics.WorkflowMsValidator(v); err != nil {
			return &ValidationError{Name: "workflow_ms", err: fmt.Errorf(`ent: validator failed for field "Metrics.workflow_ms": %w`, err)}
		}
	}
	if v, ok := muo.mutation.IsolateMs(); ok {
		if err := metrics.IsolateMsValidator(v); err != nil {
			return &ValidationError{Name: "isolate_ms", err: fmt.Errorf(`ent: validator failed for field "Metrics.isolate_ms": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Next(); ok {
		if err := metrics.NextValidator(v); err != nil {
			return &ValidationError{Name: "next", err: fmt.Errorf(`ent: validator failed for field "Metrics.next": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MetricsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MetricsUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MetricsUpdateOne) sqlSave(ctx context.Context) (_node *Metrics, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metrics.Table,
			Columns: metrics.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metrics.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Metrics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metrics.FieldID)
		for _, f := range fields {
			if !metrics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Namespace(); ok {
		_spec.SetField(metrics.FieldNamespace, field.TypeString, value)
	}
	if value, ok := muo.mutation.Workflow(); ok {
		_spec.SetField(metrics.FieldWorkflow, field.TypeString, value)
	}
	if value, ok := muo.mutation.Revision(); ok {
		_spec.SetField(metrics.FieldRevision, field.TypeString, value)
	}
	if value, ok := muo.mutation.Instance(); ok {
		_spec.SetField(metrics.FieldInstance, field.TypeString, value)
	}
	if value, ok := muo.mutation.State(); ok {
		_spec.SetField(metrics.FieldState, field.TypeString, value)
	}
	if value, ok := muo.mutation.Timestamp(); ok {
		_spec.SetField(metrics.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := muo.mutation.WorkflowMs(); ok {
		_spec.SetField(metrics.FieldWorkflowMs, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedWorkflowMs(); ok {
		_spec.AddField(metrics.FieldWorkflowMs, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.IsolateMs(); ok {
		_spec.SetField(metrics.FieldIsolateMs, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedIsolateMs(); ok {
		_spec.AddField(metrics.FieldIsolateMs, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.ErrorCode(); ok {
		_spec.SetField(metrics.FieldErrorCode, field.TypeString, value)
	}
	if muo.mutation.ErrorCodeCleared() {
		_spec.ClearField(metrics.FieldErrorCode, field.TypeString)
	}
	if value, ok := muo.mutation.Invoker(); ok {
		_spec.SetField(metrics.FieldInvoker, field.TypeString, value)
	}
	if value, ok := muo.mutation.Next(); ok {
		_spec.SetField(metrics.FieldNext, field.TypeInt8, value)
	}
	if value, ok := muo.mutation.AddedNext(); ok {
		_spec.AddField(metrics.FieldNext, field.TypeInt8, value)
	}
	if value, ok := muo.mutation.Transition(); ok {
		_spec.SetField(metrics.FieldTransition, field.TypeString, value)
	}
	if muo.mutation.TransitionCleared() {
		_spec.ClearField(metrics.FieldTransition, field.TypeString)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Metrics{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
