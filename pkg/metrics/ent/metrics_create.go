// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/metrics/ent/metrics"
)

// MetricsCreate is the builder for creating a Metrics entity.
type MetricsCreate struct {
	config
	mutation *MetricsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (mc *MetricsCreate) SetNamespace(s string) *MetricsCreate {
	mc.mutation.SetNamespace(s)
	return mc
}

// SetWorkflow sets the "workflow" field.
func (mc *MetricsCreate) SetWorkflow(s string) *MetricsCreate {
	mc.mutation.SetWorkflow(s)
	return mc
}

// SetRevision sets the "revision" field.
func (mc *MetricsCreate) SetRevision(s string) *MetricsCreate {
	mc.mutation.SetRevision(s)
	return mc
}

// SetInstance sets the "instance" field.
func (mc *MetricsCreate) SetInstance(s string) *MetricsCreate {
	mc.mutation.SetInstance(s)
	return mc
}

// SetState sets the "state" field.
func (mc *MetricsCreate) SetState(s string) *MetricsCreate {
	mc.mutation.SetState(s)
	return mc
}

// SetTimestamp sets the "timestamp" field.
func (mc *MetricsCreate) SetTimestamp(t time.Time) *MetricsCreate {
	mc.mutation.SetTimestamp(t)
	return mc
}

// SetWorkflowMs sets the "workflow_ms" field.
func (mc *MetricsCreate) SetWorkflowMs(i int64) *MetricsCreate {
	mc.mutation.SetWorkflowMs(i)
	return mc
}

// SetIsolateMs sets the "isolate_ms" field.
func (mc *MetricsCreate) SetIsolateMs(i int64) *MetricsCreate {
	mc.mutation.SetIsolateMs(i)
	return mc
}

// SetErrorCode sets the "error_code" field.
func (mc *MetricsCreate) SetErrorCode(s string) *MetricsCreate {
	mc.mutation.SetErrorCode(s)
	return mc
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (mc *MetricsCreate) SetNillableErrorCode(s *string) *MetricsCreate {
	if s != nil {
		mc.SetErrorCode(*s)
	}
	return mc
}

// SetInvoker sets the "invoker" field.
func (mc *MetricsCreate) SetInvoker(s string) *MetricsCreate {
	mc.mutation.SetInvoker(s)
	return mc
}

// SetNext sets the "next" field.
func (mc *MetricsCreate) SetNext(i int8) *MetricsCreate {
	mc.mutation.SetNext(i)
	return mc
}

// SetTransition sets the "transition" field.
func (mc *MetricsCreate) SetTransition(s string) *MetricsCreate {
	mc.mutation.SetTransition(s)
	return mc
}

// SetNillableTransition sets the "transition" field if the given value is not nil.
func (mc *MetricsCreate) SetNillableTransition(s *string) *MetricsCreate {
	if s != nil {
		mc.SetTransition(*s)
	}
	return mc
}

// Mutation returns the MetricsMutation object of the builder.
func (mc *MetricsCreate) Mutation() *MetricsMutation {
	return mc.mutation
}

// Save creates the Metrics in the database.
func (mc *MetricsCreate) Save(ctx context.Context) (*Metrics, error) {
	var (
		err  error
		node *Metrics
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetricsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Metrics)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MetricsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MetricsCreate) SaveX(ctx context.Context) *Metrics {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MetricsCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MetricsCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MetricsCreate) check() error {
	if _, ok := mc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "Metrics.namespace"`)}
	}
	if v, ok := mc.mutation.Namespace(); ok {
		if err := metrics.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "Metrics.namespace": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Workflow(); !ok {
		return &ValidationError{Name: "workflow", err: errors.New(`ent: missing required field "Metrics.workflow"`)}
	}
	if v, ok := mc.mutation.Workflow(); ok {
		if err := metrics.WorkflowValidator(v); err != nil {
			return &ValidationError{Name: "workflow", err: fmt.Errorf(`ent: validator failed for field "Metrics.workflow": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Revision(); !ok {
		return &ValidationError{Name: "revision", err: errors.New(`ent: missing required field "Metrics.revision"`)}
	}
	if _, ok := mc.mutation.Instance(); !ok {
		return &ValidationError{Name: "instance", err: errors.New(`ent: missing required field "Metrics.instance"`)}
	}
	if v, ok := mc.mutation.Instance(); ok {
		if err := metrics.InstanceValidator(v); err != nil {
			return &ValidationError{Name: "instance", err: fmt.Errorf(`ent: validator failed for field "Metrics.instance": %w`, err)}
		}
	}
	if _, ok := mc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Metrics.state"`)}
	}
	if v, ok := mc.mutation.State(); ok {
		if err := metrics.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Metrics.state": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Metrics.timestamp"`)}
	}
	if _, ok := mc.mutation.WorkflowMs(); !ok {
		return &ValidationError{Name: "workflow_ms", err: errors.New(`ent: missing required field "Metrics.workflow_ms"`)}
	}
	if v, ok := mc.mutation.WorkflowMs(); ok {
		if err := metrics.WorkflowMsValidator(v); err != nil {
			return &ValidationError{Name: "workflow_ms", err: fmt.Errorf(`ent: validator failed for field "Metrics.workflow_ms": %w`, err)}
		}
	}
	if _, ok := mc.mutation.IsolateMs(); !ok {
		return &ValidationError{Name: "isolate_ms", err: errors.New(`ent: missing required field "Metrics.isolate_ms"`)}
	}
	if v, ok := mc.mutation.IsolateMs(); ok {
		if err := metrics.IsolateMsValidator(v); err != nil {
			return &ValidationError{Name: "isolate_ms", err: fmt.Errorf(`ent: validator failed for field "Metrics.isolate_ms": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Invoker(); !ok {
		return &ValidationError{Name: "invoker", err: errors.New(`ent: missing required field "Metrics.invoker"`)}
	}
	if _, ok := mc.mutation.Next(); !ok {
		return &ValidationError{Name: "next", err: errors.New(`ent: missing required field "Metrics.next"`)}
	}
	if v, ok := mc.mutation.Next(); ok {
		if err := metrics.NextValidator(v); err != nil {
			return &ValidationError{Name: "next", err: fmt.Errorf(`ent: validator failed for field "Metrics.next": %w`, err)}
		}
	}
	return nil
}

func (mc *MetricsCreate) sqlSave(ctx context.Context) (*Metrics, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MetricsCreate) createSpec() (*Metrics, *sqlgraph.CreateSpec) {
	var (
		_node = &Metrics{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: metrics.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metrics.FieldID,
			},
		}
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.Namespace(); ok {
		_spec.SetField(metrics.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := mc.mutation.Workflow(); ok {
		_spec.SetField(metrics.FieldWorkflow, field.TypeString, value)
		_node.Workflow = value
	}
	if value, ok := mc.mutation.Revision(); ok {
		_spec.SetField(metrics.FieldRevision, field.TypeString, value)
		_node.Revision = value
	}
	if value, ok := mc.mutation.Instance(); ok {
		_spec.SetField(metrics.FieldInstance, field.TypeString, value)
		_node.Instance = value
	}
	if value, ok := mc.mutation.State(); ok {
		_spec.SetField(metrics.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := mc.mutation.Timestamp(); ok {
		_spec.SetField(metrics.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := mc.mutation.WorkflowMs(); ok {
		_spec.SetField(metrics.FieldWorkflowMs, field.TypeInt64, value)
		_node.WorkflowMs = value
	}
	if value, ok := mc.mutation.IsolateMs(); ok {
		_spec.SetField(metrics.FieldIsolateMs, field.TypeInt64, value)
		_node.IsolateMs = value
	}
	if value, ok := mc.mutation.ErrorCode(); ok {
		_spec.SetField(metrics.FieldErrorCode, field.TypeString, value)
		_node.ErrorCode = value
	}
	if value, ok := mc.mutation.Invoker(); ok {
		_spec.SetField(metrics.FieldInvoker, field.TypeString, value)
		_node.Invoker = value
	}
	if value, ok := mc.mutation.Next(); ok {
		_spec.SetField(metrics.FieldNext, field.TypeInt8, value)
		_node.Next = value
	}
	if value, ok := mc.mutation.Transition(); ok {
		_spec.SetField(metrics.FieldTransition, field.TypeString, value)
		_node.Transition = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Metrics.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetricsUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (mc *MetricsCreate) OnConflict(opts ...sql.ConflictOption) *MetricsUpsertOne {
	mc.conflict = opts
	return &MetricsUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Metrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MetricsCreate) OnConflictColumns(columns ...string) *MetricsUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MetricsUpsertOne{
		create: mc,
	}
}

type (
	// MetricsUpsertOne is the builder for "upsert"-ing
	//  one Metrics node.
	MetricsUpsertOne struct {
		create *MetricsCreate
	}

	// MetricsUpsert is the "OnConflict" setter.
	MetricsUpsert struct {
		*sql.UpdateSet
	}
)

// SetNamespace sets the "namespace" field.
func (u *MetricsUpsert) SetNamespace(v string) *MetricsUpsert {
	u.Set(metrics.FieldNamespace, v)
	return u
}

// UpdateNamespace sets the "namespace" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateNamespace() *MetricsUpsert {
	u.SetExcluded(metrics.FieldNamespace)
	return u
}

// SetWorkflow sets the "workflow" field.
func (u *MetricsUpsert) SetWorkflow(v string) *MetricsUpsert {
	u.Set(metrics.FieldWorkflow, v)
	return u
}

// UpdateWorkflow sets the "workflow" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateWorkflow() *MetricsUpsert {
	u.SetExcluded(metrics.FieldWorkflow)
	return u
}

// SetRevision sets the "revision" field.
func (u *MetricsUpsert) SetRevision(v string) *MetricsUpsert {
	u.Set(metrics.FieldRevision, v)
	return u
}

// UpdateRevision sets the "revision" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateRevision() *MetricsUpsert {
	u.SetExcluded(metrics.FieldRevision)
	return u
}

// SetInstance sets the "instance" field.
func (u *MetricsUpsert) SetInstance(v string) *MetricsUpsert {
	u.Set(metrics.FieldInstance, v)
	return u
}

// UpdateInstance sets the "instance" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateInstance() *MetricsUpsert {
	u.SetExcluded(metrics.FieldInstance)
	return u
}

// SetState sets the "state" field.
func (u *MetricsUpsert) SetState(v string) *MetricsUpsert {
	u.Set(metrics.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateState() *MetricsUpsert {
	u.SetExcluded(metrics.FieldState)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *MetricsUpsert) SetTimestamp(v time.Time) *MetricsUpsert {
	u.Set(metrics.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateTimestamp() *MetricsUpsert {
	u.SetExcluded(metrics.FieldTimestamp)
	return u
}

// SetWorkflowMs sets the "workflow_ms" field.
func (u *MetricsUpsert) SetWorkflowMs(v int64) *MetricsUpsert {
	u.Set(metrics.FieldWorkflowMs, v)
	return u
}

// UpdateWorkflowMs sets the "workflow_ms" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateWorkflowMs() *MetricsUpsert {
	u.SetExcluded(metrics.FieldWorkflowMs)
	return u
}

// AddWorkflowMs adds v to the "workflow_ms" field.
func (u *MetricsUpsert) AddWorkflowMs(v int64) *MetricsUpsert {
	u.Add(metrics.FieldWorkflowMs, v)
	return u
}

// SetIsolateMs sets the "isolate_ms" field.
func (u *MetricsUpsert) SetIsolateMs(v int64) *MetricsUpsert {
	u.Set(metrics.FieldIsolateMs, v)
	return u
}

// UpdateIsolateMs sets the "isolate_ms" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateIsolateMs() *MetricsUpsert {
	u.SetExcluded(metrics.FieldIsolateMs)
	return u
}

// AddIsolateMs adds v to the "isolate_ms" field.
func (u *MetricsUpsert) AddIsolateMs(v int64) *MetricsUpsert {
	u.Add(metrics.FieldIsolateMs, v)
	return u
}

// SetErrorCode sets the "error_code" field.
func (u *MetricsUpsert) SetErrorCode(v string) *MetricsUpsert {
	u.Set(metrics.FieldErrorCode, v)
	return u
}

// UpdateErrorCode sets the "error_code" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateErrorCode() *MetricsUpsert {
	u.SetExcluded(metrics.FieldErrorCode)
	return u
}

// ClearErrorCode clears the value of the "error_code" field.
func (u *MetricsUpsert) ClearErrorCode() *MetricsUpsert {
	u.SetNull(metrics.FieldErrorCode)
	return u
}

// SetInvoker sets the "invoker" field.
func (u *MetricsUpsert) SetInvoker(v string) *MetricsUpsert {
	u.Set(metrics.FieldInvoker, v)
	return u
}

// UpdateInvoker sets the "invoker" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateInvoker() *MetricsUpsert {
	u.SetExcluded(metrics.FieldInvoker)
	return u
}

// SetNext sets the "next" field.
func (u *MetricsUpsert) SetNext(v int8) *MetricsUpsert {
	u.Set(metrics.FieldNext, v)
	return u
}

// UpdateNext sets the "next" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateNext() *MetricsUpsert {
	u.SetExcluded(metrics.FieldNext)
	return u
}

// AddNext adds v to the "next" field.
func (u *MetricsUpsert) AddNext(v int8) *MetricsUpsert {
	u.Add(metrics.FieldNext, v)
	return u
}

// SetTransition sets the "transition" field.
func (u *MetricsUpsert) SetTransition(v string) *MetricsUpsert {
	u.Set(metrics.FieldTransition, v)
	return u
}

// UpdateTransition sets the "transition" field to the value that was provided on create.
func (u *MetricsUpsert) UpdateTransition() *MetricsUpsert {
	u.SetExcluded(metrics.FieldTransition)
	return u
}

// ClearTransition clears the value of the "transition" field.
func (u *MetricsUpsert) ClearTransition() *MetricsUpsert {
	u.SetNull(metrics.FieldTransition)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Metrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MetricsUpsertOne) UpdateNewValues() *MetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Metrics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MetricsUpsertOne) Ignore() *MetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetricsUpsertOne) DoNothing() *MetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetricsCreate.OnConflict
// documentation for more info.
func (u *MetricsUpsertOne) Update(set func(*MetricsUpsert)) *MetricsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetNamespace sets the "namespace" field.
func (u *MetricsUpsertOne) SetNamespace(v string) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetNamespace(v)
	})
}

// UpdateNamespace sets the "namespace" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateNamespace() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateNamespace()
	})
}

// SetWorkflow sets the "workflow" field.
func (u *MetricsUpsertOne) SetWorkflow(v string) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetWorkflow(v)
	})
}

// UpdateWorkflow sets the "workflow" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateWorkflow() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateWorkflow()
	})
}

// SetRevision sets the "revision" field.
func (u *MetricsUpsertOne) SetRevision(v string) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetRevision(v)
	})
}

// UpdateRevision sets the "revision" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateRevision() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateRevision()
	})
}

// SetInstance sets the "instance" field.
func (u *MetricsUpsertOne) SetInstance(v string) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetInstance(v)
	})
}

// UpdateInstance sets the "instance" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateInstance() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateInstance()
	})
}

// SetState sets the "state" field.
func (u *MetricsUpsertOne) SetState(v string) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateState() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateState()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *MetricsUpsertOne) SetTimestamp(v time.Time) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateTimestamp() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateTimestamp()
	})
}

// SetWorkflowMs sets the "workflow_ms" field.
func (u *MetricsUpsertOne) SetWorkflowMs(v int64) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetWorkflowMs(v)
	})
}

// AddWorkflowMs adds v to the "workflow_ms" field.
func (u *MetricsUpsertOne) AddWorkflowMs(v int64) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.AddWorkflowMs(v)
	})
}

// UpdateWorkflowMs sets the "workflow_ms" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateWorkflowMs() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateWorkflowMs()
	})
}

// SetIsolateMs sets the "isolate_ms" field.
func (u *MetricsUpsertOne) SetIsolateMs(v int64) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetIsolateMs(v)
	})
}

// AddIsolateMs adds v to the "isolate_ms" field.
func (u *MetricsUpsertOne) AddIsolateMs(v int64) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.AddIsolateMs(v)
	})
}

// UpdateIsolateMs sets the "isolate_ms" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateIsolateMs() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateIsolateMs()
	})
}

// SetErrorCode sets the "error_code" field.
func (u *MetricsUpsertOne) SetErrorCode(v string) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetErrorCode(v)
	})
}

// UpdateErrorCode sets the "error_code" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateErrorCode() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateErrorCode()
	})
}

// ClearErrorCode clears the value of the "error_code" field.
func (u *MetricsUpsertOne) ClearErrorCode() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.ClearErrorCode()
	})
}

// SetInvoker sets the "invoker" field.
func (u *MetricsUpsertOne) SetInvoker(v string) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetInvoker(v)
	})
}

// UpdateInvoker sets the "invoker" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateInvoker() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateInvoker()
	})
}

// SetNext sets the "next" field.
func (u *MetricsUpsertOne) SetNext(v int8) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetNext(v)
	})
}

// AddNext adds v to the "next" field.
func (u *MetricsUpsertOne) AddNext(v int8) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.AddNext(v)
	})
}

// UpdateNext sets the "next" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateNext() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateNext()
	})
}

// SetTransition sets the "transition" field.
func (u *MetricsUpsertOne) SetTransition(v string) *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.SetTransition(v)
	})
}

// UpdateTransition sets the "transition" field to the value that was provided on create.
func (u *MetricsUpsertOne) UpdateTransition() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateTransition()
	})
}

// ClearTransition clears the value of the "transition" field.
func (u *MetricsUpsertOne) ClearTransition() *MetricsUpsertOne {
	return u.Update(func(s *MetricsUpsert) {
		s.ClearTransition()
	})
}

// Exec executes the query.
func (u *MetricsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetricsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetricsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MetricsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MetricsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MetricsCreateBulk is the builder for creating many Metrics entities in bulk.
type MetricsCreateBulk struct {
	config
	builders []*MetricsCreate
	conflict []sql.ConflictOption
}

// Save creates the Metrics entities in the database.
func (mcb *MetricsCreateBulk) Save(ctx context.Context) ([]*Metrics, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Metrics, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MetricsCreateBulk) SaveX(ctx context.Context) []*Metrics {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MetricsCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Metrics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MetricsUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (mcb *MetricsCreateBulk) OnConflict(opts ...sql.ConflictOption) *MetricsUpsertBulk {
	mcb.conflict = opts
	return &MetricsUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Metrics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MetricsCreateBulk) OnConflictColumns(columns ...string) *MetricsUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MetricsUpsertBulk{
		create: mcb,
	}
}

// MetricsUpsertBulk is the builder for "upsert"-ing
// a bulk of Metrics nodes.
type MetricsUpsertBulk struct {
	create *MetricsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Metrics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MetricsUpsertBulk) UpdateNewValues() *MetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Metrics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MetricsUpsertBulk) Ignore() *MetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MetricsUpsertBulk) DoNothing() *MetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MetricsCreateBulk.OnConflict
// documentation for more info.
func (u *MetricsUpsertBulk) Update(set func(*MetricsUpsert)) *MetricsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MetricsUpsert{UpdateSet: update})
	}))
	return u
}

// SetNamespace sets the "namespace" field.
func (u *MetricsUpsertBulk) SetNamespace(v string) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetNamespace(v)
	})
}

// UpdateNamespace sets the "namespace" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateNamespace() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateNamespace()
	})
}

// SetWorkflow sets the "workflow" field.
func (u *MetricsUpsertBulk) SetWorkflow(v string) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetWorkflow(v)
	})
}

// UpdateWorkflow sets the "workflow" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateWorkflow() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateWorkflow()
	})
}

// SetRevision sets the "revision" field.
func (u *MetricsUpsertBulk) SetRevision(v string) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetRevision(v)
	})
}

// UpdateRevision sets the "revision" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateRevision() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateRevision()
	})
}

// SetInstance sets the "instance" field.
func (u *MetricsUpsertBulk) SetInstance(v string) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetInstance(v)
	})
}

// UpdateInstance sets the "instance" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateInstance() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateInstance()
	})
}

// SetState sets the "state" field.
func (u *MetricsUpsertBulk) SetState(v string) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateState() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateState()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *MetricsUpsertBulk) SetTimestamp(v time.Time) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateTimestamp() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateTimestamp()
	})
}

// SetWorkflowMs sets the "workflow_ms" field.
func (u *MetricsUpsertBulk) SetWorkflowMs(v int64) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetWorkflowMs(v)
	})
}

// AddWorkflowMs adds v to the "workflow_ms" field.
func (u *MetricsUpsertBulk) AddWorkflowMs(v int64) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.AddWorkflowMs(v)
	})
}

// UpdateWorkflowMs sets the "workflow_ms" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateWorkflowMs() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateWorkflowMs()
	})
}

// SetIsolateMs sets the "isolate_ms" field.
func (u *MetricsUpsertBulk) SetIsolateMs(v int64) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetIsolateMs(v)
	})
}

// AddIsolateMs adds v to the "isolate_ms" field.
func (u *MetricsUpsertBulk) AddIsolateMs(v int64) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.AddIsolateMs(v)
	})
}

// UpdateIsolateMs sets the "isolate_ms" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateIsolateMs() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateIsolateMs()
	})
}

// SetErrorCode sets the "error_code" field.
func (u *MetricsUpsertBulk) SetErrorCode(v string) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetErrorCode(v)
	})
}

// UpdateErrorCode sets the "error_code" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateErrorCode() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateErrorCode()
	})
}

// ClearErrorCode clears the value of the "error_code" field.
func (u *MetricsUpsertBulk) ClearErrorCode() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.ClearErrorCode()
	})
}

// SetInvoker sets the "invoker" field.
func (u *MetricsUpsertBulk) SetInvoker(v string) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetInvoker(v)
	})
}

// UpdateInvoker sets the "invoker" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateInvoker() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateInvoker()
	})
}

// SetNext sets the "next" field.
func (u *MetricsUpsertBulk) SetNext(v int8) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetNext(v)
	})
}

// AddNext adds v to the "next" field.
func (u *MetricsUpsertBulk) AddNext(v int8) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.AddNext(v)
	})
}

// UpdateNext sets the "next" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateNext() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateNext()
	})
}

// SetTransition sets the "transition" field.
func (u *MetricsUpsertBulk) SetTransition(v string) *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.SetTransition(v)
	})
}

// UpdateTransition sets the "transition" field to the value that was provided on create.
func (u *MetricsUpsertBulk) UpdateTransition() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.UpdateTransition()
	})
}

// ClearTransition clears the value of the "transition" field.
func (u *MetricsUpsertBulk) ClearTransition() *MetricsUpsertBulk {
	return u.Update(func(s *MetricsUpsert) {
		s.ClearTransition()
	})
}

// Exec executes the query.
func (u *MetricsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MetricsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MetricsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MetricsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
