// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IsolatesServiceClient is the client API for IsolatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IsolatesServiceClient interface {
	UpdateIsolate(ctx context.Context, in *UpdateIsolateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateIsolate(ctx context.Context, in *CreateIsolateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteIsolates(ctx context.Context, in *ListIsolatesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListIsolates(ctx context.Context, in *ListIsolatesRequest, opts ...grpc.CallOption) (*ListIsolatesResponse, error)
	GetIsolate(ctx context.Context, in *GetIsolateRequest, opts ...grpc.CallOption) (*GetIsolateResponse, error)
	DeleteIsolate(ctx context.Context, in *GetIsolateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetIsolateTraffic(ctx context.Context, in *SetTrafficRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StoreRegistry(ctx context.Context, in *StoreRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRegistries(ctx context.Context, in *GetRegistriesRequest, opts ...grpc.CallOption) (*GetRegistriesResponse, error)
	DeleteRegistry(ctx context.Context, in *DeleteRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateIsolatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*CreatePodResponse, error)
	CancelIsolatePod(ctx context.Context, in *CancelPodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRevision(ctx context.Context, in *DeleteRevisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type isolatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIsolatesServiceClient(cc grpc.ClientConnInterface) IsolatesServiceClient {
	return &isolatesServiceClient{cc}
}

func (c *isolatesServiceClient) UpdateIsolate(ctx context.Context, in *UpdateIsolateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/UpdateIsolate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) CreateIsolate(ctx context.Context, in *CreateIsolateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/CreateIsolate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) DeleteIsolates(ctx context.Context, in *ListIsolatesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/DeleteIsolates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) ListIsolates(ctx context.Context, in *ListIsolatesRequest, opts ...grpc.CallOption) (*ListIsolatesResponse, error) {
	out := new(ListIsolatesResponse)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/ListIsolates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) GetIsolate(ctx context.Context, in *GetIsolateRequest, opts ...grpc.CallOption) (*GetIsolateResponse, error) {
	out := new(GetIsolateResponse)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/GetIsolate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) DeleteIsolate(ctx context.Context, in *GetIsolateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/DeleteIsolate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) SetIsolateTraffic(ctx context.Context, in *SetTrafficRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/SetIsolateTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) StoreRegistry(ctx context.Context, in *StoreRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/StoreRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) GetRegistries(ctx context.Context, in *GetRegistriesRequest, opts ...grpc.CallOption) (*GetRegistriesResponse, error) {
	out := new(GetRegistriesResponse)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/GetRegistries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) DeleteRegistry(ctx context.Context, in *DeleteRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/DeleteRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) CreateIsolatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*CreatePodResponse, error) {
	out := new(CreatePodResponse)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/CreateIsolatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) CancelIsolatePod(ctx context.Context, in *CancelPodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/CancelIsolatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolatesServiceClient) DeleteRevision(ctx context.Context, in *DeleteRevisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/grpc.IsolatesService/DeleteRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IsolatesServiceServer is the server API for IsolatesService service.
// All implementations must embed UnimplementedIsolatesServiceServer
// for forward compatibility
type IsolatesServiceServer interface {
	UpdateIsolate(context.Context, *UpdateIsolateRequest) (*emptypb.Empty, error)
	CreateIsolate(context.Context, *CreateIsolateRequest) (*emptypb.Empty, error)
	DeleteIsolates(context.Context, *ListIsolatesRequest) (*emptypb.Empty, error)
	ListIsolates(context.Context, *ListIsolatesRequest) (*ListIsolatesResponse, error)
	GetIsolate(context.Context, *GetIsolateRequest) (*GetIsolateResponse, error)
	DeleteIsolate(context.Context, *GetIsolateRequest) (*emptypb.Empty, error)
	SetIsolateTraffic(context.Context, *SetTrafficRequest) (*emptypb.Empty, error)
	StoreRegistry(context.Context, *StoreRegistryRequest) (*emptypb.Empty, error)
	GetRegistries(context.Context, *GetRegistriesRequest) (*GetRegistriesResponse, error)
	DeleteRegistry(context.Context, *DeleteRegistryRequest) (*emptypb.Empty, error)
	CreateIsolatePod(context.Context, *CreatePodRequest) (*CreatePodResponse, error)
	CancelIsolatePod(context.Context, *CancelPodRequest) (*emptypb.Empty, error)
	DeleteRevision(context.Context, *DeleteRevisionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedIsolatesServiceServer()
}

// UnimplementedIsolatesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIsolatesServiceServer struct {
}

func (UnimplementedIsolatesServiceServer) UpdateIsolate(context.Context, *UpdateIsolateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIsolate not implemented")
}
func (UnimplementedIsolatesServiceServer) CreateIsolate(context.Context, *CreateIsolateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIsolate not implemented")
}
func (UnimplementedIsolatesServiceServer) DeleteIsolates(context.Context, *ListIsolatesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIsolates not implemented")
}
func (UnimplementedIsolatesServiceServer) ListIsolates(context.Context, *ListIsolatesRequest) (*ListIsolatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIsolates not implemented")
}
func (UnimplementedIsolatesServiceServer) GetIsolate(context.Context, *GetIsolateRequest) (*GetIsolateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsolate not implemented")
}
func (UnimplementedIsolatesServiceServer) DeleteIsolate(context.Context, *GetIsolateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIsolate not implemented")
}
func (UnimplementedIsolatesServiceServer) SetIsolateTraffic(context.Context, *SetTrafficRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIsolateTraffic not implemented")
}
func (UnimplementedIsolatesServiceServer) StoreRegistry(context.Context, *StoreRegistryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRegistry not implemented")
}
func (UnimplementedIsolatesServiceServer) GetRegistries(context.Context, *GetRegistriesRequest) (*GetRegistriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistries not implemented")
}
func (UnimplementedIsolatesServiceServer) DeleteRegistry(context.Context, *DeleteRegistryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistry not implemented")
}
func (UnimplementedIsolatesServiceServer) CreateIsolatePod(context.Context, *CreatePodRequest) (*CreatePodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIsolatePod not implemented")
}
func (UnimplementedIsolatesServiceServer) CancelIsolatePod(context.Context, *CancelPodRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelIsolatePod not implemented")
}
func (UnimplementedIsolatesServiceServer) DeleteRevision(context.Context, *DeleteRevisionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRevision not implemented")
}
func (UnimplementedIsolatesServiceServer) mustEmbedUnimplementedIsolatesServiceServer() {}

// UnsafeIsolatesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IsolatesServiceServer will
// result in compilation errors.
type UnsafeIsolatesServiceServer interface {
	mustEmbedUnimplementedIsolatesServiceServer()
}

func RegisterIsolatesServiceServer(s grpc.ServiceRegistrar, srv IsolatesServiceServer) {
	s.RegisterService(&IsolatesService_ServiceDesc, srv)
}

func _IsolatesService_UpdateIsolate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIsolateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).UpdateIsolate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/UpdateIsolate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).UpdateIsolate(ctx, req.(*UpdateIsolateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_CreateIsolate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIsolateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).CreateIsolate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/CreateIsolate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).CreateIsolate(ctx, req.(*CreateIsolateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_DeleteIsolates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIsolatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).DeleteIsolates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/DeleteIsolates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).DeleteIsolates(ctx, req.(*ListIsolatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_ListIsolates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIsolatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).ListIsolates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/ListIsolates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).ListIsolates(ctx, req.(*ListIsolatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_GetIsolate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsolateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).GetIsolate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/GetIsolate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).GetIsolate(ctx, req.(*GetIsolateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_DeleteIsolate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsolateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).DeleteIsolate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/DeleteIsolate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).DeleteIsolate(ctx, req.(*GetIsolateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_SetIsolateTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).SetIsolateTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/SetIsolateTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).SetIsolateTraffic(ctx, req.(*SetTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_StoreRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).StoreRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/StoreRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).StoreRegistry(ctx, req.(*StoreRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_GetRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).GetRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/GetRegistries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).GetRegistries(ctx, req.(*GetRegistriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_DeleteRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).DeleteRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/DeleteRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).DeleteRegistry(ctx, req.(*DeleteRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_CreateIsolatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).CreateIsolatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/CreateIsolatePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).CreateIsolatePod(ctx, req.(*CreatePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_CancelIsolatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).CancelIsolatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/CancelIsolatePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).CancelIsolatePod(ctx, req.(*CancelPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolatesService_DeleteRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatesServiceServer).DeleteRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.IsolatesService/DeleteRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatesServiceServer).DeleteRevision(ctx, req.(*DeleteRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IsolatesService_ServiceDesc is the grpc.ServiceDesc for IsolatesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IsolatesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.IsolatesService",
	HandlerType: (*IsolatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateIsolate",
			Handler:    _IsolatesService_UpdateIsolate_Handler,
		},
		{
			MethodName: "CreateIsolate",
			Handler:    _IsolatesService_CreateIsolate_Handler,
		},
		{
			MethodName: "DeleteIsolates",
			Handler:    _IsolatesService_DeleteIsolates_Handler,
		},
		{
			MethodName: "ListIsolates",
			Handler:    _IsolatesService_ListIsolates_Handler,
		},
		{
			MethodName: "GetIsolate",
			Handler:    _IsolatesService_GetIsolate_Handler,
		},
		{
			MethodName: "DeleteIsolate",
			Handler:    _IsolatesService_DeleteIsolate_Handler,
		},
		{
			MethodName: "SetIsolateTraffic",
			Handler:    _IsolatesService_SetIsolateTraffic_Handler,
		},
		{
			MethodName: "StoreRegistry",
			Handler:    _IsolatesService_StoreRegistry_Handler,
		},
		{
			MethodName: "GetRegistries",
			Handler:    _IsolatesService_GetRegistries_Handler,
		},
		{
			MethodName: "DeleteRegistry",
			Handler:    _IsolatesService_DeleteRegistry_Handler,
		},
		{
			MethodName: "CreateIsolatePod",
			Handler:    _IsolatesService_CreateIsolatePod_Handler,
		},
		{
			MethodName: "CancelIsolatePod",
			Handler:    _IsolatesService_CancelIsolatePod_Handler,
		},
		{
			MethodName: "DeleteRevision",
			Handler:    _IsolatesService_DeleteRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/isolates/grpc/protocol.proto",
}
