// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pkg/functions/grpc/protocol.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Functions_StoreRegistry_FullMethodName       = "/direktiv_functions.Functions/StoreRegistry"
	Functions_GetRegistries_FullMethodName       = "/direktiv_functions.Functions/GetRegistries"
	Functions_DeleteRegistry_FullMethodName      = "/direktiv_functions.Functions/DeleteRegistry"
	Functions_ReconstructFunction_FullMethodName = "/direktiv_functions.Functions/ReconstructFunction"
	Functions_UpdateFunction_FullMethodName      = "/direktiv_functions.Functions/UpdateFunction"
	Functions_CreateFunction_FullMethodName      = "/direktiv_functions.Functions/CreateFunction"
	Functions_DeleteFunctions_FullMethodName     = "/direktiv_functions.Functions/DeleteFunctions"
	Functions_ListFunctions_FullMethodName       = "/direktiv_functions.Functions/ListFunctions"
	Functions_GetFunction_FullMethodName         = "/direktiv_functions.Functions/GetFunction"
	Functions_DeleteFunction_FullMethodName      = "/direktiv_functions.Functions/DeleteFunction"
	Functions_DeleteRevision_FullMethodName      = "/direktiv_functions.Functions/DeleteRevision"
	Functions_WatchFunctions_FullMethodName      = "/direktiv_functions.Functions/WatchFunctions"
	Functions_WatchPods_FullMethodName           = "/direktiv_functions.Functions/WatchPods"
	Functions_WatchRevisions_FullMethodName      = "/direktiv_functions.Functions/WatchRevisions"
	Functions_WatchLogs_FullMethodName           = "/direktiv_functions.Functions/WatchLogs"
	Functions_ListPods_FullMethodName            = "/direktiv_functions.Functions/ListPods"
	Functions_Build_FullMethodName               = "/direktiv_functions.Functions/Build"
	Functions_CancelWorfklow_FullMethodName      = "/direktiv_functions.Functions/CancelWorfklow"
)

// FunctionsClient is the client API for Functions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionsClient interface {
	StoreRegistry(ctx context.Context, in *FunctionsStoreRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRegistries(ctx context.Context, in *FunctionsGetRegistriesRequest, opts ...grpc.CallOption) (*FunctionsGetRegistriesResponse, error)
	DeleteRegistry(ctx context.Context, in *FunctionsDeleteRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReconstructFunction(ctx context.Context, in *FunctionsReconstructFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFunction(ctx context.Context, in *FunctionsUpdateFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateFunction(ctx context.Context, in *FunctionsCreateFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFunctions(ctx context.Context, in *FunctionsListFunctionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListFunctions(ctx context.Context, in *FunctionsListFunctionsRequest, opts ...grpc.CallOption) (*FunctionsListFunctionsResponse, error)
	GetFunction(ctx context.Context, in *FunctionsGetFunctionRequest, opts ...grpc.CallOption) (*FunctionsGetFunctionResponse, error)
	DeleteFunction(ctx context.Context, in *FunctionsGetFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRevision(ctx context.Context, in *FunctionsDeleteRevisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WatchFunctions(ctx context.Context, in *FunctionsWatchFunctionsRequest, opts ...grpc.CallOption) (Functions_WatchFunctionsClient, error)
	WatchPods(ctx context.Context, in *FunctionsWatchPodsRequest, opts ...grpc.CallOption) (Functions_WatchPodsClient, error)
	WatchRevisions(ctx context.Context, in *FunctionsWatchRevisionsRequest, opts ...grpc.CallOption) (Functions_WatchRevisionsClient, error)
	WatchLogs(ctx context.Context, in *FunctionsWatchLogsRequest, opts ...grpc.CallOption) (Functions_WatchLogsClient, error)
	ListPods(ctx context.Context, in *FunctionsListPodsRequest, opts ...grpc.CallOption) (*FunctionsListPodsResponse, error)
	Build(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionsBuildResponse, error)
	CancelWorfklow(ctx context.Context, in *FunctionsCancelWorkflowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type functionsClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionsClient(cc grpc.ClientConnInterface) FunctionsClient {
	return &functionsClient{cc}
}

func (c *functionsClient) StoreRegistry(ctx context.Context, in *FunctionsStoreRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Functions_StoreRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) GetRegistries(ctx context.Context, in *FunctionsGetRegistriesRequest, opts ...grpc.CallOption) (*FunctionsGetRegistriesResponse, error) {
	out := new(FunctionsGetRegistriesResponse)
	err := c.cc.Invoke(ctx, Functions_GetRegistries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) DeleteRegistry(ctx context.Context, in *FunctionsDeleteRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Functions_DeleteRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) ReconstructFunction(ctx context.Context, in *FunctionsReconstructFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Functions_ReconstructFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) UpdateFunction(ctx context.Context, in *FunctionsUpdateFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Functions_UpdateFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) CreateFunction(ctx context.Context, in *FunctionsCreateFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Functions_CreateFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) DeleteFunctions(ctx context.Context, in *FunctionsListFunctionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Functions_DeleteFunctions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) ListFunctions(ctx context.Context, in *FunctionsListFunctionsRequest, opts ...grpc.CallOption) (*FunctionsListFunctionsResponse, error) {
	out := new(FunctionsListFunctionsResponse)
	err := c.cc.Invoke(ctx, Functions_ListFunctions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) GetFunction(ctx context.Context, in *FunctionsGetFunctionRequest, opts ...grpc.CallOption) (*FunctionsGetFunctionResponse, error) {
	out := new(FunctionsGetFunctionResponse)
	err := c.cc.Invoke(ctx, Functions_GetFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) DeleteFunction(ctx context.Context, in *FunctionsGetFunctionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Functions_DeleteFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) DeleteRevision(ctx context.Context, in *FunctionsDeleteRevisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Functions_DeleteRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) WatchFunctions(ctx context.Context, in *FunctionsWatchFunctionsRequest, opts ...grpc.CallOption) (Functions_WatchFunctionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Functions_ServiceDesc.Streams[0], Functions_WatchFunctions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &functionsWatchFunctionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Functions_WatchFunctionsClient interface {
	Recv() (*FunctionsWatchFunctionsResponse, error)
	grpc.ClientStream
}

type functionsWatchFunctionsClient struct {
	grpc.ClientStream
}

func (x *functionsWatchFunctionsClient) Recv() (*FunctionsWatchFunctionsResponse, error) {
	m := new(FunctionsWatchFunctionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionsClient) WatchPods(ctx context.Context, in *FunctionsWatchPodsRequest, opts ...grpc.CallOption) (Functions_WatchPodsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Functions_ServiceDesc.Streams[1], Functions_WatchPods_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &functionsWatchPodsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Functions_WatchPodsClient interface {
	Recv() (*FunctionsWatchPodsResponse, error)
	grpc.ClientStream
}

type functionsWatchPodsClient struct {
	grpc.ClientStream
}

func (x *functionsWatchPodsClient) Recv() (*FunctionsWatchPodsResponse, error) {
	m := new(FunctionsWatchPodsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionsClient) WatchRevisions(ctx context.Context, in *FunctionsWatchRevisionsRequest, opts ...grpc.CallOption) (Functions_WatchRevisionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Functions_ServiceDesc.Streams[2], Functions_WatchRevisions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &functionsWatchRevisionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Functions_WatchRevisionsClient interface {
	Recv() (*FunctionsWatchRevisionsResponse, error)
	grpc.ClientStream
}

type functionsWatchRevisionsClient struct {
	grpc.ClientStream
}

func (x *functionsWatchRevisionsClient) Recv() (*FunctionsWatchRevisionsResponse, error) {
	m := new(FunctionsWatchRevisionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionsClient) WatchLogs(ctx context.Context, in *FunctionsWatchLogsRequest, opts ...grpc.CallOption) (Functions_WatchLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Functions_ServiceDesc.Streams[3], Functions_WatchLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &functionsWatchLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Functions_WatchLogsClient interface {
	Recv() (*FunctionsWatchLogsResponse, error)
	grpc.ClientStream
}

type functionsWatchLogsClient struct {
	grpc.ClientStream
}

func (x *functionsWatchLogsClient) Recv() (*FunctionsWatchLogsResponse, error) {
	m := new(FunctionsWatchLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *functionsClient) ListPods(ctx context.Context, in *FunctionsListPodsRequest, opts ...grpc.CallOption) (*FunctionsListPodsResponse, error) {
	out := new(FunctionsListPodsResponse)
	err := c.cc.Invoke(ctx, Functions_ListPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) Build(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionsBuildResponse, error) {
	out := new(FunctionsBuildResponse)
	err := c.cc.Invoke(ctx, Functions_Build_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionsClient) CancelWorfklow(ctx context.Context, in *FunctionsCancelWorkflowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Functions_CancelWorfklow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionsServer is the server API for Functions service.
// All implementations must embed UnimplementedFunctionsServer
// for forward compatibility
type FunctionsServer interface {
	StoreRegistry(context.Context, *FunctionsStoreRegistryRequest) (*emptypb.Empty, error)
	GetRegistries(context.Context, *FunctionsGetRegistriesRequest) (*FunctionsGetRegistriesResponse, error)
	DeleteRegistry(context.Context, *FunctionsDeleteRegistryRequest) (*emptypb.Empty, error)
	ReconstructFunction(context.Context, *FunctionsReconstructFunctionRequest) (*emptypb.Empty, error)
	UpdateFunction(context.Context, *FunctionsUpdateFunctionRequest) (*emptypb.Empty, error)
	CreateFunction(context.Context, *FunctionsCreateFunctionRequest) (*emptypb.Empty, error)
	DeleteFunctions(context.Context, *FunctionsListFunctionsRequest) (*emptypb.Empty, error)
	ListFunctions(context.Context, *FunctionsListFunctionsRequest) (*FunctionsListFunctionsResponse, error)
	GetFunction(context.Context, *FunctionsGetFunctionRequest) (*FunctionsGetFunctionResponse, error)
	DeleteFunction(context.Context, *FunctionsGetFunctionRequest) (*emptypb.Empty, error)
	DeleteRevision(context.Context, *FunctionsDeleteRevisionRequest) (*emptypb.Empty, error)
	WatchFunctions(*FunctionsWatchFunctionsRequest, Functions_WatchFunctionsServer) error
	WatchPods(*FunctionsWatchPodsRequest, Functions_WatchPodsServer) error
	WatchRevisions(*FunctionsWatchRevisionsRequest, Functions_WatchRevisionsServer) error
	WatchLogs(*FunctionsWatchLogsRequest, Functions_WatchLogsServer) error
	ListPods(context.Context, *FunctionsListPodsRequest) (*FunctionsListPodsResponse, error)
	Build(context.Context, *emptypb.Empty) (*FunctionsBuildResponse, error)
	CancelWorfklow(context.Context, *FunctionsCancelWorkflowRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFunctionsServer()
}

// UnimplementedFunctionsServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionsServer struct {
}

func (UnimplementedFunctionsServer) StoreRegistry(context.Context, *FunctionsStoreRegistryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRegistry not implemented")
}
func (UnimplementedFunctionsServer) GetRegistries(context.Context, *FunctionsGetRegistriesRequest) (*FunctionsGetRegistriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistries not implemented")
}
func (UnimplementedFunctionsServer) DeleteRegistry(context.Context, *FunctionsDeleteRegistryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistry not implemented")
}
func (UnimplementedFunctionsServer) ReconstructFunction(context.Context, *FunctionsReconstructFunctionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconstructFunction not implemented")
}
func (UnimplementedFunctionsServer) UpdateFunction(context.Context, *FunctionsUpdateFunctionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunction not implemented")
}
func (UnimplementedFunctionsServer) CreateFunction(context.Context, *FunctionsCreateFunctionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedFunctionsServer) DeleteFunctions(context.Context, *FunctionsListFunctionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunctions not implemented")
}
func (UnimplementedFunctionsServer) ListFunctions(context.Context, *FunctionsListFunctionsRequest) (*FunctionsListFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunctions not implemented")
}
func (UnimplementedFunctionsServer) GetFunction(context.Context, *FunctionsGetFunctionRequest) (*FunctionsGetFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunction not implemented")
}
func (UnimplementedFunctionsServer) DeleteFunction(context.Context, *FunctionsGetFunctionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunction not implemented")
}
func (UnimplementedFunctionsServer) DeleteRevision(context.Context, *FunctionsDeleteRevisionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRevision not implemented")
}
func (UnimplementedFunctionsServer) WatchFunctions(*FunctionsWatchFunctionsRequest, Functions_WatchFunctionsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchFunctions not implemented")
}
func (UnimplementedFunctionsServer) WatchPods(*FunctionsWatchPodsRequest, Functions_WatchPodsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPods not implemented")
}
func (UnimplementedFunctionsServer) WatchRevisions(*FunctionsWatchRevisionsRequest, Functions_WatchRevisionsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchRevisions not implemented")
}
func (UnimplementedFunctionsServer) WatchLogs(*FunctionsWatchLogsRequest, Functions_WatchLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLogs not implemented")
}
func (UnimplementedFunctionsServer) ListPods(context.Context, *FunctionsListPodsRequest) (*FunctionsListPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (UnimplementedFunctionsServer) Build(context.Context, *emptypb.Empty) (*FunctionsBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedFunctionsServer) CancelWorfklow(context.Context, *FunctionsCancelWorkflowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorfklow not implemented")
}
func (UnimplementedFunctionsServer) mustEmbedUnimplementedFunctionsServer() {}

// UnsafeFunctionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionsServer will
// result in compilation errors.
type UnsafeFunctionsServer interface {
	mustEmbedUnimplementedFunctionsServer()
}

func RegisterFunctionsServer(s grpc.ServiceRegistrar, srv FunctionsServer) {
	s.RegisterService(&Functions_ServiceDesc, srv)
}

func _Functions_StoreRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsStoreRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).StoreRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_StoreRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).StoreRegistry(ctx, req.(*FunctionsStoreRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_GetRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsGetRegistriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).GetRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_GetRegistries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).GetRegistries(ctx, req.(*FunctionsGetRegistriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_DeleteRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsDeleteRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).DeleteRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_DeleteRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).DeleteRegistry(ctx, req.(*FunctionsDeleteRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_ReconstructFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsReconstructFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).ReconstructFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_ReconstructFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).ReconstructFunction(ctx, req.(*FunctionsReconstructFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_UpdateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsUpdateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).UpdateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_UpdateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).UpdateFunction(ctx, req.(*FunctionsUpdateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsCreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_CreateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).CreateFunction(ctx, req.(*FunctionsCreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_DeleteFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsListFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).DeleteFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_DeleteFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).DeleteFunctions(ctx, req.(*FunctionsListFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_ListFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsListFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).ListFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_ListFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).ListFunctions(ctx, req.(*FunctionsListFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_GetFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsGetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).GetFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_GetFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).GetFunction(ctx, req.(*FunctionsGetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_DeleteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsGetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).DeleteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_DeleteFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).DeleteFunction(ctx, req.(*FunctionsGetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_DeleteRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsDeleteRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).DeleteRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_DeleteRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).DeleteRevision(ctx, req.(*FunctionsDeleteRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_WatchFunctions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionsWatchFunctionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionsServer).WatchFunctions(m, &functionsWatchFunctionsServer{stream})
}

type Functions_WatchFunctionsServer interface {
	Send(*FunctionsWatchFunctionsResponse) error
	grpc.ServerStream
}

type functionsWatchFunctionsServer struct {
	grpc.ServerStream
}

func (x *functionsWatchFunctionsServer) Send(m *FunctionsWatchFunctionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Functions_WatchPods_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionsWatchPodsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionsServer).WatchPods(m, &functionsWatchPodsServer{stream})
}

type Functions_WatchPodsServer interface {
	Send(*FunctionsWatchPodsResponse) error
	grpc.ServerStream
}

type functionsWatchPodsServer struct {
	grpc.ServerStream
}

func (x *functionsWatchPodsServer) Send(m *FunctionsWatchPodsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Functions_WatchRevisions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionsWatchRevisionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionsServer).WatchRevisions(m, &functionsWatchRevisionsServer{stream})
}

type Functions_WatchRevisionsServer interface {
	Send(*FunctionsWatchRevisionsResponse) error
	grpc.ServerStream
}

type functionsWatchRevisionsServer struct {
	grpc.ServerStream
}

func (x *functionsWatchRevisionsServer) Send(m *FunctionsWatchRevisionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Functions_WatchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FunctionsWatchLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionsServer).WatchLogs(m, &functionsWatchLogsServer{stream})
}

type Functions_WatchLogsServer interface {
	Send(*FunctionsWatchLogsResponse) error
	grpc.ServerStream
}

type functionsWatchLogsServer struct {
	grpc.ServerStream
}

func (x *functionsWatchLogsServer) Send(m *FunctionsWatchLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Functions_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsListPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_ListPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).ListPods(ctx, req.(*FunctionsListPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_Build_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).Build(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Functions_CancelWorfklow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionsCancelWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionsServer).CancelWorfklow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Functions_CancelWorfklow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionsServer).CancelWorfklow(ctx, req.(*FunctionsCancelWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Functions_ServiceDesc is the grpc.ServiceDesc for Functions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Functions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "direktiv_functions.Functions",
	HandlerType: (*FunctionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreRegistry",
			Handler:    _Functions_StoreRegistry_Handler,
		},
		{
			MethodName: "GetRegistries",
			Handler:    _Functions_GetRegistries_Handler,
		},
		{
			MethodName: "DeleteRegistry",
			Handler:    _Functions_DeleteRegistry_Handler,
		},
		{
			MethodName: "ReconstructFunction",
			Handler:    _Functions_ReconstructFunction_Handler,
		},
		{
			MethodName: "UpdateFunction",
			Handler:    _Functions_UpdateFunction_Handler,
		},
		{
			MethodName: "CreateFunction",
			Handler:    _Functions_CreateFunction_Handler,
		},
		{
			MethodName: "DeleteFunctions",
			Handler:    _Functions_DeleteFunctions_Handler,
		},
		{
			MethodName: "ListFunctions",
			Handler:    _Functions_ListFunctions_Handler,
		},
		{
			MethodName: "GetFunction",
			Handler:    _Functions_GetFunction_Handler,
		},
		{
			MethodName: "DeleteFunction",
			Handler:    _Functions_DeleteFunction_Handler,
		},
		{
			MethodName: "DeleteRevision",
			Handler:    _Functions_DeleteRevision_Handler,
		},
		{
			MethodName: "ListPods",
			Handler:    _Functions_ListPods_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _Functions_Build_Handler,
		},
		{
			MethodName: "CancelWorfklow",
			Handler:    _Functions_CancelWorfklow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchFunctions",
			Handler:       _Functions_WatchFunctions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPods",
			Handler:       _Functions_WatchPods_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchRevisions",
			Handler:       _Functions_WatchRevisions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchLogs",
			Handler:       _Functions_WatchLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/functions/grpc/protocol.proto",
}
