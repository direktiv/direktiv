// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: pkg/flow/grpc/util.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JQRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JQRequest) Reset() {
	*x = JQRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flow_grpc_util_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JQRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JQRequest) ProtoMessage() {}

func (x *JQRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flow_grpc_util_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JQRequest.ProtoReflect.Descriptor instead.
func (*JQRequest) Descriptor() ([]byte, []int) {
	return file_pkg_flow_grpc_util_proto_rawDescGZIP(), []int{0}
}

func (x *JQRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *JQRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type JQResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query   string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Data    []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Results []string `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *JQResponse) Reset() {
	*x = JQResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flow_grpc_util_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JQResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JQResponse) ProtoMessage() {}

func (x *JQResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flow_grpc_util_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JQResponse.ProtoReflect.Descriptor instead.
func (*JQResponse) Descriptor() ([]byte, []int) {
	return file_pkg_flow_grpc_util_proto_rawDescGZIP(), []int{1}
}

func (x *JQResponse) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *JQResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *JQResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type WorkflowMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace      string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Path           string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	SinceTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=sinceTimestamp,proto3" json:"sinceTimestamp,omitempty"`
	Ref            string                 `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *WorkflowMetricsRequest) Reset() {
	*x = WorkflowMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flow_grpc_util_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowMetricsRequest) ProtoMessage() {}

func (x *WorkflowMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flow_grpc_util_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowMetricsRequest.ProtoReflect.Descriptor instead.
func (*WorkflowMetricsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_flow_grpc_util_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowMetricsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkflowMetricsRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WorkflowMetricsRequest) GetSinceTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SinceTimestamp
	}
	return nil
}

func (x *WorkflowMetricsRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type WorkflowMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalInstancesRun         int32              `protobuf:"varint,1,opt,name=totalInstancesRun,proto3" json:"totalInstancesRun,omitempty"`
	TotalInstanceMilliseconds int32              `protobuf:"varint,2,opt,name=totalInstanceMilliseconds,proto3" json:"totalInstanceMilliseconds,omitempty"`
	SuccessfulExecutions      int32              `protobuf:"varint,3,opt,name=successfulExecutions,proto3" json:"successfulExecutions,omitempty"`
	FailedExecutions          int32              `protobuf:"varint,4,opt,name=failedExecutions,proto3" json:"failedExecutions,omitempty"`
	ErrorCodes                map[string]int32   `protobuf:"bytes,5,rep,name=errorCodes,proto3" json:"errorCodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ErrorCodesRepresentation  map[string]float32 `protobuf:"bytes,6,rep,name=errorCodesRepresentation,proto3" json:"errorCodesRepresentation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	SampleSize                int32              `protobuf:"varint,7,opt,name=sampleSize,proto3" json:"sampleSize,omitempty"`
	MeanInstanceMilliseconds  int32              `protobuf:"varint,8,opt,name=meanInstanceMilliseconds,proto3" json:"meanInstanceMilliseconds,omitempty"`
	SuccessRate               float32            `protobuf:"fixed32,9,opt,name=successRate,proto3" json:"successRate,omitempty"`
	FailureRate               float32            `protobuf:"fixed32,10,opt,name=failureRate,proto3" json:"failureRate,omitempty"`
	States                    []*State           `protobuf:"bytes,11,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *WorkflowMetricsResponse) Reset() {
	*x = WorkflowMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flow_grpc_util_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowMetricsResponse) ProtoMessage() {}

func (x *WorkflowMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flow_grpc_util_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowMetricsResponse.ProtoReflect.Descriptor instead.
func (*WorkflowMetricsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_flow_grpc_util_proto_rawDescGZIP(), []int{3}
}

func (x *WorkflowMetricsResponse) GetTotalInstancesRun() int32 {
	if x != nil {
		return x.TotalInstancesRun
	}
	return 0
}

func (x *WorkflowMetricsResponse) GetTotalInstanceMilliseconds() int32 {
	if x != nil {
		return x.TotalInstanceMilliseconds
	}
	return 0
}

func (x *WorkflowMetricsResponse) GetSuccessfulExecutions() int32 {
	if x != nil {
		return x.SuccessfulExecutions
	}
	return 0
}

func (x *WorkflowMetricsResponse) GetFailedExecutions() int32 {
	if x != nil {
		return x.FailedExecutions
	}
	return 0
}

func (x *WorkflowMetricsResponse) GetErrorCodes() map[string]int32 {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

func (x *WorkflowMetricsResponse) GetErrorCodesRepresentation() map[string]float32 {
	if x != nil {
		return x.ErrorCodesRepresentation
	}
	return nil
}

func (x *WorkflowMetricsResponse) GetSampleSize() int32 {
	if x != nil {
		return x.SampleSize
	}
	return 0
}

func (x *WorkflowMetricsResponse) GetMeanInstanceMilliseconds() int32 {
	if x != nil {
		return x.MeanInstanceMilliseconds
	}
	return 0
}

func (x *WorkflowMetricsResponse) GetSuccessRate() float32 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *WorkflowMetricsResponse) GetFailureRate() float32 {
	if x != nil {
		return x.FailureRate
	}
	return 0
}

func (x *WorkflowMetricsResponse) GetStates() []*State {
	if x != nil {
		return x.States
	}
	return nil
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Invokers                      map[string]int32   `protobuf:"bytes,2,rep,name=invokers,proto3" json:"invokers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InvokersRepresentation        map[string]float32 `protobuf:"bytes,3,rep,name=invokersRepresentation,proto3" json:"invokersRepresentation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	TotalExecutions               int32              `protobuf:"varint,4,opt,name=totalExecutions,proto3" json:"totalExecutions,omitempty"`
	TotalMilliseconds             int32              `protobuf:"varint,5,opt,name=totalMilliseconds,proto3" json:"totalMilliseconds,omitempty"`
	TotalSuccesses                int32              `protobuf:"varint,6,opt,name=totalSuccesses,proto3" json:"totalSuccesses,omitempty"`
	TotalFailures                 int32              `protobuf:"varint,7,opt,name=totalFailures,proto3" json:"totalFailures,omitempty"`
	UnhandledErrors               map[string]int32   `protobuf:"bytes,8,rep,name=unhandledErrors,proto3" json:"unhandledErrors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UnhandledErrorsRepresentation map[string]float32 `protobuf:"bytes,9,rep,name=unhandledErrorsRepresentation,proto3" json:"unhandledErrorsRepresentation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	TotalRetries                  int32              `protobuf:"varint,10,opt,name=totalRetries,proto3" json:"totalRetries,omitempty"`
	Outcomes                      *Outcomes          `protobuf:"bytes,11,opt,name=outcomes,proto3" json:"outcomes,omitempty"`
	MeanExecutionsPerInstance     int32              `protobuf:"varint,12,opt,name=meanExecutionsPerInstance,proto3" json:"meanExecutionsPerInstance,omitempty"`
	MeanMillisecondsPerInstance   int32              `protobuf:"varint,13,opt,name=meanMillisecondsPerInstance,proto3" json:"meanMillisecondsPerInstance,omitempty"`
	SuccessRate                   float32            `protobuf:"fixed32,14,opt,name=successRate,proto3" json:"successRate,omitempty"`
	FailureRate                   float32            `protobuf:"fixed32,15,opt,name=failureRate,proto3" json:"failureRate,omitempty"`
	MeanRetries                   float32            `protobuf:"fixed32,16,opt,name=meanRetries,proto3" json:"meanRetries,omitempty"`
	MeanOutcomes                  *MeanOutcomes      `protobuf:"bytes,17,opt,name=meanOutcomes,proto3" json:"meanOutcomes,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flow_grpc_util_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flow_grpc_util_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_pkg_flow_grpc_util_proto_rawDescGZIP(), []int{4}
}

func (x *State) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *State) GetInvokers() map[string]int32 {
	if x != nil {
		return x.Invokers
	}
	return nil
}

func (x *State) GetInvokersRepresentation() map[string]float32 {
	if x != nil {
		return x.InvokersRepresentation
	}
	return nil
}

func (x *State) GetTotalExecutions() int32 {
	if x != nil {
		return x.TotalExecutions
	}
	return 0
}

func (x *State) GetTotalMilliseconds() int32 {
	if x != nil {
		return x.TotalMilliseconds
	}
	return 0
}

func (x *State) GetTotalSuccesses() int32 {
	if x != nil {
		return x.TotalSuccesses
	}
	return 0
}

func (x *State) GetTotalFailures() int32 {
	if x != nil {
		return x.TotalFailures
	}
	return 0
}

func (x *State) GetUnhandledErrors() map[string]int32 {
	if x != nil {
		return x.UnhandledErrors
	}
	return nil
}

func (x *State) GetUnhandledErrorsRepresentation() map[string]float32 {
	if x != nil {
		return x.UnhandledErrorsRepresentation
	}
	return nil
}

func (x *State) GetTotalRetries() int32 {
	if x != nil {
		return x.TotalRetries
	}
	return 0
}

func (x *State) GetOutcomes() *Outcomes {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

func (x *State) GetMeanExecutionsPerInstance() int32 {
	if x != nil {
		return x.MeanExecutionsPerInstance
	}
	return 0
}

func (x *State) GetMeanMillisecondsPerInstance() int32 {
	if x != nil {
		return x.MeanMillisecondsPerInstance
	}
	return 0
}

func (x *State) GetSuccessRate() float32 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *State) GetFailureRate() float32 {
	if x != nil {
		return x.FailureRate
	}
	return 0
}

func (x *State) GetMeanRetries() float32 {
	if x != nil {
		return x.MeanRetries
	}
	return 0
}

func (x *State) GetMeanOutcomes() *MeanOutcomes {
	if x != nil {
		return x.MeanOutcomes
	}
	return nil
}

type Outcomes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     int32            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Failure     int32            `protobuf:"varint,2,opt,name=failure,proto3" json:"failure,omitempty"`
	Transitions map[string]int32 `protobuf:"bytes,3,rep,name=transitions,proto3" json:"transitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Outcomes) Reset() {
	*x = Outcomes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flow_grpc_util_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outcomes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outcomes) ProtoMessage() {}

func (x *Outcomes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flow_grpc_util_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outcomes.ProtoReflect.Descriptor instead.
func (*Outcomes) Descriptor() ([]byte, []int) {
	return file_pkg_flow_grpc_util_proto_rawDescGZIP(), []int{5}
}

func (x *Outcomes) GetSuccess() int32 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *Outcomes) GetFailure() int32 {
	if x != nil {
		return x.Failure
	}
	return 0
}

func (x *Outcomes) GetTransitions() map[string]int32 {
	if x != nil {
		return x.Transitions
	}
	return nil
}

type MeanOutcomes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     float32            `protobuf:"fixed32,1,opt,name=success,proto3" json:"success,omitempty"`
	Failure     float32            `protobuf:"fixed32,2,opt,name=failure,proto3" json:"failure,omitempty"`
	Transitions map[string]float32 `protobuf:"bytes,3,rep,name=transitions,proto3" json:"transitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *MeanOutcomes) Reset() {
	*x = MeanOutcomes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_flow_grpc_util_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeanOutcomes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeanOutcomes) ProtoMessage() {}

func (x *MeanOutcomes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_flow_grpc_util_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeanOutcomes.ProtoReflect.Descriptor instead.
func (*MeanOutcomes) Descriptor() ([]byte, []int) {
	return file_pkg_flow_grpc_util_proto_rawDescGZIP(), []int{6}
}

func (x *MeanOutcomes) GetSuccess() float32 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *MeanOutcomes) GetFailure() float32 {
	if x != nil {
		return x.Failure
	}
	return 0
}

func (x *MeanOutcomes) GetTransitions() map[string]float32 {
	if x != nil {
		return x.Transitions
	}
	return nil
}

var File_pkg_flow_grpc_util_proto protoreflect.FileDescriptor

var file_pkg_flow_grpc_util_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x6b, 0x67, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x69, 0x72, 0x65,
	0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x09, 0x4a, 0x51,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x50, 0x0a, 0x0a, 0x4a, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x42, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x9a, 0x06, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x75, 0x6e,
	0x12, 0x3c, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x18, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x18, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x65, 0x61,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x65, 0x61,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdd, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x68, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x53, 0x0a, 0x0f, 0x75, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x75, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x7d, 0x0a, 0x1d, 0x75, 0x6e, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1d, 0x75, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69,
	0x72, 0x65, 0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x19, 0x6d, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x6d, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x1b,
	0x6d, 0x65, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x50, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1b, 0x6d, 0x65, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x61, 0x6e, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x50, 0x0a, 0x22, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x6b, 0x74, 0x69, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x61, 0x6e, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x6b, 0x74, 0x69, 0x76, 0x2f, 0x64, 0x69, 0x72,
	0x65, 0x6b, 0x74, 0x69, 0x76, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_flow_grpc_util_proto_rawDescOnce sync.Once
	file_pkg_flow_grpc_util_proto_rawDescData = file_pkg_flow_grpc_util_proto_rawDesc
)

func file_pkg_flow_grpc_util_proto_rawDescGZIP() []byte {
	file_pkg_flow_grpc_util_proto_rawDescOnce.Do(func() {
		file_pkg_flow_grpc_util_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_flow_grpc_util_proto_rawDescData)
	})
	return file_pkg_flow_grpc_util_proto_rawDescData
}

var file_pkg_flow_grpc_util_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pkg_flow_grpc_util_proto_goTypes = []interface{}{
	(*JQRequest)(nil),               // 0: direktiv_flow.JQRequest
	(*JQResponse)(nil),              // 1: direktiv_flow.JQResponse
	(*WorkflowMetricsRequest)(nil),  // 2: direktiv_flow.WorkflowMetricsRequest
	(*WorkflowMetricsResponse)(nil), // 3: direktiv_flow.WorkflowMetricsResponse
	(*State)(nil),                   // 4: direktiv_flow.State
	(*Outcomes)(nil),                // 5: direktiv_flow.Outcomes
	(*MeanOutcomes)(nil),            // 6: direktiv_flow.MeanOutcomes
	nil,                             // 7: direktiv_flow.WorkflowMetricsResponse.ErrorCodesEntry
	nil,                             // 8: direktiv_flow.WorkflowMetricsResponse.ErrorCodesRepresentationEntry
	nil,                             // 9: direktiv_flow.State.InvokersEntry
	nil,                             // 10: direktiv_flow.State.InvokersRepresentationEntry
	nil,                             // 11: direktiv_flow.State.UnhandledErrorsEntry
	nil,                             // 12: direktiv_flow.State.UnhandledErrorsRepresentationEntry
	nil,                             // 13: direktiv_flow.Outcomes.TransitionsEntry
	nil,                             // 14: direktiv_flow.MeanOutcomes.TransitionsEntry
	(*timestamppb.Timestamp)(nil),   // 15: google.protobuf.Timestamp
}
var file_pkg_flow_grpc_util_proto_depIdxs = []int32{
	15, // 0: direktiv_flow.WorkflowMetricsRequest.sinceTimestamp:type_name -> google.protobuf.Timestamp
	7,  // 1: direktiv_flow.WorkflowMetricsResponse.errorCodes:type_name -> direktiv_flow.WorkflowMetricsResponse.ErrorCodesEntry
	8,  // 2: direktiv_flow.WorkflowMetricsResponse.errorCodesRepresentation:type_name -> direktiv_flow.WorkflowMetricsResponse.ErrorCodesRepresentationEntry
	4,  // 3: direktiv_flow.WorkflowMetricsResponse.states:type_name -> direktiv_flow.State
	9,  // 4: direktiv_flow.State.invokers:type_name -> direktiv_flow.State.InvokersEntry
	10, // 5: direktiv_flow.State.invokersRepresentation:type_name -> direktiv_flow.State.InvokersRepresentationEntry
	11, // 6: direktiv_flow.State.unhandledErrors:type_name -> direktiv_flow.State.UnhandledErrorsEntry
	12, // 7: direktiv_flow.State.unhandledErrorsRepresentation:type_name -> direktiv_flow.State.UnhandledErrorsRepresentationEntry
	5,  // 8: direktiv_flow.State.outcomes:type_name -> direktiv_flow.Outcomes
	6,  // 9: direktiv_flow.State.meanOutcomes:type_name -> direktiv_flow.MeanOutcomes
	13, // 10: direktiv_flow.Outcomes.transitions:type_name -> direktiv_flow.Outcomes.TransitionsEntry
	14, // 11: direktiv_flow.MeanOutcomes.transitions:type_name -> direktiv_flow.MeanOutcomes.TransitionsEntry
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pkg_flow_grpc_util_proto_init() }
func file_pkg_flow_grpc_util_proto_init() {
	if File_pkg_flow_grpc_util_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_flow_grpc_util_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JQRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flow_grpc_util_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JQResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flow_grpc_util_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flow_grpc_util_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flow_grpc_util_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flow_grpc_util_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outcomes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_flow_grpc_util_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeanOutcomes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_flow_grpc_util_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_flow_grpc_util_proto_goTypes,
		DependencyIndexes: file_pkg_flow_grpc_util_proto_depIdxs,
		MessageInfos:      file_pkg_flow_grpc_util_proto_msgTypes,
	}.Build()
	File_pkg_flow_grpc_util_proto = out.File
	file_pkg_flow_grpc_util_proto_rawDesc = nil
	file_pkg_flow_grpc_util_proto_goTypes = nil
	file_pkg_flow_grpc_util_proto_depIdxs = nil
}
