// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pkg/flow/grpc/protocol.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Flow_SetNamespaceVariableParcels_FullMethodName = "/direktiv_flow.Flow/SetNamespaceVariableParcels"
	Flow_WorkflowVariable_FullMethodName            = "/direktiv_flow.Flow/WorkflowVariable"
	Flow_SetWorkflowVariableParcels_FullMethodName  = "/direktiv_flow.Flow/SetWorkflowVariableParcels"
	Flow_InstanceVariable_FullMethodName            = "/direktiv_flow.Flow/InstanceVariable"
	Flow_SetInstanceVariableParcels_FullMethodName  = "/direktiv_flow.Flow/SetInstanceVariableParcels"
)

// FlowClient is the client API for Flow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowClient interface {
	// variables.
	SetNamespaceVariableParcels(ctx context.Context, opts ...grpc.CallOption) (Flow_SetNamespaceVariableParcelsClient, error)
	WorkflowVariable(ctx context.Context, in *WorkflowVariableRequest, opts ...grpc.CallOption) (*WorkflowVariableResponse, error)
	SetWorkflowVariableParcels(ctx context.Context, opts ...grpc.CallOption) (Flow_SetWorkflowVariableParcelsClient, error)
	InstanceVariable(ctx context.Context, in *InstanceVariableRequest, opts ...grpc.CallOption) (*InstanceVariableResponse, error)
	SetInstanceVariableParcels(ctx context.Context, opts ...grpc.CallOption) (Flow_SetInstanceVariableParcelsClient, error)
}

type flowClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowClient(cc grpc.ClientConnInterface) FlowClient {
	return &flowClient{cc}
}

func (c *flowClient) SetNamespaceVariableParcels(ctx context.Context, opts ...grpc.CallOption) (Flow_SetNamespaceVariableParcelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Flow_ServiceDesc.Streams[0], Flow_SetNamespaceVariableParcels_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flowSetNamespaceVariableParcelsClient{stream}
	return x, nil
}

type Flow_SetNamespaceVariableParcelsClient interface {
	Send(*SetNamespaceVariableRequest) error
	CloseAndRecv() (*SetNamespaceVariableResponse, error)
	grpc.ClientStream
}

type flowSetNamespaceVariableParcelsClient struct {
	grpc.ClientStream
}

func (x *flowSetNamespaceVariableParcelsClient) Send(m *SetNamespaceVariableRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flowSetNamespaceVariableParcelsClient) CloseAndRecv() (*SetNamespaceVariableResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetNamespaceVariableResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowClient) WorkflowVariable(ctx context.Context, in *WorkflowVariableRequest, opts ...grpc.CallOption) (*WorkflowVariableResponse, error) {
	out := new(WorkflowVariableResponse)
	err := c.cc.Invoke(ctx, Flow_WorkflowVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) SetWorkflowVariableParcels(ctx context.Context, opts ...grpc.CallOption) (Flow_SetWorkflowVariableParcelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Flow_ServiceDesc.Streams[1], Flow_SetWorkflowVariableParcels_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flowSetWorkflowVariableParcelsClient{stream}
	return x, nil
}

type Flow_SetWorkflowVariableParcelsClient interface {
	Send(*SetWorkflowVariableRequest) error
	CloseAndRecv() (*SetWorkflowVariableResponse, error)
	grpc.ClientStream
}

type flowSetWorkflowVariableParcelsClient struct {
	grpc.ClientStream
}

func (x *flowSetWorkflowVariableParcelsClient) Send(m *SetWorkflowVariableRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flowSetWorkflowVariableParcelsClient) CloseAndRecv() (*SetWorkflowVariableResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetWorkflowVariableResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowClient) InstanceVariable(ctx context.Context, in *InstanceVariableRequest, opts ...grpc.CallOption) (*InstanceVariableResponse, error) {
	out := new(InstanceVariableResponse)
	err := c.cc.Invoke(ctx, Flow_InstanceVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) SetInstanceVariableParcels(ctx context.Context, opts ...grpc.CallOption) (Flow_SetInstanceVariableParcelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Flow_ServiceDesc.Streams[2], Flow_SetInstanceVariableParcels_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flowSetInstanceVariableParcelsClient{stream}
	return x, nil
}

type Flow_SetInstanceVariableParcelsClient interface {
	Send(*SetInstanceVariableRequest) error
	CloseAndRecv() (*SetInstanceVariableResponse, error)
	grpc.ClientStream
}

type flowSetInstanceVariableParcelsClient struct {
	grpc.ClientStream
}

func (x *flowSetInstanceVariableParcelsClient) Send(m *SetInstanceVariableRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flowSetInstanceVariableParcelsClient) CloseAndRecv() (*SetInstanceVariableResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetInstanceVariableResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlowServer is the server API for Flow service.
// All implementations must embed UnimplementedFlowServer
// for forward compatibility
type FlowServer interface {
	// variables.
	SetNamespaceVariableParcels(Flow_SetNamespaceVariableParcelsServer) error
	WorkflowVariable(context.Context, *WorkflowVariableRequest) (*WorkflowVariableResponse, error)
	SetWorkflowVariableParcels(Flow_SetWorkflowVariableParcelsServer) error
	InstanceVariable(context.Context, *InstanceVariableRequest) (*InstanceVariableResponse, error)
	SetInstanceVariableParcels(Flow_SetInstanceVariableParcelsServer) error
	mustEmbedUnimplementedFlowServer()
}

// UnimplementedFlowServer must be embedded to have forward compatible implementations.
type UnimplementedFlowServer struct {
}

func (UnimplementedFlowServer) SetNamespaceVariableParcels(Flow_SetNamespaceVariableParcelsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetNamespaceVariableParcels not implemented")
}
func (UnimplementedFlowServer) WorkflowVariable(context.Context, *WorkflowVariableRequest) (*WorkflowVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkflowVariable not implemented")
}
func (UnimplementedFlowServer) SetWorkflowVariableParcels(Flow_SetWorkflowVariableParcelsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetWorkflowVariableParcels not implemented")
}
func (UnimplementedFlowServer) InstanceVariable(context.Context, *InstanceVariableRequest) (*InstanceVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceVariable not implemented")
}
func (UnimplementedFlowServer) SetInstanceVariableParcels(Flow_SetInstanceVariableParcelsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetInstanceVariableParcels not implemented")
}
func (UnimplementedFlowServer) mustEmbedUnimplementedFlowServer() {}

// UnsafeFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServer will
// result in compilation errors.
type UnsafeFlowServer interface {
	mustEmbedUnimplementedFlowServer()
}

func RegisterFlowServer(s grpc.ServiceRegistrar, srv FlowServer) {
	s.RegisterService(&Flow_ServiceDesc, srv)
}

func _Flow_SetNamespaceVariableParcels_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlowServer).SetNamespaceVariableParcels(&flowSetNamespaceVariableParcelsServer{stream})
}

type Flow_SetNamespaceVariableParcelsServer interface {
	SendAndClose(*SetNamespaceVariableResponse) error
	Recv() (*SetNamespaceVariableRequest, error)
	grpc.ServerStream
}

type flowSetNamespaceVariableParcelsServer struct {
	grpc.ServerStream
}

func (x *flowSetNamespaceVariableParcelsServer) SendAndClose(m *SetNamespaceVariableResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flowSetNamespaceVariableParcelsServer) Recv() (*SetNamespaceVariableRequest, error) {
	m := new(SetNamespaceVariableRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Flow_WorkflowVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).WorkflowVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_WorkflowVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).WorkflowVariable(ctx, req.(*WorkflowVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_SetWorkflowVariableParcels_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlowServer).SetWorkflowVariableParcels(&flowSetWorkflowVariableParcelsServer{stream})
}

type Flow_SetWorkflowVariableParcelsServer interface {
	SendAndClose(*SetWorkflowVariableResponse) error
	Recv() (*SetWorkflowVariableRequest, error)
	grpc.ServerStream
}

type flowSetWorkflowVariableParcelsServer struct {
	grpc.ServerStream
}

func (x *flowSetWorkflowVariableParcelsServer) SendAndClose(m *SetWorkflowVariableResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flowSetWorkflowVariableParcelsServer) Recv() (*SetWorkflowVariableRequest, error) {
	m := new(SetWorkflowVariableRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Flow_InstanceVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).InstanceVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_InstanceVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).InstanceVariable(ctx, req.(*InstanceVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_SetInstanceVariableParcels_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlowServer).SetInstanceVariableParcels(&flowSetInstanceVariableParcelsServer{stream})
}

type Flow_SetInstanceVariableParcelsServer interface {
	SendAndClose(*SetInstanceVariableResponse) error
	Recv() (*SetInstanceVariableRequest, error)
	grpc.ServerStream
}

type flowSetInstanceVariableParcelsServer struct {
	grpc.ServerStream
}

func (x *flowSetInstanceVariableParcelsServer) SendAndClose(m *SetInstanceVariableResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flowSetInstanceVariableParcelsServer) Recv() (*SetInstanceVariableRequest, error) {
	m := new(SetInstanceVariableRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Flow_ServiceDesc is the grpc.ServiceDesc for Flow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "direktiv_flow.Flow",
	HandlerType: (*FlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WorkflowVariable",
			Handler:    _Flow_WorkflowVariable_Handler,
		},
		{
			MethodName: "InstanceVariable",
			Handler:    _Flow_InstanceVariable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetNamespaceVariableParcels",
			Handler:       _Flow_SetNamespaceVariableParcels_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SetWorkflowVariableParcels",
			Handler:       _Flow_SetWorkflowVariableParcels_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SetInstanceVariableParcels",
			Handler:       _Flow_SetInstanceVariableParcels_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/flow/grpc/protocol.proto",
}

const (
	Internal_ReportActionResults_FullMethodName = "/direktiv_flow.Internal/ReportActionResults"
	Internal_ActionLog_FullMethodName           = "/direktiv_flow.Internal/ActionLog"
)

// InternalClient is the client API for Internal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalClient interface {
	ReportActionResults(ctx context.Context, in *ReportActionResultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ActionLog(ctx context.Context, in *ActionLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type internalClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalClient(cc grpc.ClientConnInterface) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) ReportActionResults(ctx context.Context, in *ReportActionResultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Internal_ReportActionResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ActionLog(ctx context.Context, in *ActionLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Internal_ActionLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServer is the server API for Internal service.
// All implementations must embed UnimplementedInternalServer
// for forward compatibility
type InternalServer interface {
	ReportActionResults(context.Context, *ReportActionResultsRequest) (*emptypb.Empty, error)
	ActionLog(context.Context, *ActionLogRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInternalServer()
}

// UnimplementedInternalServer must be embedded to have forward compatible implementations.
type UnimplementedInternalServer struct {
}

func (UnimplementedInternalServer) ReportActionResults(context.Context, *ReportActionResultsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportActionResults not implemented")
}
func (UnimplementedInternalServer) ActionLog(context.Context, *ActionLogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionLog not implemented")
}
func (UnimplementedInternalServer) mustEmbedUnimplementedInternalServer() {}

// UnsafeInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalServer will
// result in compilation errors.
type UnsafeInternalServer interface {
	mustEmbedUnimplementedInternalServer()
}

func RegisterInternalServer(s grpc.ServiceRegistrar, srv InternalServer) {
	s.RegisterService(&Internal_ServiceDesc, srv)
}

func _Internal_ReportActionResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportActionResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ReportActionResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_ReportActionResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ReportActionResults(ctx, req.(*ReportActionResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ActionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ActionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_ActionLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ActionLog(ctx, req.(*ActionLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Internal_ServiceDesc is the grpc.ServiceDesc for Internal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Internal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "direktiv_flow.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportActionResults",
			Handler:    _Internal_ReportActionResults_Handler,
		},
		{
			MethodName: "ActionLog",
			Handler:    _Internal_ActionLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/flow/grpc/protocol.proto",
}
