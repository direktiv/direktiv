// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/instanceruntime"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
)

// InstanceRuntimeDelete is the builder for deleting a InstanceRuntime entity.
type InstanceRuntimeDelete struct {
	config
	hooks    []Hook
	mutation *InstanceRuntimeMutation
}

// Where appends a list predicates to the InstanceRuntimeDelete builder.
func (ird *InstanceRuntimeDelete) Where(ps ...predicate.InstanceRuntime) *InstanceRuntimeDelete {
	ird.mutation.Where(ps...)
	return ird
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ird *InstanceRuntimeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, InstanceRuntimeMutation](ctx, ird.sqlExec, ird.mutation, ird.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ird *InstanceRuntimeDelete) ExecX(ctx context.Context) int {
	n, err := ird.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ird *InstanceRuntimeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(instanceruntime.Table, sqlgraph.NewFieldSpec(instanceruntime.FieldID, field.TypeUUID))
	if ps := ird.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ird.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ird.mutation.done = true
	return affected, err
}

// InstanceRuntimeDeleteOne is the builder for deleting a single InstanceRuntime entity.
type InstanceRuntimeDeleteOne struct {
	ird *InstanceRuntimeDelete
}

// Where appends a list predicates to the InstanceRuntimeDelete builder.
func (irdo *InstanceRuntimeDeleteOne) Where(ps ...predicate.InstanceRuntime) *InstanceRuntimeDeleteOne {
	irdo.ird.mutation.Where(ps...)
	return irdo
}

// Exec executes the deletion query.
func (irdo *InstanceRuntimeDeleteOne) Exec(ctx context.Context) error {
	n, err := irdo.ird.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{instanceruntime.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (irdo *InstanceRuntimeDeleteOne) ExecX(ctx context.Context) {
	if err := irdo.Exec(ctx); err != nil {
		panic(err)
	}
}
