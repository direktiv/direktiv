// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/pkg/flow/ent/revision"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// Revision is the model entity for the Revision schema.
type Revision struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Source holds the value of the "source" field.
	Source []byte `json:"source,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RevisionQuery when eager-loading is set.
	Edges              RevisionEdges `json:"edges"`
	workflow_revisions *uuid.UUID
}

// RevisionEdges holds the relations/edges for other nodes in the graph.
type RevisionEdges struct {
	// Workflow holds the value of the workflow edge.
	Workflow *Workflow `json:"workflow,omitempty"`
	// Refs holds the value of the refs edge.
	Refs []*Ref `json:"refs,omitempty"`
	// Instances holds the value of the instances edge.
	Instances []*Instance `json:"instances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RevisionEdges) WorkflowOrErr() (*Workflow, error) {
	if e.loadedTypes[0] {
		if e.Workflow == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workflow.Label}
		}
		return e.Workflow, nil
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// RefsOrErr returns the Refs value or an error if the edge
// was not loaded in eager-loading.
func (e RevisionEdges) RefsOrErr() ([]*Ref, error) {
	if e.loadedTypes[1] {
		return e.Refs, nil
	}
	return nil, &NotLoadedError{edge: "refs"}
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e RevisionEdges) InstancesOrErr() ([]*Instance, error) {
	if e.loadedTypes[2] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Revision) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case revision.FieldSource, revision.FieldMetadata:
			values[i] = new([]byte)
		case revision.FieldHash:
			values[i] = new(sql.NullString)
		case revision.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case revision.FieldID:
			values[i] = new(uuid.UUID)
		case revision.ForeignKeys[0]: // workflow_revisions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Revision", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Revision fields.
func (r *Revision) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case revision.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case revision.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case revision.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				r.Hash = value.String
			}
		case revision.FieldSource:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value != nil {
				r.Source = *value
			}
		case revision.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case revision.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_revisions", values[i])
			} else if value.Valid {
				r.workflow_revisions = new(uuid.UUID)
				*r.workflow_revisions = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryWorkflow queries the "workflow" edge of the Revision entity.
func (r *Revision) QueryWorkflow() *WorkflowQuery {
	return (&RevisionClient{config: r.config}).QueryWorkflow(r)
}

// QueryRefs queries the "refs" edge of the Revision entity.
func (r *Revision) QueryRefs() *RefQuery {
	return (&RevisionClient{config: r.config}).QueryRefs(r)
}

// QueryInstances queries the "instances" edge of the Revision entity.
func (r *Revision) QueryInstances() *InstanceQuery {
	return (&RevisionClient{config: r.config}).QueryInstances(r)
}

// Update returns a builder for updating this Revision.
// Note that you need to call Revision.Unwrap() before calling this method if this Revision
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Revision) Update() *RevisionUpdateOne {
	return (&RevisionClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Revision entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Revision) Unwrap() *Revision {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Revision is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Revision) String() string {
	var builder strings.Builder
	builder.WriteString("Revision(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(r.Hash)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", r.Source))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", r.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Revisions is a parsable slice of Revision.
type Revisions []*Revision

func (r Revisions) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
