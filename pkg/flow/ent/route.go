// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/pkg/flow/ent/ref"
	"github.com/direktiv/direktiv/pkg/flow/ent/route"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// Route is the model entity for the Route schema.
type Route struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"-"`
	// Weight holds the value of the "weight" field.
	Weight int `json:"weight,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RouteQuery when eager-loading is set.
	Edges           RouteEdges `json:"edges"`
	ref_routes      *uuid.UUID
	workflow_routes *uuid.UUID
}

// RouteEdges holds the relations/edges for other nodes in the graph.
type RouteEdges struct {
	// Workflow holds the value of the workflow edge.
	Workflow *Workflow `json:"workflow,omitempty"`
	// Ref holds the value of the ref edge.
	Ref *Ref `json:"ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RouteEdges) WorkflowOrErr() (*Workflow, error) {
	if e.loadedTypes[0] {
		if e.Workflow == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workflow.Label}
		}
		return e.Workflow, nil
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// RefOrErr returns the Ref value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RouteEdges) RefOrErr() (*Ref, error) {
	if e.loadedTypes[1] {
		if e.Ref == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ref.Label}
		}
		return e.Ref, nil
	}
	return nil, &NotLoadedError{edge: "ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Route) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case route.FieldWeight:
			values[i] = new(sql.NullInt64)
		case route.FieldID:
			values[i] = new(uuid.UUID)
		case route.ForeignKeys[0]: // ref_routes
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case route.ForeignKeys[1]: // workflow_routes
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Route", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Route fields.
func (r *Route) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case route.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case route.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				r.Weight = int(value.Int64)
			}
		case route.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field ref_routes", values[i])
			} else if value.Valid {
				r.ref_routes = new(uuid.UUID)
				*r.ref_routes = *value.S.(*uuid.UUID)
			}
		case route.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_routes", values[i])
			} else if value.Valid {
				r.workflow_routes = new(uuid.UUID)
				*r.workflow_routes = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryWorkflow queries the "workflow" edge of the Route entity.
func (r *Route) QueryWorkflow() *WorkflowQuery {
	return (&RouteClient{config: r.config}).QueryWorkflow(r)
}

// QueryRef queries the "ref" edge of the Route entity.
func (r *Route) QueryRef() *RefQuery {
	return (&RouteClient{config: r.config}).QueryRef(r)
}

// Update returns a builder for updating this Route.
// Note that you need to call Route.Unwrap() before calling this method if this Route
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Route) Update() *RouteUpdateOne {
	return (&RouteClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Route entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Route) Unwrap() *Route {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Route is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Route) String() string {
	var builder strings.Builder
	builder.WriteString("Route(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", r.Weight))
	builder.WriteByte(')')
	return builder.String()
}

// Routes is a parsable slice of Route.
type Routes []*Route

func (r Routes) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
