// Code generated by ent, DO NOT EDIT.

package logmsg

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLTE(FieldID, id))
}

// T applies equality check predicate on the "t" field. It's identical to TEQ.
func T(v time.Time) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldT, v))
}

// Msg applies equality check predicate on the "msg" field. It's identical to MsgEQ.
func Msg(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldMsg, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldLevel, v))
}

// RootInstanceId applies equality check predicate on the "rootInstanceId" field. It's identical to RootInstanceIdEQ.
func RootInstanceId(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldRootInstanceId, v))
}

// LogInstanceCallPath applies equality check predicate on the "logInstanceCallPath" field. It's identical to LogInstanceCallPathEQ.
func LogInstanceCallPath(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldLogInstanceCallPath, v))
}

// WorkflowID applies equality check predicate on the "workflow_id" field. It's identical to WorkflowIDEQ.
func WorkflowID(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldWorkflowID, v))
}

// MirrorActivityID applies equality check predicate on the "mirror_activity_id" field. It's identical to MirrorActivityIDEQ.
func MirrorActivityID(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldMirrorActivityID, v))
}

// TEQ applies the EQ predicate on the "t" field.
func TEQ(v time.Time) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldT, v))
}

// TNEQ applies the NEQ predicate on the "t" field.
func TNEQ(v time.Time) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNEQ(FieldT, v))
}

// TIn applies the In predicate on the "t" field.
func TIn(vs ...time.Time) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIn(FieldT, vs...))
}

// TNotIn applies the NotIn predicate on the "t" field.
func TNotIn(vs ...time.Time) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotIn(FieldT, vs...))
}

// TGT applies the GT predicate on the "t" field.
func TGT(v time.Time) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGT(FieldT, v))
}

// TGTE applies the GTE predicate on the "t" field.
func TGTE(v time.Time) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGTE(FieldT, v))
}

// TLT applies the LT predicate on the "t" field.
func TLT(v time.Time) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLT(FieldT, v))
}

// TLTE applies the LTE predicate on the "t" field.
func TLTE(v time.Time) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLTE(FieldT, v))
}

// MsgEQ applies the EQ predicate on the "msg" field.
func MsgEQ(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldMsg, v))
}

// MsgNEQ applies the NEQ predicate on the "msg" field.
func MsgNEQ(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNEQ(FieldMsg, v))
}

// MsgIn applies the In predicate on the "msg" field.
func MsgIn(vs ...string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIn(FieldMsg, vs...))
}

// MsgNotIn applies the NotIn predicate on the "msg" field.
func MsgNotIn(vs ...string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotIn(FieldMsg, vs...))
}

// MsgGT applies the GT predicate on the "msg" field.
func MsgGT(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGT(FieldMsg, v))
}

// MsgGTE applies the GTE predicate on the "msg" field.
func MsgGTE(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGTE(FieldMsg, v))
}

// MsgLT applies the LT predicate on the "msg" field.
func MsgLT(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLT(FieldMsg, v))
}

// MsgLTE applies the LTE predicate on the "msg" field.
func MsgLTE(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLTE(FieldMsg, v))
}

// MsgContains applies the Contains predicate on the "msg" field.
func MsgContains(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldContains(FieldMsg, v))
}

// MsgHasPrefix applies the HasPrefix predicate on the "msg" field.
func MsgHasPrefix(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldHasPrefix(FieldMsg, v))
}

// MsgHasSuffix applies the HasSuffix predicate on the "msg" field.
func MsgHasSuffix(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldHasSuffix(FieldMsg, v))
}

// MsgEqualFold applies the EqualFold predicate on the "msg" field.
func MsgEqualFold(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEqualFold(FieldMsg, v))
}

// MsgContainsFold applies the ContainsFold predicate on the "msg" field.
func MsgContainsFold(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldContainsFold(FieldMsg, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLTE(FieldLevel, v))
}

// LevelContains applies the Contains predicate on the "level" field.
func LevelContains(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldContains(FieldLevel, v))
}

// LevelHasPrefix applies the HasPrefix predicate on the "level" field.
func LevelHasPrefix(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldHasPrefix(FieldLevel, v))
}

// LevelHasSuffix applies the HasSuffix predicate on the "level" field.
func LevelHasSuffix(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldHasSuffix(FieldLevel, v))
}

// LevelEqualFold applies the EqualFold predicate on the "level" field.
func LevelEqualFold(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEqualFold(FieldLevel, v))
}

// LevelContainsFold applies the ContainsFold predicate on the "level" field.
func LevelContainsFold(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldContainsFold(FieldLevel, v))
}

// RootInstanceIdEQ applies the EQ predicate on the "rootInstanceId" field.
func RootInstanceIdEQ(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldRootInstanceId, v))
}

// RootInstanceIdNEQ applies the NEQ predicate on the "rootInstanceId" field.
func RootInstanceIdNEQ(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNEQ(FieldRootInstanceId, v))
}

// RootInstanceIdIn applies the In predicate on the "rootInstanceId" field.
func RootInstanceIdIn(vs ...string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIn(FieldRootInstanceId, vs...))
}

// RootInstanceIdNotIn applies the NotIn predicate on the "rootInstanceId" field.
func RootInstanceIdNotIn(vs ...string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotIn(FieldRootInstanceId, vs...))
}

// RootInstanceIdGT applies the GT predicate on the "rootInstanceId" field.
func RootInstanceIdGT(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGT(FieldRootInstanceId, v))
}

// RootInstanceIdGTE applies the GTE predicate on the "rootInstanceId" field.
func RootInstanceIdGTE(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGTE(FieldRootInstanceId, v))
}

// RootInstanceIdLT applies the LT predicate on the "rootInstanceId" field.
func RootInstanceIdLT(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLT(FieldRootInstanceId, v))
}

// RootInstanceIdLTE applies the LTE predicate on the "rootInstanceId" field.
func RootInstanceIdLTE(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLTE(FieldRootInstanceId, v))
}

// RootInstanceIdContains applies the Contains predicate on the "rootInstanceId" field.
func RootInstanceIdContains(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldContains(FieldRootInstanceId, v))
}

// RootInstanceIdHasPrefix applies the HasPrefix predicate on the "rootInstanceId" field.
func RootInstanceIdHasPrefix(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldHasPrefix(FieldRootInstanceId, v))
}

// RootInstanceIdHasSuffix applies the HasSuffix predicate on the "rootInstanceId" field.
func RootInstanceIdHasSuffix(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldHasSuffix(FieldRootInstanceId, v))
}

// RootInstanceIdEqualFold applies the EqualFold predicate on the "rootInstanceId" field.
func RootInstanceIdEqualFold(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEqualFold(FieldRootInstanceId, v))
}

// RootInstanceIdContainsFold applies the ContainsFold predicate on the "rootInstanceId" field.
func RootInstanceIdContainsFold(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldContainsFold(FieldRootInstanceId, v))
}

// LogInstanceCallPathEQ applies the EQ predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathEQ(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathNEQ applies the NEQ predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathNEQ(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNEQ(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathIn applies the In predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathIn(vs ...string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIn(FieldLogInstanceCallPath, vs...))
}

// LogInstanceCallPathNotIn applies the NotIn predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathNotIn(vs ...string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotIn(FieldLogInstanceCallPath, vs...))
}

// LogInstanceCallPathGT applies the GT predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathGT(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGT(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathGTE applies the GTE predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathGTE(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGTE(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathLT applies the LT predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathLT(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLT(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathLTE applies the LTE predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathLTE(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLTE(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathContains applies the Contains predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathContains(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldContains(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathHasPrefix applies the HasPrefix predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathHasPrefix(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldHasPrefix(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathHasSuffix applies the HasSuffix predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathHasSuffix(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldHasSuffix(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathEqualFold applies the EqualFold predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathEqualFold(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEqualFold(FieldLogInstanceCallPath, v))
}

// LogInstanceCallPathContainsFold applies the ContainsFold predicate on the "logInstanceCallPath" field.
func LogInstanceCallPathContainsFold(v string) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldContainsFold(FieldLogInstanceCallPath, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotNull(FieldTags))
}

// WorkflowIDEQ applies the EQ predicate on the "workflow_id" field.
func WorkflowIDEQ(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldWorkflowID, v))
}

// WorkflowIDNEQ applies the NEQ predicate on the "workflow_id" field.
func WorkflowIDNEQ(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNEQ(FieldWorkflowID, v))
}

// WorkflowIDIn applies the In predicate on the "workflow_id" field.
func WorkflowIDIn(vs ...uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIn(FieldWorkflowID, vs...))
}

// WorkflowIDNotIn applies the NotIn predicate on the "workflow_id" field.
func WorkflowIDNotIn(vs ...uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotIn(FieldWorkflowID, vs...))
}

// WorkflowIDGT applies the GT predicate on the "workflow_id" field.
func WorkflowIDGT(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGT(FieldWorkflowID, v))
}

// WorkflowIDGTE applies the GTE predicate on the "workflow_id" field.
func WorkflowIDGTE(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGTE(FieldWorkflowID, v))
}

// WorkflowIDLT applies the LT predicate on the "workflow_id" field.
func WorkflowIDLT(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLT(FieldWorkflowID, v))
}

// WorkflowIDLTE applies the LTE predicate on the "workflow_id" field.
func WorkflowIDLTE(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLTE(FieldWorkflowID, v))
}

// WorkflowIDIsNil applies the IsNil predicate on the "workflow_id" field.
func WorkflowIDIsNil() predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIsNull(FieldWorkflowID))
}

// WorkflowIDNotNil applies the NotNil predicate on the "workflow_id" field.
func WorkflowIDNotNil() predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotNull(FieldWorkflowID))
}

// MirrorActivityIDEQ applies the EQ predicate on the "mirror_activity_id" field.
func MirrorActivityIDEQ(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldEQ(FieldMirrorActivityID, v))
}

// MirrorActivityIDNEQ applies the NEQ predicate on the "mirror_activity_id" field.
func MirrorActivityIDNEQ(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNEQ(FieldMirrorActivityID, v))
}

// MirrorActivityIDIn applies the In predicate on the "mirror_activity_id" field.
func MirrorActivityIDIn(vs ...uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIn(FieldMirrorActivityID, vs...))
}

// MirrorActivityIDNotIn applies the NotIn predicate on the "mirror_activity_id" field.
func MirrorActivityIDNotIn(vs ...uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotIn(FieldMirrorActivityID, vs...))
}

// MirrorActivityIDGT applies the GT predicate on the "mirror_activity_id" field.
func MirrorActivityIDGT(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGT(FieldMirrorActivityID, v))
}

// MirrorActivityIDGTE applies the GTE predicate on the "mirror_activity_id" field.
func MirrorActivityIDGTE(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldGTE(FieldMirrorActivityID, v))
}

// MirrorActivityIDLT applies the LT predicate on the "mirror_activity_id" field.
func MirrorActivityIDLT(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLT(FieldMirrorActivityID, v))
}

// MirrorActivityIDLTE applies the LTE predicate on the "mirror_activity_id" field.
func MirrorActivityIDLTE(v uuid.UUID) predicate.LogMsg {
	return predicate.LogMsg(sql.FieldLTE(FieldMirrorActivityID, v))
}

// MirrorActivityIDIsNil applies the IsNil predicate on the "mirror_activity_id" field.
func MirrorActivityIDIsNil() predicate.LogMsg {
	return predicate.LogMsg(sql.FieldIsNull(FieldMirrorActivityID))
}

// MirrorActivityIDNotNil applies the NotNil predicate on the "mirror_activity_id" field.
func MirrorActivityIDNotNil() predicate.LogMsg {
	return predicate.LogMsg(sql.FieldNotNull(FieldMirrorActivityID))
}

// HasNamespace applies the HasEdge predicate on the "namespace" edge.
func HasNamespace() predicate.LogMsg {
	return predicate.LogMsg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NamespaceTable, NamespaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNamespaceWith applies the HasEdge predicate on the "namespace" edge with a given conditions (other predicates).
func HasNamespaceWith(preds ...predicate.Namespace) predicate.LogMsg {
	return predicate.LogMsg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NamespaceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NamespaceTable, NamespaceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstance applies the HasEdge predicate on the "instance" edge.
func HasInstance() predicate.LogMsg {
	return predicate.LogMsg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstanceWith applies the HasEdge predicate on the "instance" edge with a given conditions (other predicates).
func HasInstanceWith(preds ...predicate.Instance) predicate.LogMsg {
	return predicate.LogMsg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstanceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LogMsg) predicate.LogMsg {
	return predicate.LogMsg(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LogMsg) predicate.LogMsg {
	return predicate.LogMsg(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LogMsg) predicate.LogMsg {
	return predicate.LogMsg(func(s *sql.Selector) {
		p(s.Not())
	})
}
