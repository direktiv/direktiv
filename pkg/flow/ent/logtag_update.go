// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/logtag"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
)

// LogTagUpdate is the builder for updating LogTag entities.
type LogTagUpdate struct {
	config
	hooks     []Hook
	mutation  *LogTagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LogTagUpdate builder.
func (ltu *LogTagUpdate) Where(ps ...predicate.LogTag) *LogTagUpdate {
	ltu.mutation.Where(ps...)
	return ltu
}

// SetType sets the "type" field.
func (ltu *LogTagUpdate) SetType(s string) *LogTagUpdate {
	ltu.mutation.SetType(s)
	return ltu
}

// SetValue sets the "value" field.
func (ltu *LogTagUpdate) SetValue(s string) *LogTagUpdate {
	ltu.mutation.SetValue(s)
	return ltu
}

// Mutation returns the LogTagMutation object of the builder.
func (ltu *LogTagUpdate) Mutation() *LogTagMutation {
	return ltu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltu *LogTagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ltu.hooks) == 0 {
		if err = ltu.check(); err != nil {
			return 0, err
		}
		affected, err = ltu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ltu.check(); err != nil {
				return 0, err
			}
			ltu.mutation = mutation
			affected, err = ltu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ltu.hooks) - 1; i >= 0; i-- {
			if ltu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ltu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ltu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ltu *LogTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltu *LogTagUpdate) Exec(ctx context.Context) error {
	_, err := ltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltu *LogTagUpdate) ExecX(ctx context.Context) {
	if err := ltu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltu *LogTagUpdate) check() error {
	if _, ok := ltu.mutation.LogmsgID(); ltu.mutation.LogmsgCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LogTag.logmsg"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ltu *LogTagUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LogTagUpdate {
	ltu.modifiers = append(ltu.modifiers, modifiers...)
	return ltu
}

func (ltu *LogTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   logtag.Table,
			Columns: logtag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: logtag.FieldID,
			},
		},
	}
	if ps := ltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltu.mutation.GetType(); ok {
		_spec.SetField(logtag.FieldType, field.TypeString, value)
	}
	if value, ok := ltu.mutation.Value(); ok {
		_spec.SetField(logtag.FieldValue, field.TypeString, value)
	}
	_spec.AddModifiers(ltu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LogTagUpdateOne is the builder for updating a single LogTag entity.
type LogTagUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LogTagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetType sets the "type" field.
func (ltuo *LogTagUpdateOne) SetType(s string) *LogTagUpdateOne {
	ltuo.mutation.SetType(s)
	return ltuo
}

// SetValue sets the "value" field.
func (ltuo *LogTagUpdateOne) SetValue(s string) *LogTagUpdateOne {
	ltuo.mutation.SetValue(s)
	return ltuo
}

// Mutation returns the LogTagMutation object of the builder.
func (ltuo *LogTagUpdateOne) Mutation() *LogTagMutation {
	return ltuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltuo *LogTagUpdateOne) Select(field string, fields ...string) *LogTagUpdateOne {
	ltuo.fields = append([]string{field}, fields...)
	return ltuo
}

// Save executes the query and returns the updated LogTag entity.
func (ltuo *LogTagUpdateOne) Save(ctx context.Context) (*LogTag, error) {
	var (
		err  error
		node *LogTag
	)
	if len(ltuo.hooks) == 0 {
		if err = ltuo.check(); err != nil {
			return nil, err
		}
		node, err = ltuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ltuo.check(); err != nil {
				return nil, err
			}
			ltuo.mutation = mutation
			node, err = ltuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ltuo.hooks) - 1; i >= 0; i-- {
			if ltuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ltuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ltuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LogTag)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LogTagMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ltuo *LogTagUpdateOne) SaveX(ctx context.Context) *LogTag {
	node, err := ltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltuo *LogTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltuo *LogTagUpdateOne) ExecX(ctx context.Context) {
	if err := ltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltuo *LogTagUpdateOne) check() error {
	if _, ok := ltuo.mutation.LogmsgID(); ltuo.mutation.LogmsgCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LogTag.logmsg"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ltuo *LogTagUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LogTagUpdateOne {
	ltuo.modifiers = append(ltuo.modifiers, modifiers...)
	return ltuo
}

func (ltuo *LogTagUpdateOne) sqlSave(ctx context.Context) (_node *LogTag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   logtag.Table,
			Columns: logtag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: logtag.FieldID,
			},
		},
	}
	id, ok := ltuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LogTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logtag.FieldID)
		for _, f := range fields {
			if !logtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltuo.mutation.GetType(); ok {
		_spec.SetField(logtag.FieldType, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.Value(); ok {
		_spec.SetField(logtag.FieldValue, field.TypeString, value)
	}
	_spec.AddModifiers(ltuo.modifiers...)
	_node = &LogTag{config: ltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
