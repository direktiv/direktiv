// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/ref"
	"github.com/direktiv/direktiv/pkg/flow/ent/revision"
	"github.com/direktiv/direktiv/pkg/flow/ent/route"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// RefCreate is the builder for creating a Ref entity.
type RefCreate struct {
	config
	mutation *RefMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetImmutable sets the "immutable" field.
func (rc *RefCreate) SetImmutable(b bool) *RefCreate {
	rc.mutation.SetImmutable(b)
	return rc
}

// SetNillableImmutable sets the "immutable" field if the given value is not nil.
func (rc *RefCreate) SetNillableImmutable(b *bool) *RefCreate {
	if b != nil {
		rc.SetImmutable(*b)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RefCreate) SetName(s string) *RefCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RefCreate) SetCreatedAt(t time.Time) *RefCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RefCreate) SetNillableCreatedAt(t *time.Time) *RefCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RefCreate) SetID(u uuid.UUID) *RefCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RefCreate) SetNillableID(u *uuid.UUID) *RefCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (rc *RefCreate) SetWorkflowID(id uuid.UUID) *RefCreate {
	rc.mutation.SetWorkflowID(id)
	return rc
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (rc *RefCreate) SetWorkflow(w *Workflow) *RefCreate {
	return rc.SetWorkflowID(w.ID)
}

// SetRevisionID sets the "revision" edge to the Revision entity by ID.
func (rc *RefCreate) SetRevisionID(id uuid.UUID) *RefCreate {
	rc.mutation.SetRevisionID(id)
	return rc
}

// SetRevision sets the "revision" edge to the Revision entity.
func (rc *RefCreate) SetRevision(r *Revision) *RefCreate {
	return rc.SetRevisionID(r.ID)
}

// AddRouteIDs adds the "routes" edge to the Route entity by IDs.
func (rc *RefCreate) AddRouteIDs(ids ...uuid.UUID) *RefCreate {
	rc.mutation.AddRouteIDs(ids...)
	return rc
}

// AddRoutes adds the "routes" edges to the Route entity.
func (rc *RefCreate) AddRoutes(r ...*Route) *RefCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRouteIDs(ids...)
}

// Mutation returns the RefMutation object of the builder.
func (rc *RefCreate) Mutation() *RefMutation {
	return rc.mutation
}

// Save creates the Ref in the database.
func (rc *RefCreate) Save(ctx context.Context) (*Ref, error) {
	var (
		err  error
		node *Ref
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RefMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ref)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RefMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RefCreate) SaveX(ctx context.Context) *Ref {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RefCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RefCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RefCreate) defaults() {
	if _, ok := rc.mutation.Immutable(); !ok {
		v := ref.DefaultImmutable
		rc.mutation.SetImmutable(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := ref.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := ref.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RefCreate) check() error {
	if _, ok := rc.mutation.Immutable(); !ok {
		return &ValidationError{Name: "immutable", err: errors.New(`ent: missing required field "Ref.immutable"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Ref.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := ref.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Ref.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Ref.created_at"`)}
	}
	if _, ok := rc.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow", err: errors.New(`ent: missing required edge "Ref.workflow"`)}
	}
	if _, ok := rc.mutation.RevisionID(); !ok {
		return &ValidationError{Name: "revision", err: errors.New(`ent: missing required edge "Ref.revision"`)}
	}
	return nil
}

func (rc *RefCreate) sqlSave(ctx context.Context) (*Ref, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rc *RefCreate) createSpec() (*Ref, *sqlgraph.CreateSpec) {
	var (
		_node = &Ref{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ref.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ref.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.Immutable(); ok {
		_spec.SetField(ref.FieldImmutable, field.TypeBool, value)
		_node.Immutable = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(ref.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(ref.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rc.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ref.WorkflowTable,
			Columns: []string{ref.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_refs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RevisionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ref.RevisionTable,
			Columns: []string{ref.RevisionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.revision_refs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RoutesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ref.RoutesTable,
			Columns: []string{ref.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: route.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ref.Create().
//		SetImmutable(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RefUpsert) {
//			SetImmutable(v+v).
//		}).
//		Exec(ctx)
func (rc *RefCreate) OnConflict(opts ...sql.ConflictOption) *RefUpsertOne {
	rc.conflict = opts
	return &RefUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ref.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RefCreate) OnConflictColumns(columns ...string) *RefUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RefUpsertOne{
		create: rc,
	}
}

type (
	// RefUpsertOne is the builder for "upsert"-ing
	//  one Ref node.
	RefUpsertOne struct {
		create *RefCreate
	}

	// RefUpsert is the "OnConflict" setter.
	RefUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Ref.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ref.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RefUpsertOne) UpdateNewValues() *RefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ref.FieldID)
		}
		if _, exists := u.create.mutation.Immutable(); exists {
			s.SetIgnore(ref.FieldImmutable)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(ref.FieldName)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ref.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ref.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RefUpsertOne) Ignore() *RefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RefUpsertOne) DoNothing() *RefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RefCreate.OnConflict
// documentation for more info.
func (u *RefUpsertOne) Update(set func(*RefUpsert)) *RefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RefUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *RefUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RefCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RefUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RefUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RefUpsertOne.ID is not supported by MySQL driver. Use RefUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RefUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RefCreateBulk is the builder for creating many Ref entities in bulk.
type RefCreateBulk struct {
	config
	builders []*RefCreate
	conflict []sql.ConflictOption
}

// Save creates the Ref entities in the database.
func (rcb *RefCreateBulk) Save(ctx context.Context) ([]*Ref, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Ref, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RefMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RefCreateBulk) SaveX(ctx context.Context) []*Ref {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RefCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RefCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ref.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RefUpsert) {
//			SetImmutable(v+v).
//		}).
//		Exec(ctx)
func (rcb *RefCreateBulk) OnConflict(opts ...sql.ConflictOption) *RefUpsertBulk {
	rcb.conflict = opts
	return &RefUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ref.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RefCreateBulk) OnConflictColumns(columns ...string) *RefUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RefUpsertBulk{
		create: rcb,
	}
}

// RefUpsertBulk is the builder for "upsert"-ing
// a bulk of Ref nodes.
type RefUpsertBulk struct {
	create *RefCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ref.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ref.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RefUpsertBulk) UpdateNewValues() *RefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ref.FieldID)
			}
			if _, exists := b.mutation.Immutable(); exists {
				s.SetIgnore(ref.FieldImmutable)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(ref.FieldName)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ref.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ref.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RefUpsertBulk) Ignore() *RefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RefUpsertBulk) DoNothing() *RefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RefCreateBulk.OnConflict
// documentation for more info.
func (u *RefUpsertBulk) Update(set func(*RefUpsert)) *RefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RefUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *RefUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RefCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RefCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RefUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
