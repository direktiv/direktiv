// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/cloudeventfilters"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
)

// CloudEventFiltersDelete is the builder for deleting a CloudEventFilters entity.
type CloudEventFiltersDelete struct {
	config
	hooks    []Hook
	mutation *CloudEventFiltersMutation
}

// Where appends a list predicates to the CloudEventFiltersDelete builder.
func (cefd *CloudEventFiltersDelete) Where(ps ...predicate.CloudEventFilters) *CloudEventFiltersDelete {
	cefd.mutation.Where(ps...)
	return cefd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cefd *CloudEventFiltersDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, CloudEventFiltersMutation](ctx, cefd.sqlExec, cefd.mutation, cefd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cefd *CloudEventFiltersDelete) ExecX(ctx context.Context) int {
	n, err := cefd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cefd *CloudEventFiltersDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(cloudeventfilters.Table, sqlgraph.NewFieldSpec(cloudeventfilters.FieldID, field.TypeInt))
	if ps := cefd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cefd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cefd.mutation.done = true
	return affected, err
}

// CloudEventFiltersDeleteOne is the builder for deleting a single CloudEventFilters entity.
type CloudEventFiltersDeleteOne struct {
	cefd *CloudEventFiltersDelete
}

// Where appends a list predicates to the CloudEventFiltersDelete builder.
func (cefdo *CloudEventFiltersDeleteOne) Where(ps ...predicate.CloudEventFilters) *CloudEventFiltersDeleteOne {
	cefdo.cefd.mutation.Where(ps...)
	return cefdo
}

// Exec executes the deletion query.
func (cefdo *CloudEventFiltersDeleteOne) Exec(ctx context.Context) error {
	n, err := cefdo.cefd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{cloudeventfilters.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cefdo *CloudEventFiltersDeleteOne) ExecX(ctx context.Context) {
	if err := cefdo.Exec(ctx); err != nil {
		panic(err)
	}
}
