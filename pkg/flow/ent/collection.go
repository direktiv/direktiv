// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ce *CloudEventsQuery) CollectFields(ctx context.Context, satisfies ...string) *CloudEventsQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ce = ce.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ce
}

func (ce *CloudEventsQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CloudEventsQuery {
	return ce
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *EventsQuery) CollectFields(ctx context.Context, satisfies ...string) *EventsQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		e = e.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return e
}

func (e *EventsQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *EventsQuery {
	return e
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ew *EventsWaitQuery) CollectFields(ctx context.Context, satisfies ...string) *EventsWaitQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ew = ew.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ew
}

func (ew *EventsWaitQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *EventsWaitQuery {
	return ew
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *InodeQuery) CollectFields(ctx context.Context, satisfies ...string) *InodeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return i
}

func (i *InodeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *InodeQuery {
	return i
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *InstanceQuery) CollectFields(ctx context.Context, satisfies ...string) *InstanceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return i
}

func (i *InstanceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *InstanceQuery {
	return i
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ir *InstanceRuntimeQuery) CollectFields(ctx context.Context, satisfies ...string) *InstanceRuntimeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ir = ir.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ir
}

func (ir *InstanceRuntimeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *InstanceRuntimeQuery {
	return ir
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (lm *LogMsgQuery) CollectFields(ctx context.Context, satisfies ...string) *LogMsgQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		lm = lm.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return lm
}

func (lm *LogMsgQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *LogMsgQuery {
	return lm
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (n *NamespaceQuery) CollectFields(ctx context.Context, satisfies ...string) *NamespaceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		n = n.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return n
}

func (n *NamespaceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *NamespaceQuery {
	return n
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RefQuery) CollectFields(ctx context.Context, satisfies ...string) *RefQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return r
}

func (r *RefQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *RefQuery {
	return r
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RevisionQuery) CollectFields(ctx context.Context, satisfies ...string) *RevisionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return r
}

func (r *RevisionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *RevisionQuery {
	return r
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RouteQuery) CollectFields(ctx context.Context, satisfies ...string) *RouteQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return r
}

func (r *RouteQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *RouteQuery {
	return r
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (vd *VarDataQuery) CollectFields(ctx context.Context, satisfies ...string) *VarDataQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		vd = vd.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return vd
}

func (vd *VarDataQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *VarDataQuery {
	return vd
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (vr *VarRefQuery) CollectFields(ctx context.Context, satisfies ...string) *VarRefQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		vr = vr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return vr
}

func (vr *VarRefQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *VarRefQuery {
	return vr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WorkflowQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkflowQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return w
}

func (w *WorkflowQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkflowQuery {
	return w
}
