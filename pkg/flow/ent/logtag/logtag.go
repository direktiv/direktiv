// Code generated by ent, DO NOT EDIT.

package logtag

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the logtag type in the database.
	Label = "log_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeLogmsg holds the string denoting the logmsg edge name in mutations.
	EdgeLogmsg = "logmsg"
	// Table holds the table name of the logtag in the database.
	Table = "log_tags"
	// LogmsgTable is the table that holds the logmsg relation/edge.
	LogmsgTable = "log_tags"
	// LogmsgInverseTable is the table name for the LogMsg entity.
	// It exists in this package in order to avoid circular dependency with the "logmsg" package.
	LogmsgInverseTable = "log_msgs"
	// LogmsgColumn is the table column denoting the logmsg relation/edge.
	LogmsgColumn = "log_msg_logtag"
)

// Columns holds all SQL columns for logtag fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "log_tags"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"log_msg_logtag",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
