// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/instance"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/direktiv/direktiv/pkg/flow/ent/vardata"
	"github.com/direktiv/direktiv/pkg/flow/ent/varref"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// VarRefUpdate is the builder for updating VarRef entities.
type VarRefUpdate struct {
	config
	hooks    []Hook
	mutation *VarRefMutation
}

// Where appends a list predicates to the VarRefUpdate builder.
func (vru *VarRefUpdate) Where(ps ...predicate.VarRef) *VarRefUpdate {
	vru.mutation.Where(ps...)
	return vru
}

// SetName sets the "name" field.
func (vru *VarRefUpdate) SetName(s string) *VarRefUpdate {
	vru.mutation.SetName(s)
	return vru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vru *VarRefUpdate) SetNillableName(s *string) *VarRefUpdate {
	if s != nil {
		vru.SetName(*s)
	}
	return vru
}

// ClearName clears the value of the "name" field.
func (vru *VarRefUpdate) ClearName() *VarRefUpdate {
	vru.mutation.ClearName()
	return vru
}

// SetBehaviour sets the "behaviour" field.
func (vru *VarRefUpdate) SetBehaviour(s string) *VarRefUpdate {
	vru.mutation.SetBehaviour(s)
	return vru
}

// SetNillableBehaviour sets the "behaviour" field if the given value is not nil.
func (vru *VarRefUpdate) SetNillableBehaviour(s *string) *VarRefUpdate {
	if s != nil {
		vru.SetBehaviour(*s)
	}
	return vru
}

// ClearBehaviour clears the value of the "behaviour" field.
func (vru *VarRefUpdate) ClearBehaviour() *VarRefUpdate {
	vru.mutation.ClearBehaviour()
	return vru
}

// SetVardataID sets the "vardata" edge to the VarData entity by ID.
func (vru *VarRefUpdate) SetVardataID(id uuid.UUID) *VarRefUpdate {
	vru.mutation.SetVardataID(id)
	return vru
}

// SetVardata sets the "vardata" edge to the VarData entity.
func (vru *VarRefUpdate) SetVardata(v *VarData) *VarRefUpdate {
	return vru.SetVardataID(v.ID)
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by ID.
func (vru *VarRefUpdate) SetNamespaceID(id uuid.UUID) *VarRefUpdate {
	vru.mutation.SetNamespaceID(id)
	return vru
}

// SetNillableNamespaceID sets the "namespace" edge to the Namespace entity by ID if the given value is not nil.
func (vru *VarRefUpdate) SetNillableNamespaceID(id *uuid.UUID) *VarRefUpdate {
	if id != nil {
		vru = vru.SetNamespaceID(*id)
	}
	return vru
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (vru *VarRefUpdate) SetNamespace(n *Namespace) *VarRefUpdate {
	return vru.SetNamespaceID(n.ID)
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (vru *VarRefUpdate) SetWorkflowID(id uuid.UUID) *VarRefUpdate {
	vru.mutation.SetWorkflowID(id)
	return vru
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (vru *VarRefUpdate) SetNillableWorkflowID(id *uuid.UUID) *VarRefUpdate {
	if id != nil {
		vru = vru.SetWorkflowID(*id)
	}
	return vru
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (vru *VarRefUpdate) SetWorkflow(w *Workflow) *VarRefUpdate {
	return vru.SetWorkflowID(w.ID)
}

// SetInstanceID sets the "instance" edge to the Instance entity by ID.
func (vru *VarRefUpdate) SetInstanceID(id uuid.UUID) *VarRefUpdate {
	vru.mutation.SetInstanceID(id)
	return vru
}

// SetNillableInstanceID sets the "instance" edge to the Instance entity by ID if the given value is not nil.
func (vru *VarRefUpdate) SetNillableInstanceID(id *uuid.UUID) *VarRefUpdate {
	if id != nil {
		vru = vru.SetInstanceID(*id)
	}
	return vru
}

// SetInstance sets the "instance" edge to the Instance entity.
func (vru *VarRefUpdate) SetInstance(i *Instance) *VarRefUpdate {
	return vru.SetInstanceID(i.ID)
}

// Mutation returns the VarRefMutation object of the builder.
func (vru *VarRefUpdate) Mutation() *VarRefMutation {
	return vru.mutation
}

// ClearVardata clears the "vardata" edge to the VarData entity.
func (vru *VarRefUpdate) ClearVardata() *VarRefUpdate {
	vru.mutation.ClearVardata()
	return vru
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (vru *VarRefUpdate) ClearNamespace() *VarRefUpdate {
	vru.mutation.ClearNamespace()
	return vru
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (vru *VarRefUpdate) ClearWorkflow() *VarRefUpdate {
	vru.mutation.ClearWorkflow()
	return vru
}

// ClearInstance clears the "instance" edge to the Instance entity.
func (vru *VarRefUpdate) ClearInstance() *VarRefUpdate {
	vru.mutation.ClearInstance()
	return vru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vru *VarRefUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vru.hooks) == 0 {
		if err = vru.check(); err != nil {
			return 0, err
		}
		affected, err = vru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VarRefMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vru.check(); err != nil {
				return 0, err
			}
			vru.mutation = mutation
			affected, err = vru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vru.hooks) - 1; i >= 0; i-- {
			if vru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vru *VarRefUpdate) SaveX(ctx context.Context) int {
	affected, err := vru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vru *VarRefUpdate) Exec(ctx context.Context) error {
	_, err := vru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vru *VarRefUpdate) ExecX(ctx context.Context) {
	if err := vru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vru *VarRefUpdate) check() error {
	if v, ok := vru.mutation.Name(); ok {
		if err := varref.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "VarRef.name": %w`, err)}
		}
	}
	if _, ok := vru.mutation.VardataID(); vru.mutation.VardataCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VarRef.vardata"`)
	}
	return nil
}

func (vru *VarRefUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   varref.Table,
			Columns: varref.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: varref.FieldID,
			},
		},
	}
	if ps := vru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vru.mutation.Name(); ok {
		_spec.SetField(varref.FieldName, field.TypeString, value)
	}
	if vru.mutation.NameCleared() {
		_spec.ClearField(varref.FieldName, field.TypeString)
	}
	if value, ok := vru.mutation.Behaviour(); ok {
		_spec.SetField(varref.FieldBehaviour, field.TypeString, value)
	}
	if vru.mutation.BehaviourCleared() {
		_spec.ClearField(varref.FieldBehaviour, field.TypeString)
	}
	if vru.mutation.VardataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.VardataTable,
			Columns: []string{varref.VardataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vardata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.VardataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.VardataTable,
			Columns: []string{varref.VardataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vardata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.NamespaceTable,
			Columns: []string{varref.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.NamespaceTable,
			Columns: []string{varref.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.WorkflowTable,
			Columns: []string{varref.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.WorkflowTable,
			Columns: []string{varref.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.InstanceTable,
			Columns: []string{varref.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.InstanceTable,
			Columns: []string{varref.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{varref.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// VarRefUpdateOne is the builder for updating a single VarRef entity.
type VarRefUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VarRefMutation
}

// SetName sets the "name" field.
func (vruo *VarRefUpdateOne) SetName(s string) *VarRefUpdateOne {
	vruo.mutation.SetName(s)
	return vruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vruo *VarRefUpdateOne) SetNillableName(s *string) *VarRefUpdateOne {
	if s != nil {
		vruo.SetName(*s)
	}
	return vruo
}

// ClearName clears the value of the "name" field.
func (vruo *VarRefUpdateOne) ClearName() *VarRefUpdateOne {
	vruo.mutation.ClearName()
	return vruo
}

// SetBehaviour sets the "behaviour" field.
func (vruo *VarRefUpdateOne) SetBehaviour(s string) *VarRefUpdateOne {
	vruo.mutation.SetBehaviour(s)
	return vruo
}

// SetNillableBehaviour sets the "behaviour" field if the given value is not nil.
func (vruo *VarRefUpdateOne) SetNillableBehaviour(s *string) *VarRefUpdateOne {
	if s != nil {
		vruo.SetBehaviour(*s)
	}
	return vruo
}

// ClearBehaviour clears the value of the "behaviour" field.
func (vruo *VarRefUpdateOne) ClearBehaviour() *VarRefUpdateOne {
	vruo.mutation.ClearBehaviour()
	return vruo
}

// SetVardataID sets the "vardata" edge to the VarData entity by ID.
func (vruo *VarRefUpdateOne) SetVardataID(id uuid.UUID) *VarRefUpdateOne {
	vruo.mutation.SetVardataID(id)
	return vruo
}

// SetVardata sets the "vardata" edge to the VarData entity.
func (vruo *VarRefUpdateOne) SetVardata(v *VarData) *VarRefUpdateOne {
	return vruo.SetVardataID(v.ID)
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by ID.
func (vruo *VarRefUpdateOne) SetNamespaceID(id uuid.UUID) *VarRefUpdateOne {
	vruo.mutation.SetNamespaceID(id)
	return vruo
}

// SetNillableNamespaceID sets the "namespace" edge to the Namespace entity by ID if the given value is not nil.
func (vruo *VarRefUpdateOne) SetNillableNamespaceID(id *uuid.UUID) *VarRefUpdateOne {
	if id != nil {
		vruo = vruo.SetNamespaceID(*id)
	}
	return vruo
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (vruo *VarRefUpdateOne) SetNamespace(n *Namespace) *VarRefUpdateOne {
	return vruo.SetNamespaceID(n.ID)
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (vruo *VarRefUpdateOne) SetWorkflowID(id uuid.UUID) *VarRefUpdateOne {
	vruo.mutation.SetWorkflowID(id)
	return vruo
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (vruo *VarRefUpdateOne) SetNillableWorkflowID(id *uuid.UUID) *VarRefUpdateOne {
	if id != nil {
		vruo = vruo.SetWorkflowID(*id)
	}
	return vruo
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (vruo *VarRefUpdateOne) SetWorkflow(w *Workflow) *VarRefUpdateOne {
	return vruo.SetWorkflowID(w.ID)
}

// SetInstanceID sets the "instance" edge to the Instance entity by ID.
func (vruo *VarRefUpdateOne) SetInstanceID(id uuid.UUID) *VarRefUpdateOne {
	vruo.mutation.SetInstanceID(id)
	return vruo
}

// SetNillableInstanceID sets the "instance" edge to the Instance entity by ID if the given value is not nil.
func (vruo *VarRefUpdateOne) SetNillableInstanceID(id *uuid.UUID) *VarRefUpdateOne {
	if id != nil {
		vruo = vruo.SetInstanceID(*id)
	}
	return vruo
}

// SetInstance sets the "instance" edge to the Instance entity.
func (vruo *VarRefUpdateOne) SetInstance(i *Instance) *VarRefUpdateOne {
	return vruo.SetInstanceID(i.ID)
}

// Mutation returns the VarRefMutation object of the builder.
func (vruo *VarRefUpdateOne) Mutation() *VarRefMutation {
	return vruo.mutation
}

// ClearVardata clears the "vardata" edge to the VarData entity.
func (vruo *VarRefUpdateOne) ClearVardata() *VarRefUpdateOne {
	vruo.mutation.ClearVardata()
	return vruo
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (vruo *VarRefUpdateOne) ClearNamespace() *VarRefUpdateOne {
	vruo.mutation.ClearNamespace()
	return vruo
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (vruo *VarRefUpdateOne) ClearWorkflow() *VarRefUpdateOne {
	vruo.mutation.ClearWorkflow()
	return vruo
}

// ClearInstance clears the "instance" edge to the Instance entity.
func (vruo *VarRefUpdateOne) ClearInstance() *VarRefUpdateOne {
	vruo.mutation.ClearInstance()
	return vruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vruo *VarRefUpdateOne) Select(field string, fields ...string) *VarRefUpdateOne {
	vruo.fields = append([]string{field}, fields...)
	return vruo
}

// Save executes the query and returns the updated VarRef entity.
func (vruo *VarRefUpdateOne) Save(ctx context.Context) (*VarRef, error) {
	var (
		err  error
		node *VarRef
	)
	if len(vruo.hooks) == 0 {
		if err = vruo.check(); err != nil {
			return nil, err
		}
		node, err = vruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VarRefMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vruo.check(); err != nil {
				return nil, err
			}
			vruo.mutation = mutation
			node, err = vruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vruo.hooks) - 1; i >= 0; i-- {
			if vruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*VarRef)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VarRefMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vruo *VarRefUpdateOne) SaveX(ctx context.Context) *VarRef {
	node, err := vruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vruo *VarRefUpdateOne) Exec(ctx context.Context) error {
	_, err := vruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vruo *VarRefUpdateOne) ExecX(ctx context.Context) {
	if err := vruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vruo *VarRefUpdateOne) check() error {
	if v, ok := vruo.mutation.Name(); ok {
		if err := varref.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "VarRef.name": %w`, err)}
		}
	}
	if _, ok := vruo.mutation.VardataID(); vruo.mutation.VardataCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VarRef.vardata"`)
	}
	return nil
}

func (vruo *VarRefUpdateOne) sqlSave(ctx context.Context) (_node *VarRef, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   varref.Table,
			Columns: varref.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: varref.FieldID,
			},
		},
	}
	id, ok := vruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VarRef.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, varref.FieldID)
		for _, f := range fields {
			if !varref.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != varref.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vruo.mutation.Name(); ok {
		_spec.SetField(varref.FieldName, field.TypeString, value)
	}
	if vruo.mutation.NameCleared() {
		_spec.ClearField(varref.FieldName, field.TypeString)
	}
	if value, ok := vruo.mutation.Behaviour(); ok {
		_spec.SetField(varref.FieldBehaviour, field.TypeString, value)
	}
	if vruo.mutation.BehaviourCleared() {
		_spec.ClearField(varref.FieldBehaviour, field.TypeString)
	}
	if vruo.mutation.VardataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.VardataTable,
			Columns: []string{varref.VardataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vardata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.VardataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.VardataTable,
			Columns: []string{varref.VardataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: vardata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.NamespaceTable,
			Columns: []string{varref.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.NamespaceTable,
			Columns: []string{varref.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.WorkflowTable,
			Columns: []string{varref.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.WorkflowTable,
			Columns: []string{varref.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.InstanceTable,
			Columns: []string{varref.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   varref.InstanceTable,
			Columns: []string{varref.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VarRef{config: vruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{varref.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
