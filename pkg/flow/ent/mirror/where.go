// Code generated by ent, DO NOT EDIT.

package mirror

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRef), v))
	})
}

// Cron applies equality check predicate on the "cron" field. It's identical to CronEQ.
func Cron(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCron), v))
	})
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicKey), v))
	})
}

// PrivateKey applies equality check predicate on the "private_key" field. It's identical to PrivateKeyEQ.
func PrivateKey(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateKey), v))
	})
}

// Passphrase applies equality check predicate on the "passphrase" field. It's identical to PassphraseEQ.
func Passphrase(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassphrase), v))
	})
}

// Commit applies equality check predicate on the "commit" field. It's identical to CommitEQ.
func Commit(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommit), v))
	})
}

// LastSync applies equality check predicate on the "last_sync" field. It's identical to LastSyncEQ.
func LastSync(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSync), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRef), v))
	})
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRef), v))
	})
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRef), v...))
	})
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRef), v...))
	})
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRef), v))
	})
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRef), v))
	})
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRef), v))
	})
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRef), v))
	})
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRef), v))
	})
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRef), v))
	})
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRef), v))
	})
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRef), v))
	})
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRef), v))
	})
}

// CronEQ applies the EQ predicate on the "cron" field.
func CronEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCron), v))
	})
}

// CronNEQ applies the NEQ predicate on the "cron" field.
func CronNEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCron), v))
	})
}

// CronIn applies the In predicate on the "cron" field.
func CronIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCron), v...))
	})
}

// CronNotIn applies the NotIn predicate on the "cron" field.
func CronNotIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCron), v...))
	})
}

// CronGT applies the GT predicate on the "cron" field.
func CronGT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCron), v))
	})
}

// CronGTE applies the GTE predicate on the "cron" field.
func CronGTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCron), v))
	})
}

// CronLT applies the LT predicate on the "cron" field.
func CronLT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCron), v))
	})
}

// CronLTE applies the LTE predicate on the "cron" field.
func CronLTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCron), v))
	})
}

// CronContains applies the Contains predicate on the "cron" field.
func CronContains(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCron), v))
	})
}

// CronHasPrefix applies the HasPrefix predicate on the "cron" field.
func CronHasPrefix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCron), v))
	})
}

// CronHasSuffix applies the HasSuffix predicate on the "cron" field.
func CronHasSuffix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCron), v))
	})
}

// CronEqualFold applies the EqualFold predicate on the "cron" field.
func CronEqualFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCron), v))
	})
}

// CronContainsFold applies the ContainsFold predicate on the "cron" field.
func CronContainsFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCron), v))
	})
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicKey), v))
	})
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublicKey), v))
	})
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPublicKey), v...))
	})
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPublicKey), v...))
	})
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublicKey), v))
	})
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublicKey), v))
	})
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublicKey), v))
	})
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublicKey), v))
	})
}

// PublicKeyContains applies the Contains predicate on the "public_key" field.
func PublicKeyContains(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPublicKey), v))
	})
}

// PublicKeyHasPrefix applies the HasPrefix predicate on the "public_key" field.
func PublicKeyHasPrefix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPublicKey), v))
	})
}

// PublicKeyHasSuffix applies the HasSuffix predicate on the "public_key" field.
func PublicKeyHasSuffix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPublicKey), v))
	})
}

// PublicKeyEqualFold applies the EqualFold predicate on the "public_key" field.
func PublicKeyEqualFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPublicKey), v))
	})
}

// PublicKeyContainsFold applies the ContainsFold predicate on the "public_key" field.
func PublicKeyContainsFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPublicKey), v))
	})
}

// PrivateKeyEQ applies the EQ predicate on the "private_key" field.
func PrivateKeyEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyNEQ applies the NEQ predicate on the "private_key" field.
func PrivateKeyNEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyIn applies the In predicate on the "private_key" field.
func PrivateKeyIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrivateKey), v...))
	})
}

// PrivateKeyNotIn applies the NotIn predicate on the "private_key" field.
func PrivateKeyNotIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrivateKey), v...))
	})
}

// PrivateKeyGT applies the GT predicate on the "private_key" field.
func PrivateKeyGT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyGTE applies the GTE predicate on the "private_key" field.
func PrivateKeyGTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyLT applies the LT predicate on the "private_key" field.
func PrivateKeyLT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyLTE applies the LTE predicate on the "private_key" field.
func PrivateKeyLTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyContains applies the Contains predicate on the "private_key" field.
func PrivateKeyContains(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyHasPrefix applies the HasPrefix predicate on the "private_key" field.
func PrivateKeyHasPrefix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyHasSuffix applies the HasSuffix predicate on the "private_key" field.
func PrivateKeyHasSuffix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyEqualFold applies the EqualFold predicate on the "private_key" field.
func PrivateKeyEqualFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyContainsFold applies the ContainsFold predicate on the "private_key" field.
func PrivateKeyContainsFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrivateKey), v))
	})
}

// PassphraseEQ applies the EQ predicate on the "passphrase" field.
func PassphraseEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassphrase), v))
	})
}

// PassphraseNEQ applies the NEQ predicate on the "passphrase" field.
func PassphraseNEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassphrase), v))
	})
}

// PassphraseIn applies the In predicate on the "passphrase" field.
func PassphraseIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassphrase), v...))
	})
}

// PassphraseNotIn applies the NotIn predicate on the "passphrase" field.
func PassphraseNotIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassphrase), v...))
	})
}

// PassphraseGT applies the GT predicate on the "passphrase" field.
func PassphraseGT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassphrase), v))
	})
}

// PassphraseGTE applies the GTE predicate on the "passphrase" field.
func PassphraseGTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassphrase), v))
	})
}

// PassphraseLT applies the LT predicate on the "passphrase" field.
func PassphraseLT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassphrase), v))
	})
}

// PassphraseLTE applies the LTE predicate on the "passphrase" field.
func PassphraseLTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassphrase), v))
	})
}

// PassphraseContains applies the Contains predicate on the "passphrase" field.
func PassphraseContains(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassphrase), v))
	})
}

// PassphraseHasPrefix applies the HasPrefix predicate on the "passphrase" field.
func PassphraseHasPrefix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassphrase), v))
	})
}

// PassphraseHasSuffix applies the HasSuffix predicate on the "passphrase" field.
func PassphraseHasSuffix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassphrase), v))
	})
}

// PassphraseEqualFold applies the EqualFold predicate on the "passphrase" field.
func PassphraseEqualFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassphrase), v))
	})
}

// PassphraseContainsFold applies the ContainsFold predicate on the "passphrase" field.
func PassphraseContainsFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassphrase), v))
	})
}

// CommitEQ applies the EQ predicate on the "commit" field.
func CommitEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommit), v))
	})
}

// CommitNEQ applies the NEQ predicate on the "commit" field.
func CommitNEQ(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommit), v))
	})
}

// CommitIn applies the In predicate on the "commit" field.
func CommitIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCommit), v...))
	})
}

// CommitNotIn applies the NotIn predicate on the "commit" field.
func CommitNotIn(vs ...string) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCommit), v...))
	})
}

// CommitGT applies the GT predicate on the "commit" field.
func CommitGT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommit), v))
	})
}

// CommitGTE applies the GTE predicate on the "commit" field.
func CommitGTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommit), v))
	})
}

// CommitLT applies the LT predicate on the "commit" field.
func CommitLT(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommit), v))
	})
}

// CommitLTE applies the LTE predicate on the "commit" field.
func CommitLTE(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommit), v))
	})
}

// CommitContains applies the Contains predicate on the "commit" field.
func CommitContains(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCommit), v))
	})
}

// CommitHasPrefix applies the HasPrefix predicate on the "commit" field.
func CommitHasPrefix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCommit), v))
	})
}

// CommitHasSuffix applies the HasSuffix predicate on the "commit" field.
func CommitHasSuffix(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCommit), v))
	})
}

// CommitEqualFold applies the EqualFold predicate on the "commit" field.
func CommitEqualFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCommit), v))
	})
}

// CommitContainsFold applies the ContainsFold predicate on the "commit" field.
func CommitContainsFold(v string) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCommit), v))
	})
}

// LastSyncEQ applies the EQ predicate on the "last_sync" field.
func LastSyncEQ(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSync), v))
	})
}

// LastSyncNEQ applies the NEQ predicate on the "last_sync" field.
func LastSyncNEQ(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastSync), v))
	})
}

// LastSyncIn applies the In predicate on the "last_sync" field.
func LastSyncIn(vs ...time.Time) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastSync), v...))
	})
}

// LastSyncNotIn applies the NotIn predicate on the "last_sync" field.
func LastSyncNotIn(vs ...time.Time) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastSync), v...))
	})
}

// LastSyncGT applies the GT predicate on the "last_sync" field.
func LastSyncGT(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastSync), v))
	})
}

// LastSyncGTE applies the GTE predicate on the "last_sync" field.
func LastSyncGTE(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastSync), v))
	})
}

// LastSyncLT applies the LT predicate on the "last_sync" field.
func LastSyncLT(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastSync), v))
	})
}

// LastSyncLTE applies the LTE predicate on the "last_sync" field.
func LastSyncLTE(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastSync), v))
	})
}

// LastSyncIsNil applies the IsNil predicate on the "last_sync" field.
func LastSyncIsNil() predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastSync)))
	})
}

// LastSyncNotNil applies the NotNil predicate on the "last_sync" field.
func LastSyncNotNil() predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastSync)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Mirror {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// HasNamespace applies the HasEdge predicate on the "namespace" edge.
func HasNamespace() predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NamespaceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NamespaceTable, NamespaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNamespaceWith applies the HasEdge predicate on the "namespace" edge with a given conditions (other predicates).
func HasNamespaceWith(preds ...predicate.Namespace) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NamespaceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NamespaceTable, NamespaceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInode applies the HasEdge predicate on the "inode" edge.
func HasInode() predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InodeTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, InodeTable, InodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInodeWith applies the HasEdge predicate on the "inode" edge with a given conditions (other predicates).
func HasInodeWith(preds ...predicate.Inode) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InodeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, InodeTable, InodeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActivities applies the HasEdge predicate on the "activities" edge.
func HasActivities() predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActivitiesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivitiesWith applies the HasEdge predicate on the "activities" edge with a given conditions (other predicates).
func HasActivitiesWith(preds ...predicate.MirrorActivity) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActivitiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActivitiesTable, ActivitiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mirror) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mirror) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mirror) predicate.Mirror {
	return predicate.Mirror(func(s *sql.Selector) {
		p(s.Not())
	})
}
