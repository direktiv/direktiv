// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/vardata"
	"github.com/direktiv/direktiv/pkg/flow/ent/varref"
	"github.com/google/uuid"
)

// VarDataCreate is the builder for creating a VarData entity.
type VarDataCreate struct {
	config
	mutation *VarDataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vdc *VarDataCreate) SetCreatedAt(t time.Time) *VarDataCreate {
	vdc.mutation.SetCreatedAt(t)
	return vdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vdc *VarDataCreate) SetNillableCreatedAt(t *time.Time) *VarDataCreate {
	if t != nil {
		vdc.SetCreatedAt(*t)
	}
	return vdc
}

// SetUpdatedAt sets the "updated_at" field.
func (vdc *VarDataCreate) SetUpdatedAt(t time.Time) *VarDataCreate {
	vdc.mutation.SetUpdatedAt(t)
	return vdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vdc *VarDataCreate) SetNillableUpdatedAt(t *time.Time) *VarDataCreate {
	if t != nil {
		vdc.SetUpdatedAt(*t)
	}
	return vdc
}

// SetSize sets the "size" field.
func (vdc *VarDataCreate) SetSize(i int) *VarDataCreate {
	vdc.mutation.SetSize(i)
	return vdc
}

// SetHash sets the "hash" field.
func (vdc *VarDataCreate) SetHash(s string) *VarDataCreate {
	vdc.mutation.SetHash(s)
	return vdc
}

// SetData sets the "data" field.
func (vdc *VarDataCreate) SetData(b []byte) *VarDataCreate {
	vdc.mutation.SetData(b)
	return vdc
}

// SetMimeType sets the "mime_type" field.
func (vdc *VarDataCreate) SetMimeType(s string) *VarDataCreate {
	vdc.mutation.SetMimeType(s)
	return vdc
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (vdc *VarDataCreate) SetNillableMimeType(s *string) *VarDataCreate {
	if s != nil {
		vdc.SetMimeType(*s)
	}
	return vdc
}

// SetID sets the "id" field.
func (vdc *VarDataCreate) SetID(u uuid.UUID) *VarDataCreate {
	vdc.mutation.SetID(u)
	return vdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vdc *VarDataCreate) SetNillableID(u *uuid.UUID) *VarDataCreate {
	if u != nil {
		vdc.SetID(*u)
	}
	return vdc
}

// AddVarrefIDs adds the "varrefs" edge to the VarRef entity by IDs.
func (vdc *VarDataCreate) AddVarrefIDs(ids ...uuid.UUID) *VarDataCreate {
	vdc.mutation.AddVarrefIDs(ids...)
	return vdc
}

// AddVarrefs adds the "varrefs" edges to the VarRef entity.
func (vdc *VarDataCreate) AddVarrefs(v ...*VarRef) *VarDataCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vdc.AddVarrefIDs(ids...)
}

// Mutation returns the VarDataMutation object of the builder.
func (vdc *VarDataCreate) Mutation() *VarDataMutation {
	return vdc.mutation
}

// Save creates the VarData in the database.
func (vdc *VarDataCreate) Save(ctx context.Context) (*VarData, error) {
	var (
		err  error
		node *VarData
	)
	vdc.defaults()
	if len(vdc.hooks) == 0 {
		if err = vdc.check(); err != nil {
			return nil, err
		}
		node, err = vdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VarDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vdc.check(); err != nil {
				return nil, err
			}
			vdc.mutation = mutation
			if node, err = vdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vdc.hooks) - 1; i >= 0; i-- {
			if vdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*VarData)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VarDataMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vdc *VarDataCreate) SaveX(ctx context.Context) *VarData {
	v, err := vdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdc *VarDataCreate) Exec(ctx context.Context) error {
	_, err := vdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdc *VarDataCreate) ExecX(ctx context.Context) {
	if err := vdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdc *VarDataCreate) defaults() {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		v := vardata.DefaultCreatedAt()
		vdc.mutation.SetCreatedAt(v)
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		v := vardata.DefaultUpdatedAt()
		vdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vdc.mutation.MimeType(); !ok {
		v := vardata.DefaultMimeType
		vdc.mutation.SetMimeType(v)
	}
	if _, ok := vdc.mutation.ID(); !ok {
		v := vardata.DefaultID()
		vdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdc *VarDataCreate) check() error {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VarData.created_at"`)}
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VarData.updated_at"`)}
	}
	if _, ok := vdc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "VarData.size"`)}
	}
	if _, ok := vdc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "VarData.hash"`)}
	}
	if _, ok := vdc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "VarData.data"`)}
	}
	if _, ok := vdc.mutation.MimeType(); !ok {
		return &ValidationError{Name: "mime_type", err: errors.New(`ent: missing required field "VarData.mime_type"`)}
	}
	return nil
}

func (vdc *VarDataCreate) sqlSave(ctx context.Context) (*VarData, error) {
	_node, _spec := vdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (vdc *VarDataCreate) createSpec() (*VarData, *sqlgraph.CreateSpec) {
	var (
		_node = &VarData{config: vdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vardata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vardata.FieldID,
			},
		}
	)
	_spec.OnConflict = vdc.conflict
	if id, ok := vdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vdc.mutation.CreatedAt(); ok {
		_spec.SetField(vardata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vdc.mutation.UpdatedAt(); ok {
		_spec.SetField(vardata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vdc.mutation.Size(); ok {
		_spec.SetField(vardata.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := vdc.mutation.Hash(); ok {
		_spec.SetField(vardata.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := vdc.mutation.Data(); ok {
		_spec.SetField(vardata.FieldData, field.TypeBytes, value)
		_node.Data = value
	}
	if value, ok := vdc.mutation.MimeType(); ok {
		_spec.SetField(vardata.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if nodes := vdc.mutation.VarrefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vardata.VarrefsTable,
			Columns: []string{vardata.VarrefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VarData.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VarDataUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vdc *VarDataCreate) OnConflict(opts ...sql.ConflictOption) *VarDataUpsertOne {
	vdc.conflict = opts
	return &VarDataUpsertOne{
		create: vdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VarData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vdc *VarDataCreate) OnConflictColumns(columns ...string) *VarDataUpsertOne {
	vdc.conflict = append(vdc.conflict, sql.ConflictColumns(columns...))
	return &VarDataUpsertOne{
		create: vdc,
	}
}

type (
	// VarDataUpsertOne is the builder for "upsert"-ing
	//  one VarData node.
	VarDataUpsertOne struct {
		create *VarDataCreate
	}

	// VarDataUpsert is the "OnConflict" setter.
	VarDataUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *VarDataUpsert) SetUpdatedAt(v time.Time) *VarDataUpsert {
	u.Set(vardata.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VarDataUpsert) UpdateUpdatedAt() *VarDataUpsert {
	u.SetExcluded(vardata.FieldUpdatedAt)
	return u
}

// SetSize sets the "size" field.
func (u *VarDataUpsert) SetSize(v int) *VarDataUpsert {
	u.Set(vardata.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *VarDataUpsert) UpdateSize() *VarDataUpsert {
	u.SetExcluded(vardata.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *VarDataUpsert) AddSize(v int) *VarDataUpsert {
	u.Add(vardata.FieldSize, v)
	return u
}

// SetHash sets the "hash" field.
func (u *VarDataUpsert) SetHash(v string) *VarDataUpsert {
	u.Set(vardata.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *VarDataUpsert) UpdateHash() *VarDataUpsert {
	u.SetExcluded(vardata.FieldHash)
	return u
}

// SetData sets the "data" field.
func (u *VarDataUpsert) SetData(v []byte) *VarDataUpsert {
	u.Set(vardata.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *VarDataUpsert) UpdateData() *VarDataUpsert {
	u.SetExcluded(vardata.FieldData)
	return u
}

// SetMimeType sets the "mime_type" field.
func (u *VarDataUpsert) SetMimeType(v string) *VarDataUpsert {
	u.Set(vardata.FieldMimeType, v)
	return u
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *VarDataUpsert) UpdateMimeType() *VarDataUpsert {
	u.SetExcluded(vardata.FieldMimeType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VarData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vardata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VarDataUpsertOne) UpdateNewValues() *VarDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(vardata.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(vardata.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VarData.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VarDataUpsertOne) Ignore() *VarDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VarDataUpsertOne) DoNothing() *VarDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VarDataCreate.OnConflict
// documentation for more info.
func (u *VarDataUpsertOne) Update(set func(*VarDataUpsert)) *VarDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VarDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VarDataUpsertOne) SetUpdatedAt(v time.Time) *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VarDataUpsertOne) UpdateUpdatedAt() *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSize sets the "size" field.
func (u *VarDataUpsertOne) SetSize(v int) *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *VarDataUpsertOne) AddSize(v int) *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *VarDataUpsertOne) UpdateSize() *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateSize()
	})
}

// SetHash sets the "hash" field.
func (u *VarDataUpsertOne) SetHash(v string) *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *VarDataUpsertOne) UpdateHash() *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateHash()
	})
}

// SetData sets the "data" field.
func (u *VarDataUpsertOne) SetData(v []byte) *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *VarDataUpsertOne) UpdateData() *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateData()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *VarDataUpsertOne) SetMimeType(v string) *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *VarDataUpsertOne) UpdateMimeType() *VarDataUpsertOne {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateMimeType()
	})
}

// Exec executes the query.
func (u *VarDataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VarDataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VarDataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VarDataUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: VarDataUpsertOne.ID is not supported by MySQL driver. Use VarDataUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VarDataUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VarDataCreateBulk is the builder for creating many VarData entities in bulk.
type VarDataCreateBulk struct {
	config
	builders []*VarDataCreate
	conflict []sql.ConflictOption
}

// Save creates the VarData entities in the database.
func (vdcb *VarDataCreateBulk) Save(ctx context.Context) ([]*VarData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vdcb.builders))
	nodes := make([]*VarData, len(vdcb.builders))
	mutators := make([]Mutator, len(vdcb.builders))
	for i := range vdcb.builders {
		func(i int, root context.Context) {
			builder := vdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VarDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vdcb *VarDataCreateBulk) SaveX(ctx context.Context) []*VarData {
	v, err := vdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdcb *VarDataCreateBulk) Exec(ctx context.Context) error {
	_, err := vdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdcb *VarDataCreateBulk) ExecX(ctx context.Context) {
	if err := vdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VarData.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VarDataUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vdcb *VarDataCreateBulk) OnConflict(opts ...sql.ConflictOption) *VarDataUpsertBulk {
	vdcb.conflict = opts
	return &VarDataUpsertBulk{
		create: vdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VarData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vdcb *VarDataCreateBulk) OnConflictColumns(columns ...string) *VarDataUpsertBulk {
	vdcb.conflict = append(vdcb.conflict, sql.ConflictColumns(columns...))
	return &VarDataUpsertBulk{
		create: vdcb,
	}
}

// VarDataUpsertBulk is the builder for "upsert"-ing
// a bulk of VarData nodes.
type VarDataUpsertBulk struct {
	create *VarDataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VarData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vardata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VarDataUpsertBulk) UpdateNewValues() *VarDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(vardata.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(vardata.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VarData.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VarDataUpsertBulk) Ignore() *VarDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VarDataUpsertBulk) DoNothing() *VarDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VarDataCreateBulk.OnConflict
// documentation for more info.
func (u *VarDataUpsertBulk) Update(set func(*VarDataUpsert)) *VarDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VarDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VarDataUpsertBulk) SetUpdatedAt(v time.Time) *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VarDataUpsertBulk) UpdateUpdatedAt() *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSize sets the "size" field.
func (u *VarDataUpsertBulk) SetSize(v int) *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *VarDataUpsertBulk) AddSize(v int) *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *VarDataUpsertBulk) UpdateSize() *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateSize()
	})
}

// SetHash sets the "hash" field.
func (u *VarDataUpsertBulk) SetHash(v string) *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *VarDataUpsertBulk) UpdateHash() *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateHash()
	})
}

// SetData sets the "data" field.
func (u *VarDataUpsertBulk) SetData(v []byte) *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *VarDataUpsertBulk) UpdateData() *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateData()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *VarDataUpsertBulk) SetMimeType(v string) *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *VarDataUpsertBulk) UpdateMimeType() *VarDataUpsertBulk {
	return u.Update(func(s *VarDataUpsert) {
		s.UpdateMimeType()
	})
}

// Exec executes the query.
func (u *VarDataUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VarDataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VarDataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VarDataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
