// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/pkg/flow/ent/instance"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/vardata"
	"github.com/direktiv/direktiv/pkg/flow/ent/varref"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// VarRef is the model entity for the VarRef schema.
type VarRef struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"-"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Behaviour holds the value of the "behaviour" field.
	Behaviour string `json:"behaviour,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VarRefQuery when eager-loading is set.
	Edges            VarRefEdges `json:"edges"`
	instance_vars    *uuid.UUID
	namespace_vars   *uuid.UUID
	var_data_varrefs *uuid.UUID
	workflow_vars    *uuid.UUID
}

// VarRefEdges holds the relations/edges for other nodes in the graph.
type VarRefEdges struct {
	// Vardata holds the value of the vardata edge.
	Vardata *VarData `json:"vardata,omitempty"`
	// Namespace holds the value of the namespace edge.
	Namespace *Namespace `json:"namespace,omitempty"`
	// Workflow holds the value of the workflow edge.
	Workflow *Workflow `json:"workflow,omitempty"`
	// Instance holds the value of the instance edge.
	Instance *Instance `json:"instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// VardataOrErr returns the Vardata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VarRefEdges) VardataOrErr() (*VarData, error) {
	if e.loadedTypes[0] {
		if e.Vardata == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vardata.Label}
		}
		return e.Vardata, nil
	}
	return nil, &NotLoadedError{edge: "vardata"}
}

// NamespaceOrErr returns the Namespace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VarRefEdges) NamespaceOrErr() (*Namespace, error) {
	if e.loadedTypes[1] {
		if e.Namespace == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: namespace.Label}
		}
		return e.Namespace, nil
	}
	return nil, &NotLoadedError{edge: "namespace"}
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VarRefEdges) WorkflowOrErr() (*Workflow, error) {
	if e.loadedTypes[2] {
		if e.Workflow == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workflow.Label}
		}
		return e.Workflow, nil
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VarRefEdges) InstanceOrErr() (*Instance, error) {
	if e.loadedTypes[3] {
		if e.Instance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: instance.Label}
		}
		return e.Instance, nil
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VarRef) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case varref.FieldName, varref.FieldBehaviour:
			values[i] = new(sql.NullString)
		case varref.FieldID:
			values[i] = new(uuid.UUID)
		case varref.ForeignKeys[0]: // instance_vars
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case varref.ForeignKeys[1]: // namespace_vars
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case varref.ForeignKeys[2]: // var_data_varrefs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case varref.ForeignKeys[3]: // workflow_vars
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type VarRef", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VarRef fields.
func (vr *VarRef) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case varref.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vr.ID = *value
			}
		case varref.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				vr.Name = value.String
			}
		case varref.FieldBehaviour:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field behaviour", values[i])
			} else if value.Valid {
				vr.Behaviour = value.String
			}
		case varref.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field instance_vars", values[i])
			} else if value.Valid {
				vr.instance_vars = new(uuid.UUID)
				*vr.instance_vars = *value.S.(*uuid.UUID)
			}
		case varref.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field namespace_vars", values[i])
			} else if value.Valid {
				vr.namespace_vars = new(uuid.UUID)
				*vr.namespace_vars = *value.S.(*uuid.UUID)
			}
		case varref.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field var_data_varrefs", values[i])
			} else if value.Valid {
				vr.var_data_varrefs = new(uuid.UUID)
				*vr.var_data_varrefs = *value.S.(*uuid.UUID)
			}
		case varref.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_vars", values[i])
			} else if value.Valid {
				vr.workflow_vars = new(uuid.UUID)
				*vr.workflow_vars = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryVardata queries the "vardata" edge of the VarRef entity.
func (vr *VarRef) QueryVardata() *VarDataQuery {
	return (&VarRefClient{config: vr.config}).QueryVardata(vr)
}

// QueryNamespace queries the "namespace" edge of the VarRef entity.
func (vr *VarRef) QueryNamespace() *NamespaceQuery {
	return (&VarRefClient{config: vr.config}).QueryNamespace(vr)
}

// QueryWorkflow queries the "workflow" edge of the VarRef entity.
func (vr *VarRef) QueryWorkflow() *WorkflowQuery {
	return (&VarRefClient{config: vr.config}).QueryWorkflow(vr)
}

// QueryInstance queries the "instance" edge of the VarRef entity.
func (vr *VarRef) QueryInstance() *InstanceQuery {
	return (&VarRefClient{config: vr.config}).QueryInstance(vr)
}

// Update returns a builder for updating this VarRef.
// Note that you need to call VarRef.Unwrap() before calling this method if this VarRef
// was returned from a transaction, and the transaction was committed or rolled back.
func (vr *VarRef) Update() *VarRefUpdateOne {
	return (&VarRefClient{config: vr.config}).UpdateOne(vr)
}

// Unwrap unwraps the VarRef entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vr *VarRef) Unwrap() *VarRef {
	_tx, ok := vr.config.driver.(*txDriver)
	if !ok {
		panic("ent: VarRef is not a transactional entity")
	}
	vr.config.driver = _tx.drv
	return vr
}

// String implements the fmt.Stringer.
func (vr *VarRef) String() string {
	var builder strings.Builder
	builder.WriteString("VarRef(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vr.ID))
	builder.WriteString("name=")
	builder.WriteString(vr.Name)
	builder.WriteString(", ")
	builder.WriteString("behaviour=")
	builder.WriteString(vr.Behaviour)
	builder.WriteByte(')')
	return builder.String()
}

// VarRefs is a parsable slice of VarRef.
type VarRefs []*VarRef

func (vr VarRefs) config(cfg config) {
	for _i := range vr {
		vr[_i].config = cfg
	}
}
