// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/events"
	"github.com/direktiv/direktiv/pkg/flow/ent/eventswait"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

// EventsWaitQuery is the builder for querying EventsWait entities.
type EventsWaitQuery struct {
	config
	limit             *int
	offset            *int
	unique            *bool
	order             []OrderFunc
	fields            []string
	predicates        []predicate.EventsWait
	withWorkflowevent *EventsQuery
	withFKs           bool
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventsWaitQuery builder.
func (ewq *EventsWaitQuery) Where(ps ...predicate.EventsWait) *EventsWaitQuery {
	ewq.predicates = append(ewq.predicates, ps...)
	return ewq
}

// Limit adds a limit step to the query.
func (ewq *EventsWaitQuery) Limit(limit int) *EventsWaitQuery {
	ewq.limit = &limit
	return ewq
}

// Offset adds an offset step to the query.
func (ewq *EventsWaitQuery) Offset(offset int) *EventsWaitQuery {
	ewq.offset = &offset
	return ewq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ewq *EventsWaitQuery) Unique(unique bool) *EventsWaitQuery {
	ewq.unique = &unique
	return ewq
}

// Order adds an order step to the query.
func (ewq *EventsWaitQuery) Order(o ...OrderFunc) *EventsWaitQuery {
	ewq.order = append(ewq.order, o...)
	return ewq
}

// QueryWorkflowevent chains the current query on the "workflowevent" edge.
func (ewq *EventsWaitQuery) QueryWorkflowevent() *EventsQuery {
	query := &EventsQuery{config: ewq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ewq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ewq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventswait.Table, eventswait.FieldID, selector),
			sqlgraph.To(events.Table, events.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventswait.WorkfloweventTable, eventswait.WorkfloweventColumn),
		)
		fromU = sqlgraph.SetNeighbors(ewq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EventsWait entity from the query.
// Returns a *NotFoundError when no EventsWait was found.
func (ewq *EventsWaitQuery) First(ctx context.Context) (*EventsWait, error) {
	nodes, err := ewq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventswait.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ewq *EventsWaitQuery) FirstX(ctx context.Context) *EventsWait {
	node, err := ewq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EventsWait ID from the query.
// Returns a *NotFoundError when no EventsWait ID was found.
func (ewq *EventsWaitQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ewq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventswait.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ewq *EventsWaitQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ewq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EventsWait entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventsWait entity is found.
// Returns a *NotFoundError when no EventsWait entities are found.
func (ewq *EventsWaitQuery) Only(ctx context.Context) (*EventsWait, error) {
	nodes, err := ewq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventswait.Label}
	default:
		return nil, &NotSingularError{eventswait.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ewq *EventsWaitQuery) OnlyX(ctx context.Context) *EventsWait {
	node, err := ewq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EventsWait ID in the query.
// Returns a *NotSingularError when more than one EventsWait ID is found.
// Returns a *NotFoundError when no entities are found.
func (ewq *EventsWaitQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ewq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventswait.Label}
	default:
		err = &NotSingularError{eventswait.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ewq *EventsWaitQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ewq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventsWaits.
func (ewq *EventsWaitQuery) All(ctx context.Context) ([]*EventsWait, error) {
	if err := ewq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ewq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ewq *EventsWaitQuery) AllX(ctx context.Context) []*EventsWait {
	nodes, err := ewq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EventsWait IDs.
func (ewq *EventsWaitQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := ewq.Select(eventswait.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ewq *EventsWaitQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ewq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ewq *EventsWaitQuery) Count(ctx context.Context) (int, error) {
	if err := ewq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ewq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ewq *EventsWaitQuery) CountX(ctx context.Context) int {
	count, err := ewq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ewq *EventsWaitQuery) Exist(ctx context.Context) (bool, error) {
	if err := ewq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ewq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ewq *EventsWaitQuery) ExistX(ctx context.Context) bool {
	exist, err := ewq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventsWaitQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ewq *EventsWaitQuery) Clone() *EventsWaitQuery {
	if ewq == nil {
		return nil
	}
	return &EventsWaitQuery{
		config:            ewq.config,
		limit:             ewq.limit,
		offset:            ewq.offset,
		order:             append([]OrderFunc{}, ewq.order...),
		predicates:        append([]predicate.EventsWait{}, ewq.predicates...),
		withWorkflowevent: ewq.withWorkflowevent.Clone(),
		// clone intermediate query.
		sql:    ewq.sql.Clone(),
		path:   ewq.path,
		unique: ewq.unique,
	}
}

// WithWorkflowevent tells the query-builder to eager-load the nodes that are connected to
// the "workflowevent" edge. The optional arguments are used to configure the query builder of the edge.
func (ewq *EventsWaitQuery) WithWorkflowevent(opts ...func(*EventsQuery)) *EventsWaitQuery {
	query := &EventsQuery{config: ewq.config}
	for _, opt := range opts {
		opt(query)
	}
	ewq.withWorkflowevent = query
	return ewq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Events map[string]interface {} `json:"events,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventsWait.Query().
//		GroupBy(eventswait.FieldEvents).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ewq *EventsWaitQuery) GroupBy(field string, fields ...string) *EventsWaitGroupBy {
	grbuild := &EventsWaitGroupBy{config: ewq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ewq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ewq.sqlQuery(ctx), nil
	}
	grbuild.label = eventswait.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Events map[string]interface {} `json:"events,omitempty"`
//	}
//
//	client.EventsWait.Query().
//		Select(eventswait.FieldEvents).
//		Scan(ctx, &v)
func (ewq *EventsWaitQuery) Select(fields ...string) *EventsWaitSelect {
	ewq.fields = append(ewq.fields, fields...)
	selbuild := &EventsWaitSelect{EventsWaitQuery: ewq}
	selbuild.label = eventswait.Label
	selbuild.flds, selbuild.scan = &ewq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a EventsWaitSelect configured with the given aggregations.
func (ewq *EventsWaitQuery) Aggregate(fns ...AggregateFunc) *EventsWaitSelect {
	return ewq.Select().Aggregate(fns...)
}

func (ewq *EventsWaitQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ewq.fields {
		if !eventswait.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ewq.path != nil {
		prev, err := ewq.path(ctx)
		if err != nil {
			return err
		}
		ewq.sql = prev
	}
	return nil
}

func (ewq *EventsWaitQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EventsWait, error) {
	var (
		nodes       = []*EventsWait{}
		withFKs     = ewq.withFKs
		_spec       = ewq.querySpec()
		loadedTypes = [1]bool{
			ewq.withWorkflowevent != nil,
		}
	)
	if ewq.withWorkflowevent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, eventswait.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EventsWait).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EventsWait{config: ewq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ewq.modifiers) > 0 {
		_spec.Modifiers = ewq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ewq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ewq.withWorkflowevent; query != nil {
		if err := ewq.loadWorkflowevent(ctx, query, nodes, nil,
			func(n *EventsWait, e *Events) { n.Edges.Workflowevent = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ewq *EventsWaitQuery) loadWorkflowevent(ctx context.Context, query *EventsQuery, nodes []*EventsWait, init func(*EventsWait), assign func(*EventsWait, *Events)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EventsWait)
	for i := range nodes {
		if nodes[i].events_wfeventswait == nil {
			continue
		}
		fk := *nodes[i].events_wfeventswait
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(events.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "events_wfeventswait" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ewq *EventsWaitQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ewq.querySpec()
	if len(ewq.modifiers) > 0 {
		_spec.Modifiers = ewq.modifiers
	}
	_spec.Node.Columns = ewq.fields
	if len(ewq.fields) > 0 {
		_spec.Unique = ewq.unique != nil && *ewq.unique
	}
	return sqlgraph.CountNodes(ctx, ewq.driver, _spec)
}

func (ewq *EventsWaitQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := ewq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (ewq *EventsWaitQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventswait.Table,
			Columns: eventswait.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: eventswait.FieldID,
			},
		},
		From:   ewq.sql,
		Unique: true,
	}
	if unique := ewq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ewq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventswait.FieldID)
		for i := range fields {
			if fields[i] != eventswait.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ewq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ewq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ewq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ewq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ewq *EventsWaitQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ewq.driver.Dialect())
	t1 := builder.Table(eventswait.Table)
	columns := ewq.fields
	if len(columns) == 0 {
		columns = eventswait.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ewq.sql != nil {
		selector = ewq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ewq.unique != nil && *ewq.unique {
		selector.Distinct()
	}
	for _, m := range ewq.modifiers {
		m(selector)
	}
	for _, p := range ewq.predicates {
		p(selector)
	}
	for _, p := range ewq.order {
		p(selector)
	}
	if offset := ewq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ewq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ewq *EventsWaitQuery) ForUpdate(opts ...sql.LockOption) *EventsWaitQuery {
	if ewq.driver.Dialect() == dialect.Postgres {
		ewq.Unique(false)
	}
	ewq.modifiers = append(ewq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ewq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ewq *EventsWaitQuery) ForShare(opts ...sql.LockOption) *EventsWaitQuery {
	if ewq.driver.Dialect() == dialect.Postgres {
		ewq.Unique(false)
	}
	ewq.modifiers = append(ewq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ewq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ewq *EventsWaitQuery) Modify(modifiers ...func(s *sql.Selector)) *EventsWaitSelect {
	ewq.modifiers = append(ewq.modifiers, modifiers...)
	return ewq.Select()
}

// EventsWaitGroupBy is the group-by builder for EventsWait entities.
type EventsWaitGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ewgb *EventsWaitGroupBy) Aggregate(fns ...AggregateFunc) *EventsWaitGroupBy {
	ewgb.fns = append(ewgb.fns, fns...)
	return ewgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ewgb *EventsWaitGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ewgb.path(ctx)
	if err != nil {
		return err
	}
	ewgb.sql = query
	return ewgb.sqlScan(ctx, v)
}

func (ewgb *EventsWaitGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ewgb.fields {
		if !eventswait.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ewgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ewgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ewgb *EventsWaitGroupBy) sqlQuery() *sql.Selector {
	selector := ewgb.sql.Select()
	aggregation := make([]string, 0, len(ewgb.fns))
	for _, fn := range ewgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ewgb.fields)+len(ewgb.fns))
		for _, f := range ewgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ewgb.fields...)...)
}

// EventsWaitSelect is the builder for selecting fields of EventsWait entities.
type EventsWaitSelect struct {
	*EventsWaitQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ews *EventsWaitSelect) Aggregate(fns ...AggregateFunc) *EventsWaitSelect {
	ews.fns = append(ews.fns, fns...)
	return ews
}

// Scan applies the selector query and scans the result into the given value.
func (ews *EventsWaitSelect) Scan(ctx context.Context, v any) error {
	if err := ews.prepareQuery(ctx); err != nil {
		return err
	}
	ews.sql = ews.EventsWaitQuery.sqlQuery(ctx)
	return ews.sqlScan(ctx, v)
}

func (ews *EventsWaitSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ews.fns))
	for _, fn := range ews.fns {
		aggregation = append(aggregation, fn(ews.sql))
	}
	switch n := len(*ews.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ews.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ews.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ews.sql.Query()
	if err := ews.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ews *EventsWaitSelect) Modify(modifiers ...func(s *sql.Selector)) *EventsWaitSelect {
	ews.modifiers = append(ews.modifiers, modifiers...)
	return ews
}
