// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/instance"
	"github.com/direktiv/direktiv/pkg/flow/ent/instanceruntime"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

// InstanceRuntimeQuery is the builder for querying InstanceRuntime entities.
type InstanceRuntimeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.InstanceRuntime
	// eager-loading edges.
	withInstance *InstanceQuery
	withCaller   *InstanceQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InstanceRuntimeQuery builder.
func (irq *InstanceRuntimeQuery) Where(ps ...predicate.InstanceRuntime) *InstanceRuntimeQuery {
	irq.predicates = append(irq.predicates, ps...)
	return irq
}

// Limit adds a limit step to the query.
func (irq *InstanceRuntimeQuery) Limit(limit int) *InstanceRuntimeQuery {
	irq.limit = &limit
	return irq
}

// Offset adds an offset step to the query.
func (irq *InstanceRuntimeQuery) Offset(offset int) *InstanceRuntimeQuery {
	irq.offset = &offset
	return irq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (irq *InstanceRuntimeQuery) Unique(unique bool) *InstanceRuntimeQuery {
	irq.unique = &unique
	return irq
}

// Order adds an order step to the query.
func (irq *InstanceRuntimeQuery) Order(o ...OrderFunc) *InstanceRuntimeQuery {
	irq.order = append(irq.order, o...)
	return irq
}

// QueryInstance chains the current query on the "instance" edge.
func (irq *InstanceRuntimeQuery) QueryInstance() *InstanceQuery {
	query := &InstanceQuery{config: irq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := irq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceruntime.Table, instanceruntime.FieldID, selector),
			sqlgraph.To(instance.Table, instance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, instanceruntime.InstanceTable, instanceruntime.InstanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(irq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCaller chains the current query on the "caller" edge.
func (irq *InstanceRuntimeQuery) QueryCaller() *InstanceQuery {
	query := &InstanceQuery{config: irq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := irq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceruntime.Table, instanceruntime.FieldID, selector),
			sqlgraph.To(instance.Table, instance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, instanceruntime.CallerTable, instanceruntime.CallerColumn),
		)
		fromU = sqlgraph.SetNeighbors(irq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InstanceRuntime entity from the query.
// Returns a *NotFoundError when no InstanceRuntime was found.
func (irq *InstanceRuntimeQuery) First(ctx context.Context) (*InstanceRuntime, error) {
	nodes, err := irq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{instanceruntime.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (irq *InstanceRuntimeQuery) FirstX(ctx context.Context) *InstanceRuntime {
	node, err := irq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InstanceRuntime ID from the query.
// Returns a *NotFoundError when no InstanceRuntime ID was found.
func (irq *InstanceRuntimeQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = irq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{instanceruntime.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (irq *InstanceRuntimeQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := irq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InstanceRuntime entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InstanceRuntime entity is found.
// Returns a *NotFoundError when no InstanceRuntime entities are found.
func (irq *InstanceRuntimeQuery) Only(ctx context.Context) (*InstanceRuntime, error) {
	nodes, err := irq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{instanceruntime.Label}
	default:
		return nil, &NotSingularError{instanceruntime.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (irq *InstanceRuntimeQuery) OnlyX(ctx context.Context) *InstanceRuntime {
	node, err := irq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InstanceRuntime ID in the query.
// Returns a *NotSingularError when more than one InstanceRuntime ID is found.
// Returns a *NotFoundError when no entities are found.
func (irq *InstanceRuntimeQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = irq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{instanceruntime.Label}
	default:
		err = &NotSingularError{instanceruntime.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (irq *InstanceRuntimeQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := irq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InstanceRuntimes.
func (irq *InstanceRuntimeQuery) All(ctx context.Context) ([]*InstanceRuntime, error) {
	if err := irq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return irq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (irq *InstanceRuntimeQuery) AllX(ctx context.Context) []*InstanceRuntime {
	nodes, err := irq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InstanceRuntime IDs.
func (irq *InstanceRuntimeQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := irq.Select(instanceruntime.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (irq *InstanceRuntimeQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := irq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (irq *InstanceRuntimeQuery) Count(ctx context.Context) (int, error) {
	if err := irq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return irq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (irq *InstanceRuntimeQuery) CountX(ctx context.Context) int {
	count, err := irq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (irq *InstanceRuntimeQuery) Exist(ctx context.Context) (bool, error) {
	if err := irq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return irq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (irq *InstanceRuntimeQuery) ExistX(ctx context.Context) bool {
	exist, err := irq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InstanceRuntimeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (irq *InstanceRuntimeQuery) Clone() *InstanceRuntimeQuery {
	if irq == nil {
		return nil
	}
	return &InstanceRuntimeQuery{
		config:       irq.config,
		limit:        irq.limit,
		offset:       irq.offset,
		order:        append([]OrderFunc{}, irq.order...),
		predicates:   append([]predicate.InstanceRuntime{}, irq.predicates...),
		withInstance: irq.withInstance.Clone(),
		withCaller:   irq.withCaller.Clone(),
		// clone intermediate query.
		sql:    irq.sql.Clone(),
		path:   irq.path,
		unique: irq.unique,
	}
}

// WithInstance tells the query-builder to eager-load the nodes that are connected to
// the "instance" edge. The optional arguments are used to configure the query builder of the edge.
func (irq *InstanceRuntimeQuery) WithInstance(opts ...func(*InstanceQuery)) *InstanceRuntimeQuery {
	query := &InstanceQuery{config: irq.config}
	for _, opt := range opts {
		opt(query)
	}
	irq.withInstance = query
	return irq
}

// WithCaller tells the query-builder to eager-load the nodes that are connected to
// the "caller" edge. The optional arguments are used to configure the query builder of the edge.
func (irq *InstanceRuntimeQuery) WithCaller(opts ...func(*InstanceQuery)) *InstanceRuntimeQuery {
	query := &InstanceQuery{config: irq.config}
	for _, opt := range opts {
		opt(query)
	}
	irq.withCaller = query
	return irq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Input []byte `json:"input,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InstanceRuntime.Query().
//		GroupBy(instanceruntime.FieldInput).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (irq *InstanceRuntimeQuery) GroupBy(field string, fields ...string) *InstanceRuntimeGroupBy {
	group := &InstanceRuntimeGroupBy{config: irq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return irq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Input []byte `json:"input,omitempty"`
//	}
//
//	client.InstanceRuntime.Query().
//		Select(instanceruntime.FieldInput).
//		Scan(ctx, &v)
//
func (irq *InstanceRuntimeQuery) Select(fields ...string) *InstanceRuntimeSelect {
	irq.fields = append(irq.fields, fields...)
	return &InstanceRuntimeSelect{InstanceRuntimeQuery: irq}
}

func (irq *InstanceRuntimeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range irq.fields {
		if !instanceruntime.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if irq.path != nil {
		prev, err := irq.path(ctx)
		if err != nil {
			return err
		}
		irq.sql = prev
	}
	return nil
}

func (irq *InstanceRuntimeQuery) sqlAll(ctx context.Context) ([]*InstanceRuntime, error) {
	var (
		nodes       = []*InstanceRuntime{}
		withFKs     = irq.withFKs
		_spec       = irq.querySpec()
		loadedTypes = [2]bool{
			irq.withInstance != nil,
			irq.withCaller != nil,
		}
	)
	if irq.withInstance != nil || irq.withCaller != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, instanceruntime.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &InstanceRuntime{config: irq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, irq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := irq.withInstance; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*InstanceRuntime)
		for i := range nodes {
			if nodes[i].instance_runtime == nil {
				continue
			}
			fk := *nodes[i].instance_runtime
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(instance.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "instance_runtime" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Instance = n
			}
		}
	}

	if query := irq.withCaller; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*InstanceRuntime)
		for i := range nodes {
			if nodes[i].instance_children == nil {
				continue
			}
			fk := *nodes[i].instance_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(instance.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "instance_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Caller = n
			}
		}
	}

	return nodes, nil
}

func (irq *InstanceRuntimeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := irq.querySpec()
	_spec.Node.Columns = irq.fields
	if len(irq.fields) > 0 {
		_spec.Unique = irq.unique != nil && *irq.unique
	}
	return sqlgraph.CountNodes(ctx, irq.driver, _spec)
}

func (irq *InstanceRuntimeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := irq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (irq *InstanceRuntimeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instanceruntime.Table,
			Columns: instanceruntime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: instanceruntime.FieldID,
			},
		},
		From:   irq.sql,
		Unique: true,
	}
	if unique := irq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := irq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instanceruntime.FieldID)
		for i := range fields {
			if fields[i] != instanceruntime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := irq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := irq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := irq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := irq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (irq *InstanceRuntimeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(irq.driver.Dialect())
	t1 := builder.Table(instanceruntime.Table)
	columns := irq.fields
	if len(columns) == 0 {
		columns = instanceruntime.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if irq.sql != nil {
		selector = irq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if irq.unique != nil && *irq.unique {
		selector.Distinct()
	}
	for _, p := range irq.predicates {
		p(selector)
	}
	for _, p := range irq.order {
		p(selector)
	}
	if offset := irq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := irq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InstanceRuntimeGroupBy is the group-by builder for InstanceRuntime entities.
type InstanceRuntimeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (irgb *InstanceRuntimeGroupBy) Aggregate(fns ...AggregateFunc) *InstanceRuntimeGroupBy {
	irgb.fns = append(irgb.fns, fns...)
	return irgb
}

// Scan applies the group-by query and scans the result into the given value.
func (irgb *InstanceRuntimeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := irgb.path(ctx)
	if err != nil {
		return err
	}
	irgb.sql = query
	return irgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (irgb *InstanceRuntimeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := irgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (irgb *InstanceRuntimeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(irgb.fields) > 1 {
		return nil, errors.New("ent: InstanceRuntimeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := irgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (irgb *InstanceRuntimeGroupBy) StringsX(ctx context.Context) []string {
	v, err := irgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (irgb *InstanceRuntimeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = irgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{instanceruntime.Label}
	default:
		err = fmt.Errorf("ent: InstanceRuntimeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (irgb *InstanceRuntimeGroupBy) StringX(ctx context.Context) string {
	v, err := irgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (irgb *InstanceRuntimeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(irgb.fields) > 1 {
		return nil, errors.New("ent: InstanceRuntimeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := irgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (irgb *InstanceRuntimeGroupBy) IntsX(ctx context.Context) []int {
	v, err := irgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (irgb *InstanceRuntimeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = irgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{instanceruntime.Label}
	default:
		err = fmt.Errorf("ent: InstanceRuntimeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (irgb *InstanceRuntimeGroupBy) IntX(ctx context.Context) int {
	v, err := irgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (irgb *InstanceRuntimeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(irgb.fields) > 1 {
		return nil, errors.New("ent: InstanceRuntimeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := irgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (irgb *InstanceRuntimeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := irgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (irgb *InstanceRuntimeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = irgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{instanceruntime.Label}
	default:
		err = fmt.Errorf("ent: InstanceRuntimeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (irgb *InstanceRuntimeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := irgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (irgb *InstanceRuntimeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(irgb.fields) > 1 {
		return nil, errors.New("ent: InstanceRuntimeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := irgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (irgb *InstanceRuntimeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := irgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (irgb *InstanceRuntimeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = irgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{instanceruntime.Label}
	default:
		err = fmt.Errorf("ent: InstanceRuntimeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (irgb *InstanceRuntimeGroupBy) BoolX(ctx context.Context) bool {
	v, err := irgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (irgb *InstanceRuntimeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range irgb.fields {
		if !instanceruntime.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := irgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := irgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (irgb *InstanceRuntimeGroupBy) sqlQuery() *sql.Selector {
	selector := irgb.sql.Select()
	aggregation := make([]string, 0, len(irgb.fns))
	for _, fn := range irgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(irgb.fields)+len(irgb.fns))
		for _, f := range irgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(irgb.fields...)...)
}

// InstanceRuntimeSelect is the builder for selecting fields of InstanceRuntime entities.
type InstanceRuntimeSelect struct {
	*InstanceRuntimeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (irs *InstanceRuntimeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := irs.prepareQuery(ctx); err != nil {
		return err
	}
	irs.sql = irs.InstanceRuntimeQuery.sqlQuery(ctx)
	return irs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (irs *InstanceRuntimeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := irs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (irs *InstanceRuntimeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(irs.fields) > 1 {
		return nil, errors.New("ent: InstanceRuntimeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := irs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (irs *InstanceRuntimeSelect) StringsX(ctx context.Context) []string {
	v, err := irs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (irs *InstanceRuntimeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = irs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{instanceruntime.Label}
	default:
		err = fmt.Errorf("ent: InstanceRuntimeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (irs *InstanceRuntimeSelect) StringX(ctx context.Context) string {
	v, err := irs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (irs *InstanceRuntimeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(irs.fields) > 1 {
		return nil, errors.New("ent: InstanceRuntimeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := irs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (irs *InstanceRuntimeSelect) IntsX(ctx context.Context) []int {
	v, err := irs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (irs *InstanceRuntimeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = irs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{instanceruntime.Label}
	default:
		err = fmt.Errorf("ent: InstanceRuntimeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (irs *InstanceRuntimeSelect) IntX(ctx context.Context) int {
	v, err := irs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (irs *InstanceRuntimeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(irs.fields) > 1 {
		return nil, errors.New("ent: InstanceRuntimeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := irs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (irs *InstanceRuntimeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := irs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (irs *InstanceRuntimeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = irs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{instanceruntime.Label}
	default:
		err = fmt.Errorf("ent: InstanceRuntimeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (irs *InstanceRuntimeSelect) Float64X(ctx context.Context) float64 {
	v, err := irs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (irs *InstanceRuntimeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(irs.fields) > 1 {
		return nil, errors.New("ent: InstanceRuntimeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := irs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (irs *InstanceRuntimeSelect) BoolsX(ctx context.Context) []bool {
	v, err := irs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (irs *InstanceRuntimeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = irs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{instanceruntime.Label}
	default:
		err = fmt.Errorf("ent: InstanceRuntimeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (irs *InstanceRuntimeSelect) BoolX(ctx context.Context) bool {
	v, err := irs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (irs *InstanceRuntimeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := irs.sql.Query()
	if err := irs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
