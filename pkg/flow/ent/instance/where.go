// Code generated by ent, DO NOT EDIT.

package instance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldUpdatedAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldEndAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldStatus, v))
}

// As applies equality check predicate on the "as" field. It's identical to AsEQ.
func As(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldAs, v))
}

// ErrorCode applies equality check predicate on the "errorCode" field. It's identical to ErrorCodeEQ.
func ErrorCode(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldErrorCode, v))
}

// ErrorMessage applies equality check predicate on the "errorMessage" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldErrorMessage, v))
}

// Invoker applies equality check predicate on the "invoker" field. It's identical to InvokerEQ.
func Invoker(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldInvoker, v))
}

// InvokerState applies equality check predicate on the "invokerState" field. It's identical to InvokerStateEQ.
func InvokerState(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldInvokerState, v))
}

// Callpath applies equality check predicate on the "callpath" field. It's identical to CallpathEQ.
func Callpath(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldCallpath, v))
}

// WorkflowID applies equality check predicate on the "workflow_id" field. It's identical to WorkflowIDEQ.
func WorkflowID(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldWorkflowID, v))
}

// RevisionID applies equality check predicate on the "revision_id" field. It's identical to RevisionIDEQ.
func RevisionID(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldRevisionID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldUpdatedAt, v))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.Instance {
	return predicate.Instance(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.Instance {
	return predicate.Instance(sql.FieldNotNull(FieldEndAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContainsFold(FieldStatus, v))
}

// AsEQ applies the EQ predicate on the "as" field.
func AsEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldAs, v))
}

// AsNEQ applies the NEQ predicate on the "as" field.
func AsNEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldAs, v))
}

// AsIn applies the In predicate on the "as" field.
func AsIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldAs, vs...))
}

// AsNotIn applies the NotIn predicate on the "as" field.
func AsNotIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldAs, vs...))
}

// AsGT applies the GT predicate on the "as" field.
func AsGT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldAs, v))
}

// AsGTE applies the GTE predicate on the "as" field.
func AsGTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldAs, v))
}

// AsLT applies the LT predicate on the "as" field.
func AsLT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldAs, v))
}

// AsLTE applies the LTE predicate on the "as" field.
func AsLTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldAs, v))
}

// AsContains applies the Contains predicate on the "as" field.
func AsContains(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContains(FieldAs, v))
}

// AsHasPrefix applies the HasPrefix predicate on the "as" field.
func AsHasPrefix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasPrefix(FieldAs, v))
}

// AsHasSuffix applies the HasSuffix predicate on the "as" field.
func AsHasSuffix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasSuffix(FieldAs, v))
}

// AsEqualFold applies the EqualFold predicate on the "as" field.
func AsEqualFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEqualFold(FieldAs, v))
}

// AsContainsFold applies the ContainsFold predicate on the "as" field.
func AsContainsFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContainsFold(FieldAs, v))
}

// ErrorCodeEQ applies the EQ predicate on the "errorCode" field.
func ErrorCodeEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldErrorCode, v))
}

// ErrorCodeNEQ applies the NEQ predicate on the "errorCode" field.
func ErrorCodeNEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldErrorCode, v))
}

// ErrorCodeIn applies the In predicate on the "errorCode" field.
func ErrorCodeIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldErrorCode, vs...))
}

// ErrorCodeNotIn applies the NotIn predicate on the "errorCode" field.
func ErrorCodeNotIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldErrorCode, vs...))
}

// ErrorCodeGT applies the GT predicate on the "errorCode" field.
func ErrorCodeGT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldErrorCode, v))
}

// ErrorCodeGTE applies the GTE predicate on the "errorCode" field.
func ErrorCodeGTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldErrorCode, v))
}

// ErrorCodeLT applies the LT predicate on the "errorCode" field.
func ErrorCodeLT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldErrorCode, v))
}

// ErrorCodeLTE applies the LTE predicate on the "errorCode" field.
func ErrorCodeLTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldErrorCode, v))
}

// ErrorCodeContains applies the Contains predicate on the "errorCode" field.
func ErrorCodeContains(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContains(FieldErrorCode, v))
}

// ErrorCodeHasPrefix applies the HasPrefix predicate on the "errorCode" field.
func ErrorCodeHasPrefix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasPrefix(FieldErrorCode, v))
}

// ErrorCodeHasSuffix applies the HasSuffix predicate on the "errorCode" field.
func ErrorCodeHasSuffix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasSuffix(FieldErrorCode, v))
}

// ErrorCodeIsNil applies the IsNil predicate on the "errorCode" field.
func ErrorCodeIsNil() predicate.Instance {
	return predicate.Instance(sql.FieldIsNull(FieldErrorCode))
}

// ErrorCodeNotNil applies the NotNil predicate on the "errorCode" field.
func ErrorCodeNotNil() predicate.Instance {
	return predicate.Instance(sql.FieldNotNull(FieldErrorCode))
}

// ErrorCodeEqualFold applies the EqualFold predicate on the "errorCode" field.
func ErrorCodeEqualFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEqualFold(FieldErrorCode, v))
}

// ErrorCodeContainsFold applies the ContainsFold predicate on the "errorCode" field.
func ErrorCodeContainsFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContainsFold(FieldErrorCode, v))
}

// ErrorMessageEQ applies the EQ predicate on the "errorMessage" field.
func ErrorMessageEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "errorMessage" field.
func ErrorMessageNEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "errorMessage" field.
func ErrorMessageIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "errorMessage" field.
func ErrorMessageNotIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "errorMessage" field.
func ErrorMessageGT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "errorMessage" field.
func ErrorMessageGTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "errorMessage" field.
func ErrorMessageLT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "errorMessage" field.
func ErrorMessageLTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "errorMessage" field.
func ErrorMessageContains(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "errorMessage" field.
func ErrorMessageHasPrefix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "errorMessage" field.
func ErrorMessageHasSuffix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "errorMessage" field.
func ErrorMessageIsNil() predicate.Instance {
	return predicate.Instance(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "errorMessage" field.
func ErrorMessageNotNil() predicate.Instance {
	return predicate.Instance(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "errorMessage" field.
func ErrorMessageEqualFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "errorMessage" field.
func ErrorMessageContainsFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContainsFold(FieldErrorMessage, v))
}

// InvokerEQ applies the EQ predicate on the "invoker" field.
func InvokerEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldInvoker, v))
}

// InvokerNEQ applies the NEQ predicate on the "invoker" field.
func InvokerNEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldInvoker, v))
}

// InvokerIn applies the In predicate on the "invoker" field.
func InvokerIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldInvoker, vs...))
}

// InvokerNotIn applies the NotIn predicate on the "invoker" field.
func InvokerNotIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldInvoker, vs...))
}

// InvokerGT applies the GT predicate on the "invoker" field.
func InvokerGT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldInvoker, v))
}

// InvokerGTE applies the GTE predicate on the "invoker" field.
func InvokerGTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldInvoker, v))
}

// InvokerLT applies the LT predicate on the "invoker" field.
func InvokerLT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldInvoker, v))
}

// InvokerLTE applies the LTE predicate on the "invoker" field.
func InvokerLTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldInvoker, v))
}

// InvokerContains applies the Contains predicate on the "invoker" field.
func InvokerContains(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContains(FieldInvoker, v))
}

// InvokerHasPrefix applies the HasPrefix predicate on the "invoker" field.
func InvokerHasPrefix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasPrefix(FieldInvoker, v))
}

// InvokerHasSuffix applies the HasSuffix predicate on the "invoker" field.
func InvokerHasSuffix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasSuffix(FieldInvoker, v))
}

// InvokerIsNil applies the IsNil predicate on the "invoker" field.
func InvokerIsNil() predicate.Instance {
	return predicate.Instance(sql.FieldIsNull(FieldInvoker))
}

// InvokerNotNil applies the NotNil predicate on the "invoker" field.
func InvokerNotNil() predicate.Instance {
	return predicate.Instance(sql.FieldNotNull(FieldInvoker))
}

// InvokerEqualFold applies the EqualFold predicate on the "invoker" field.
func InvokerEqualFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEqualFold(FieldInvoker, v))
}

// InvokerContainsFold applies the ContainsFold predicate on the "invoker" field.
func InvokerContainsFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContainsFold(FieldInvoker, v))
}

// InvokerStateEQ applies the EQ predicate on the "invokerState" field.
func InvokerStateEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldInvokerState, v))
}

// InvokerStateNEQ applies the NEQ predicate on the "invokerState" field.
func InvokerStateNEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldInvokerState, v))
}

// InvokerStateIn applies the In predicate on the "invokerState" field.
func InvokerStateIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldInvokerState, vs...))
}

// InvokerStateNotIn applies the NotIn predicate on the "invokerState" field.
func InvokerStateNotIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldInvokerState, vs...))
}

// InvokerStateGT applies the GT predicate on the "invokerState" field.
func InvokerStateGT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldInvokerState, v))
}

// InvokerStateGTE applies the GTE predicate on the "invokerState" field.
func InvokerStateGTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldInvokerState, v))
}

// InvokerStateLT applies the LT predicate on the "invokerState" field.
func InvokerStateLT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldInvokerState, v))
}

// InvokerStateLTE applies the LTE predicate on the "invokerState" field.
func InvokerStateLTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldInvokerState, v))
}

// InvokerStateContains applies the Contains predicate on the "invokerState" field.
func InvokerStateContains(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContains(FieldInvokerState, v))
}

// InvokerStateHasPrefix applies the HasPrefix predicate on the "invokerState" field.
func InvokerStateHasPrefix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasPrefix(FieldInvokerState, v))
}

// InvokerStateHasSuffix applies the HasSuffix predicate on the "invokerState" field.
func InvokerStateHasSuffix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasSuffix(FieldInvokerState, v))
}

// InvokerStateIsNil applies the IsNil predicate on the "invokerState" field.
func InvokerStateIsNil() predicate.Instance {
	return predicate.Instance(sql.FieldIsNull(FieldInvokerState))
}

// InvokerStateNotNil applies the NotNil predicate on the "invokerState" field.
func InvokerStateNotNil() predicate.Instance {
	return predicate.Instance(sql.FieldNotNull(FieldInvokerState))
}

// InvokerStateEqualFold applies the EqualFold predicate on the "invokerState" field.
func InvokerStateEqualFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEqualFold(FieldInvokerState, v))
}

// InvokerStateContainsFold applies the ContainsFold predicate on the "invokerState" field.
func InvokerStateContainsFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContainsFold(FieldInvokerState, v))
}

// CallpathEQ applies the EQ predicate on the "callpath" field.
func CallpathEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldCallpath, v))
}

// CallpathNEQ applies the NEQ predicate on the "callpath" field.
func CallpathNEQ(v string) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldCallpath, v))
}

// CallpathIn applies the In predicate on the "callpath" field.
func CallpathIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldCallpath, vs...))
}

// CallpathNotIn applies the NotIn predicate on the "callpath" field.
func CallpathNotIn(vs ...string) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldCallpath, vs...))
}

// CallpathGT applies the GT predicate on the "callpath" field.
func CallpathGT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldCallpath, v))
}

// CallpathGTE applies the GTE predicate on the "callpath" field.
func CallpathGTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldCallpath, v))
}

// CallpathLT applies the LT predicate on the "callpath" field.
func CallpathLT(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldCallpath, v))
}

// CallpathLTE applies the LTE predicate on the "callpath" field.
func CallpathLTE(v string) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldCallpath, v))
}

// CallpathContains applies the Contains predicate on the "callpath" field.
func CallpathContains(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContains(FieldCallpath, v))
}

// CallpathHasPrefix applies the HasPrefix predicate on the "callpath" field.
func CallpathHasPrefix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasPrefix(FieldCallpath, v))
}

// CallpathHasSuffix applies the HasSuffix predicate on the "callpath" field.
func CallpathHasSuffix(v string) predicate.Instance {
	return predicate.Instance(sql.FieldHasSuffix(FieldCallpath, v))
}

// CallpathIsNil applies the IsNil predicate on the "callpath" field.
func CallpathIsNil() predicate.Instance {
	return predicate.Instance(sql.FieldIsNull(FieldCallpath))
}

// CallpathNotNil applies the NotNil predicate on the "callpath" field.
func CallpathNotNil() predicate.Instance {
	return predicate.Instance(sql.FieldNotNull(FieldCallpath))
}

// CallpathEqualFold applies the EqualFold predicate on the "callpath" field.
func CallpathEqualFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldEqualFold(FieldCallpath, v))
}

// CallpathContainsFold applies the ContainsFold predicate on the "callpath" field.
func CallpathContainsFold(v string) predicate.Instance {
	return predicate.Instance(sql.FieldContainsFold(FieldCallpath, v))
}

// WorkflowIDEQ applies the EQ predicate on the "workflow_id" field.
func WorkflowIDEQ(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldWorkflowID, v))
}

// WorkflowIDNEQ applies the NEQ predicate on the "workflow_id" field.
func WorkflowIDNEQ(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldWorkflowID, v))
}

// WorkflowIDIn applies the In predicate on the "workflow_id" field.
func WorkflowIDIn(vs ...uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldWorkflowID, vs...))
}

// WorkflowIDNotIn applies the NotIn predicate on the "workflow_id" field.
func WorkflowIDNotIn(vs ...uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldWorkflowID, vs...))
}

// WorkflowIDGT applies the GT predicate on the "workflow_id" field.
func WorkflowIDGT(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldWorkflowID, v))
}

// WorkflowIDGTE applies the GTE predicate on the "workflow_id" field.
func WorkflowIDGTE(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldWorkflowID, v))
}

// WorkflowIDLT applies the LT predicate on the "workflow_id" field.
func WorkflowIDLT(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldWorkflowID, v))
}

// WorkflowIDLTE applies the LTE predicate on the "workflow_id" field.
func WorkflowIDLTE(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldWorkflowID, v))
}

// RevisionIDEQ applies the EQ predicate on the "revision_id" field.
func RevisionIDEQ(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldEQ(FieldRevisionID, v))
}

// RevisionIDNEQ applies the NEQ predicate on the "revision_id" field.
func RevisionIDNEQ(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldNEQ(FieldRevisionID, v))
}

// RevisionIDIn applies the In predicate on the "revision_id" field.
func RevisionIDIn(vs ...uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldIn(FieldRevisionID, vs...))
}

// RevisionIDNotIn applies the NotIn predicate on the "revision_id" field.
func RevisionIDNotIn(vs ...uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldNotIn(FieldRevisionID, vs...))
}

// RevisionIDGT applies the GT predicate on the "revision_id" field.
func RevisionIDGT(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldGT(FieldRevisionID, v))
}

// RevisionIDGTE applies the GTE predicate on the "revision_id" field.
func RevisionIDGTE(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldGTE(FieldRevisionID, v))
}

// RevisionIDLT applies the LT predicate on the "revision_id" field.
func RevisionIDLT(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldLT(FieldRevisionID, v))
}

// RevisionIDLTE applies the LTE predicate on the "revision_id" field.
func RevisionIDLTE(v uuid.UUID) predicate.Instance {
	return predicate.Instance(sql.FieldLTE(FieldRevisionID, v))
}

// HasNamespace applies the HasEdge predicate on the "namespace" edge.
func HasNamespace() predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NamespaceTable, NamespaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNamespaceWith applies the HasEdge predicate on the "namespace" edge with a given conditions (other predicates).
func HasNamespaceWith(preds ...predicate.Namespace) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NamespaceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NamespaceTable, NamespaceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogs applies the HasEdge predicate on the "logs" edge.
func HasLogs() predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogsWith applies the HasEdge predicate on the "logs" edge with a given conditions (other predicates).
func HasLogsWith(preds ...predicate.LogMsg) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LogsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVars applies the HasEdge predicate on the "vars" edge.
func HasVars() predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VarsTable, VarsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVarsWith applies the HasEdge predicate on the "vars" edge with a given conditions (other predicates).
func HasVarsWith(preds ...predicate.VarRef) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VarsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VarsTable, VarsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRuntime applies the HasEdge predicate on the "runtime" edge.
func HasRuntime() predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RuntimeTable, RuntimeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRuntimeWith applies the HasEdge predicate on the "runtime" edge with a given conditions (other predicates).
func HasRuntimeWith(preds ...predicate.InstanceRuntime) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RuntimeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RuntimeTable, RuntimeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.InstanceRuntime) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventlisteners applies the HasEdge predicate on the "eventlisteners" edge.
func HasEventlisteners() predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventlistenersTable, EventlistenersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventlistenersWith applies the HasEdge predicate on the "eventlisteners" edge with a given conditions (other predicates).
func HasEventlistenersWith(preds ...predicate.Events) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventlistenersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventlistenersTable, EventlistenersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnnotations applies the HasEdge predicate on the "annotations" edge.
func HasAnnotations() predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnnotationsTable, AnnotationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnnotationsWith applies the HasEdge predicate on the "annotations" edge with a given conditions (other predicates).
func HasAnnotationsWith(preds ...predicate.Annotation) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnnotationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnnotationsTable, AnnotationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Instance) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Instance) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Instance) predicate.Instance {
	return predicate.Instance(func(s *sql.Selector) {
		p(s.Not())
	})
}
