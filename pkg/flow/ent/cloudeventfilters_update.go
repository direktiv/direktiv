// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/cloudeventfilters"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

// CloudEventFiltersUpdate is the builder for updating CloudEventFilters entities.
type CloudEventFiltersUpdate struct {
	config
	hooks     []Hook
	mutation  *CloudEventFiltersMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CloudEventFiltersUpdate builder.
func (cefu *CloudEventFiltersUpdate) Where(ps ...predicate.CloudEventFilters) *CloudEventFiltersUpdate {
	cefu.mutation.Where(ps...)
	return cefu
}

// SetName sets the "name" field.
func (cefu *CloudEventFiltersUpdate) SetName(s string) *CloudEventFiltersUpdate {
	cefu.mutation.SetName(s)
	return cefu
}

// SetJscode sets the "jscode" field.
func (cefu *CloudEventFiltersUpdate) SetJscode(s string) *CloudEventFiltersUpdate {
	cefu.mutation.SetJscode(s)
	return cefu
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by ID.
func (cefu *CloudEventFiltersUpdate) SetNamespaceID(id uuid.UUID) *CloudEventFiltersUpdate {
	cefu.mutation.SetNamespaceID(id)
	return cefu
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (cefu *CloudEventFiltersUpdate) SetNamespace(n *Namespace) *CloudEventFiltersUpdate {
	return cefu.SetNamespaceID(n.ID)
}

// Mutation returns the CloudEventFiltersMutation object of the builder.
func (cefu *CloudEventFiltersUpdate) Mutation() *CloudEventFiltersMutation {
	return cefu.mutation
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (cefu *CloudEventFiltersUpdate) ClearNamespace() *CloudEventFiltersUpdate {
	cefu.mutation.ClearNamespace()
	return cefu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cefu *CloudEventFiltersUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cefu.hooks) == 0 {
		if err = cefu.check(); err != nil {
			return 0, err
		}
		affected, err = cefu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CloudEventFiltersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cefu.check(); err != nil {
				return 0, err
			}
			cefu.mutation = mutation
			affected, err = cefu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cefu.hooks) - 1; i >= 0; i-- {
			if cefu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cefu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cefu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cefu *CloudEventFiltersUpdate) SaveX(ctx context.Context) int {
	affected, err := cefu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cefu *CloudEventFiltersUpdate) Exec(ctx context.Context) error {
	_, err := cefu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cefu *CloudEventFiltersUpdate) ExecX(ctx context.Context) {
	if err := cefu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cefu *CloudEventFiltersUpdate) check() error {
	if v, ok := cefu.mutation.Name(); ok {
		if err := cloudeventfilters.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CloudEventFilters.name": %w`, err)}
		}
	}
	if v, ok := cefu.mutation.Jscode(); ok {
		if err := cloudeventfilters.JscodeValidator(v); err != nil {
			return &ValidationError{Name: "jscode", err: fmt.Errorf(`ent: validator failed for field "CloudEventFilters.jscode": %w`, err)}
		}
	}
	if _, ok := cefu.mutation.NamespaceID(); cefu.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CloudEventFilters.namespace"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cefu *CloudEventFiltersUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CloudEventFiltersUpdate {
	cefu.modifiers = append(cefu.modifiers, modifiers...)
	return cefu
}

func (cefu *CloudEventFiltersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cloudeventfilters.Table,
			Columns: cloudeventfilters.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cloudeventfilters.FieldID,
			},
		},
	}
	if ps := cefu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cefu.mutation.Name(); ok {
		_spec.SetField(cloudeventfilters.FieldName, field.TypeString, value)
	}
	if value, ok := cefu.mutation.Jscode(); ok {
		_spec.SetField(cloudeventfilters.FieldJscode, field.TypeString, value)
	}
	if cefu.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cloudeventfilters.NamespaceTable,
			Columns: []string{cloudeventfilters.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cefu.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cloudeventfilters.NamespaceTable,
			Columns: []string{cloudeventfilters.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cefu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cefu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudeventfilters.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CloudEventFiltersUpdateOne is the builder for updating a single CloudEventFilters entity.
type CloudEventFiltersUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CloudEventFiltersMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (cefuo *CloudEventFiltersUpdateOne) SetName(s string) *CloudEventFiltersUpdateOne {
	cefuo.mutation.SetName(s)
	return cefuo
}

// SetJscode sets the "jscode" field.
func (cefuo *CloudEventFiltersUpdateOne) SetJscode(s string) *CloudEventFiltersUpdateOne {
	cefuo.mutation.SetJscode(s)
	return cefuo
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by ID.
func (cefuo *CloudEventFiltersUpdateOne) SetNamespaceID(id uuid.UUID) *CloudEventFiltersUpdateOne {
	cefuo.mutation.SetNamespaceID(id)
	return cefuo
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (cefuo *CloudEventFiltersUpdateOne) SetNamespace(n *Namespace) *CloudEventFiltersUpdateOne {
	return cefuo.SetNamespaceID(n.ID)
}

// Mutation returns the CloudEventFiltersMutation object of the builder.
func (cefuo *CloudEventFiltersUpdateOne) Mutation() *CloudEventFiltersMutation {
	return cefuo.mutation
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (cefuo *CloudEventFiltersUpdateOne) ClearNamespace() *CloudEventFiltersUpdateOne {
	cefuo.mutation.ClearNamespace()
	return cefuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cefuo *CloudEventFiltersUpdateOne) Select(field string, fields ...string) *CloudEventFiltersUpdateOne {
	cefuo.fields = append([]string{field}, fields...)
	return cefuo
}

// Save executes the query and returns the updated CloudEventFilters entity.
func (cefuo *CloudEventFiltersUpdateOne) Save(ctx context.Context) (*CloudEventFilters, error) {
	var (
		err  error
		node *CloudEventFilters
	)
	if len(cefuo.hooks) == 0 {
		if err = cefuo.check(); err != nil {
			return nil, err
		}
		node, err = cefuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CloudEventFiltersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cefuo.check(); err != nil {
				return nil, err
			}
			cefuo.mutation = mutation
			node, err = cefuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cefuo.hooks) - 1; i >= 0; i-- {
			if cefuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cefuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cefuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CloudEventFilters)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CloudEventFiltersMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cefuo *CloudEventFiltersUpdateOne) SaveX(ctx context.Context) *CloudEventFilters {
	node, err := cefuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cefuo *CloudEventFiltersUpdateOne) Exec(ctx context.Context) error {
	_, err := cefuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cefuo *CloudEventFiltersUpdateOne) ExecX(ctx context.Context) {
	if err := cefuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cefuo *CloudEventFiltersUpdateOne) check() error {
	if v, ok := cefuo.mutation.Name(); ok {
		if err := cloudeventfilters.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CloudEventFilters.name": %w`, err)}
		}
	}
	if v, ok := cefuo.mutation.Jscode(); ok {
		if err := cloudeventfilters.JscodeValidator(v); err != nil {
			return &ValidationError{Name: "jscode", err: fmt.Errorf(`ent: validator failed for field "CloudEventFilters.jscode": %w`, err)}
		}
	}
	if _, ok := cefuo.mutation.NamespaceID(); cefuo.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CloudEventFilters.namespace"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cefuo *CloudEventFiltersUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CloudEventFiltersUpdateOne {
	cefuo.modifiers = append(cefuo.modifiers, modifiers...)
	return cefuo
}

func (cefuo *CloudEventFiltersUpdateOne) sqlSave(ctx context.Context) (_node *CloudEventFilters, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cloudeventfilters.Table,
			Columns: cloudeventfilters.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cloudeventfilters.FieldID,
			},
		},
	}
	id, ok := cefuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CloudEventFilters.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cefuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cloudeventfilters.FieldID)
		for _, f := range fields {
			if !cloudeventfilters.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cloudeventfilters.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cefuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cefuo.mutation.Name(); ok {
		_spec.SetField(cloudeventfilters.FieldName, field.TypeString, value)
	}
	if value, ok := cefuo.mutation.Jscode(); ok {
		_spec.SetField(cloudeventfilters.FieldJscode, field.TypeString, value)
	}
	if cefuo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cloudeventfilters.NamespaceTable,
			Columns: []string{cloudeventfilters.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cefuo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cloudeventfilters.NamespaceTable,
			Columns: []string{cloudeventfilters.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cefuo.modifiers...)
	_node = &CloudEventFilters{config: cefuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cefuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudeventfilters.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
