// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/pkg/flow/ent/logmsg"
	"github.com/direktiv/direktiv/pkg/flow/ent/logtag"
	"github.com/google/uuid"
)

// LogTag is the model entity for the LogTag schema.
type LogTag struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"-"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LogTagQuery when eager-loading is set.
	Edges          LogTagEdges `json:"edges"`
	log_msg_logtag *uuid.UUID
}

// LogTagEdges holds the relations/edges for other nodes in the graph.
type LogTagEdges struct {
	// Logmsg holds the value of the logmsg edge.
	Logmsg *LogMsg `json:"logmsg,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogmsgOrErr returns the Logmsg value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LogTagEdges) LogmsgOrErr() (*LogMsg, error) {
	if e.loadedTypes[0] {
		if e.Logmsg == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: logmsg.Label}
		}
		return e.Logmsg, nil
	}
	return nil, &NotLoadedError{edge: "logmsg"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logtag.FieldType, logtag.FieldValue:
			values[i] = new(sql.NullString)
		case logtag.FieldID:
			values[i] = new(uuid.UUID)
		case logtag.ForeignKeys[0]: // log_msg_logtag
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type LogTag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogTag fields.
func (lt *LogTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logtag.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lt.ID = *value
			}
		case logtag.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				lt.Type = value.String
			}
		case logtag.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				lt.Value = value.String
			}
		case logtag.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field log_msg_logtag", values[i])
			} else if value.Valid {
				lt.log_msg_logtag = new(uuid.UUID)
				*lt.log_msg_logtag = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryLogmsg queries the "logmsg" edge of the LogTag entity.
func (lt *LogTag) QueryLogmsg() *LogMsgQuery {
	return (&LogTagClient{config: lt.config}).QueryLogmsg(lt)
}

// Update returns a builder for updating this LogTag.
// Note that you need to call LogTag.Unwrap() before calling this method if this LogTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (lt *LogTag) Update() *LogTagUpdateOne {
	return (&LogTagClient{config: lt.config}).UpdateOne(lt)
}

// Unwrap unwraps the LogTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lt *LogTag) Unwrap() *LogTag {
	_tx, ok := lt.config.driver.(*txDriver)
	if !ok {
		panic("ent: LogTag is not a transactional entity")
	}
	lt.config.driver = _tx.drv
	return lt
}

// String implements the fmt.Stringer.
func (lt *LogTag) String() string {
	var builder strings.Builder
	builder.WriteString("LogTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lt.ID))
	builder.WriteString("type=")
	builder.WriteString(lt.Type)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(lt.Value)
	builder.WriteByte(')')
	return builder.String()
}

// LogTags is a parsable slice of LogTag.
type LogTags []*LogTag

func (lt LogTags) config(cfg config) {
	for _i := range lt {
		lt[_i].config = cfg
	}
}
