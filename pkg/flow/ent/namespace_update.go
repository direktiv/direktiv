// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/annotation"
	"github.com/direktiv/direktiv/pkg/flow/ent/cloudeventfilters"
	"github.com/direktiv/direktiv/pkg/flow/ent/cloudevents"
	"github.com/direktiv/direktiv/pkg/flow/ent/events"
	"github.com/direktiv/direktiv/pkg/flow/ent/instance"
	"github.com/direktiv/direktiv/pkg/flow/ent/logmsg"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/direktiv/direktiv/pkg/flow/ent/services"
	"github.com/google/uuid"
)

// NamespaceUpdate is the builder for updating Namespace entities.
type NamespaceUpdate struct {
	config
	hooks     []Hook
	mutation  *NamespaceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NamespaceUpdate builder.
func (nu *NamespaceUpdate) Where(ps ...predicate.Namespace) *NamespaceUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NamespaceUpdate) SetUpdatedAt(t time.Time) *NamespaceUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetConfig sets the "config" field.
func (nu *NamespaceUpdate) SetConfig(s string) *NamespaceUpdate {
	nu.mutation.SetConfig(s)
	return nu
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (nu *NamespaceUpdate) SetNillableConfig(s *string) *NamespaceUpdate {
	if s != nil {
		nu.SetConfig(*s)
	}
	return nu
}

// SetName sets the "name" field.
func (nu *NamespaceUpdate) SetName(s string) *NamespaceUpdate {
	nu.mutation.SetName(s)
	return nu
}

// AddInstanceIDs adds the "instances" edge to the Instance entity by IDs.
func (nu *NamespaceUpdate) AddInstanceIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddInstanceIDs(ids...)
	return nu
}

// AddInstances adds the "instances" edges to the Instance entity.
func (nu *NamespaceUpdate) AddInstances(i ...*Instance) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.AddInstanceIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the LogMsg entity by IDs.
func (nu *NamespaceUpdate) AddLogIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddLogIDs(ids...)
	return nu
}

// AddLogs adds the "logs" edges to the LogMsg entity.
func (nu *NamespaceUpdate) AddLogs(l ...*LogMsg) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return nu.AddLogIDs(ids...)
}

// AddCloudeventIDs adds the "cloudevents" edge to the CloudEvents entity by IDs.
func (nu *NamespaceUpdate) AddCloudeventIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddCloudeventIDs(ids...)
	return nu
}

// AddCloudevents adds the "cloudevents" edges to the CloudEvents entity.
func (nu *NamespaceUpdate) AddCloudevents(c ...*CloudEvents) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddCloudeventIDs(ids...)
}

// AddNamespacelistenerIDs adds the "namespacelisteners" edge to the Events entity by IDs.
func (nu *NamespaceUpdate) AddNamespacelistenerIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddNamespacelistenerIDs(ids...)
	return nu
}

// AddNamespacelisteners adds the "namespacelisteners" edges to the Events entity.
func (nu *NamespaceUpdate) AddNamespacelisteners(e ...*Events) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.AddNamespacelistenerIDs(ids...)
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (nu *NamespaceUpdate) AddAnnotationIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddAnnotationIDs(ids...)
	return nu
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (nu *NamespaceUpdate) AddAnnotations(a ...*Annotation) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.AddAnnotationIDs(ids...)
}

// AddCloudeventfilterIDs adds the "cloudeventfilters" edge to the CloudEventFilters entity by IDs.
func (nu *NamespaceUpdate) AddCloudeventfilterIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.AddCloudeventfilterIDs(ids...)
	return nu
}

// AddCloudeventfilters adds the "cloudeventfilters" edges to the CloudEventFilters entity.
func (nu *NamespaceUpdate) AddCloudeventfilters(c ...*CloudEventFilters) *NamespaceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddCloudeventfilterIDs(ids...)
}

// AddServiceIDs adds the "services" edge to the Services entity by IDs.
func (nu *NamespaceUpdate) AddServiceIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddServiceIDs(ids...)
	return nu
}

// AddServices adds the "services" edges to the Services entity.
func (nu *NamespaceUpdate) AddServices(s ...*Services) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.AddServiceIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nu *NamespaceUpdate) Mutation() *NamespaceMutation {
	return nu.mutation
}

// ClearInstances clears all "instances" edges to the Instance entity.
func (nu *NamespaceUpdate) ClearInstances() *NamespaceUpdate {
	nu.mutation.ClearInstances()
	return nu
}

// RemoveInstanceIDs removes the "instances" edge to Instance entities by IDs.
func (nu *NamespaceUpdate) RemoveInstanceIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveInstanceIDs(ids...)
	return nu
}

// RemoveInstances removes "instances" edges to Instance entities.
func (nu *NamespaceUpdate) RemoveInstances(i ...*Instance) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.RemoveInstanceIDs(ids...)
}

// ClearLogs clears all "logs" edges to the LogMsg entity.
func (nu *NamespaceUpdate) ClearLogs() *NamespaceUpdate {
	nu.mutation.ClearLogs()
	return nu
}

// RemoveLogIDs removes the "logs" edge to LogMsg entities by IDs.
func (nu *NamespaceUpdate) RemoveLogIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveLogIDs(ids...)
	return nu
}

// RemoveLogs removes "logs" edges to LogMsg entities.
func (nu *NamespaceUpdate) RemoveLogs(l ...*LogMsg) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return nu.RemoveLogIDs(ids...)
}

// ClearCloudevents clears all "cloudevents" edges to the CloudEvents entity.
func (nu *NamespaceUpdate) ClearCloudevents() *NamespaceUpdate {
	nu.mutation.ClearCloudevents()
	return nu
}

// RemoveCloudeventIDs removes the "cloudevents" edge to CloudEvents entities by IDs.
func (nu *NamespaceUpdate) RemoveCloudeventIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveCloudeventIDs(ids...)
	return nu
}

// RemoveCloudevents removes "cloudevents" edges to CloudEvents entities.
func (nu *NamespaceUpdate) RemoveCloudevents(c ...*CloudEvents) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveCloudeventIDs(ids...)
}

// ClearNamespacelisteners clears all "namespacelisteners" edges to the Events entity.
func (nu *NamespaceUpdate) ClearNamespacelisteners() *NamespaceUpdate {
	nu.mutation.ClearNamespacelisteners()
	return nu
}

// RemoveNamespacelistenerIDs removes the "namespacelisteners" edge to Events entities by IDs.
func (nu *NamespaceUpdate) RemoveNamespacelistenerIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveNamespacelistenerIDs(ids...)
	return nu
}

// RemoveNamespacelisteners removes "namespacelisteners" edges to Events entities.
func (nu *NamespaceUpdate) RemoveNamespacelisteners(e ...*Events) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.RemoveNamespacelistenerIDs(ids...)
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (nu *NamespaceUpdate) ClearAnnotations() *NamespaceUpdate {
	nu.mutation.ClearAnnotations()
	return nu
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (nu *NamespaceUpdate) RemoveAnnotationIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveAnnotationIDs(ids...)
	return nu
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (nu *NamespaceUpdate) RemoveAnnotations(a ...*Annotation) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.RemoveAnnotationIDs(ids...)
}

// ClearCloudeventfilters clears all "cloudeventfilters" edges to the CloudEventFilters entity.
func (nu *NamespaceUpdate) ClearCloudeventfilters() *NamespaceUpdate {
	nu.mutation.ClearCloudeventfilters()
	return nu
}

// RemoveCloudeventfilterIDs removes the "cloudeventfilters" edge to CloudEventFilters entities by IDs.
func (nu *NamespaceUpdate) RemoveCloudeventfilterIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.RemoveCloudeventfilterIDs(ids...)
	return nu
}

// RemoveCloudeventfilters removes "cloudeventfilters" edges to CloudEventFilters entities.
func (nu *NamespaceUpdate) RemoveCloudeventfilters(c ...*CloudEventFilters) *NamespaceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveCloudeventfilterIDs(ids...)
}

// ClearServices clears all "services" edges to the Services entity.
func (nu *NamespaceUpdate) ClearServices() *NamespaceUpdate {
	nu.mutation.ClearServices()
	return nu
}

// RemoveServiceIDs removes the "services" edge to Services entities by IDs.
func (nu *NamespaceUpdate) RemoveServiceIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveServiceIDs(ids...)
	return nu
}

// RemoveServices removes "services" edges to Services entities.
func (nu *NamespaceUpdate) RemoveServices(s ...*Services) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.RemoveServiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NamespaceUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks[int, NamespaceMutation](ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NamespaceUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NamespaceUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NamespaceUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := namespace.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NamespaceUpdate) check() error {
	if v, ok := nu.mutation.Name(); ok {
		if err := namespace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Namespace.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nu *NamespaceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NamespaceUpdate {
	nu.modifiers = append(nu.modifiers, modifiers...)
	return nu
}

func (nu *NamespaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(namespace.Table, namespace.Columns, sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUUID))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(namespace.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.Config(); ok {
		_spec.SetField(namespace.FieldConfig, field.TypeString, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(namespace.FieldName, field.TypeString, value)
	}
	if nu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !nu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logmsg.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedLogsIDs(); len(nodes) > 0 && !nu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logmsg.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logmsg.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CloudeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudevents.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedCloudeventsIDs(); len(nodes) > 0 && !nu.mutation.CloudeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudevents.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CloudeventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudevents.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NamespacelistenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNamespacelistenersIDs(); len(nodes) > 0 && !nu.mutation.NamespacelistenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NamespacelistenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AnnotationsTable,
			Columns: []string{namespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !nu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AnnotationsTable,
			Columns: []string{namespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AnnotationsTable,
			Columns: []string{namespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CloudeventfiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventfiltersTable,
			Columns: []string{namespace.CloudeventfiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudeventfilters.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedCloudeventfiltersIDs(); len(nodes) > 0 && !nu.mutation.CloudeventfiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventfiltersTable,
			Columns: []string{namespace.CloudeventfiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudeventfilters.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CloudeventfiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventfiltersTable,
			Columns: []string{namespace.CloudeventfiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudeventfilters.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ServicesTable,
			Columns: []string{namespace.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(services.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedServicesIDs(); len(nodes) > 0 && !nu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ServicesTable,
			Columns: []string{namespace.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(services.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ServicesTable,
			Columns: []string{namespace.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(services.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NamespaceUpdateOne is the builder for updating a single Namespace entity.
type NamespaceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NamespaceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NamespaceUpdateOne) SetUpdatedAt(t time.Time) *NamespaceUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetConfig sets the "config" field.
func (nuo *NamespaceUpdateOne) SetConfig(s string) *NamespaceUpdateOne {
	nuo.mutation.SetConfig(s)
	return nuo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (nuo *NamespaceUpdateOne) SetNillableConfig(s *string) *NamespaceUpdateOne {
	if s != nil {
		nuo.SetConfig(*s)
	}
	return nuo
}

// SetName sets the "name" field.
func (nuo *NamespaceUpdateOne) SetName(s string) *NamespaceUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// AddInstanceIDs adds the "instances" edge to the Instance entity by IDs.
func (nuo *NamespaceUpdateOne) AddInstanceIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddInstanceIDs(ids...)
	return nuo
}

// AddInstances adds the "instances" edges to the Instance entity.
func (nuo *NamespaceUpdateOne) AddInstances(i ...*Instance) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.AddInstanceIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the LogMsg entity by IDs.
func (nuo *NamespaceUpdateOne) AddLogIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddLogIDs(ids...)
	return nuo
}

// AddLogs adds the "logs" edges to the LogMsg entity.
func (nuo *NamespaceUpdateOne) AddLogs(l ...*LogMsg) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return nuo.AddLogIDs(ids...)
}

// AddCloudeventIDs adds the "cloudevents" edge to the CloudEvents entity by IDs.
func (nuo *NamespaceUpdateOne) AddCloudeventIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddCloudeventIDs(ids...)
	return nuo
}

// AddCloudevents adds the "cloudevents" edges to the CloudEvents entity.
func (nuo *NamespaceUpdateOne) AddCloudevents(c ...*CloudEvents) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddCloudeventIDs(ids...)
}

// AddNamespacelistenerIDs adds the "namespacelisteners" edge to the Events entity by IDs.
func (nuo *NamespaceUpdateOne) AddNamespacelistenerIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddNamespacelistenerIDs(ids...)
	return nuo
}

// AddNamespacelisteners adds the "namespacelisteners" edges to the Events entity.
func (nuo *NamespaceUpdateOne) AddNamespacelisteners(e ...*Events) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.AddNamespacelistenerIDs(ids...)
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (nuo *NamespaceUpdateOne) AddAnnotationIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddAnnotationIDs(ids...)
	return nuo
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (nuo *NamespaceUpdateOne) AddAnnotations(a ...*Annotation) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.AddAnnotationIDs(ids...)
}

// AddCloudeventfilterIDs adds the "cloudeventfilters" edge to the CloudEventFilters entity by IDs.
func (nuo *NamespaceUpdateOne) AddCloudeventfilterIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.AddCloudeventfilterIDs(ids...)
	return nuo
}

// AddCloudeventfilters adds the "cloudeventfilters" edges to the CloudEventFilters entity.
func (nuo *NamespaceUpdateOne) AddCloudeventfilters(c ...*CloudEventFilters) *NamespaceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddCloudeventfilterIDs(ids...)
}

// AddServiceIDs adds the "services" edge to the Services entity by IDs.
func (nuo *NamespaceUpdateOne) AddServiceIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddServiceIDs(ids...)
	return nuo
}

// AddServices adds the "services" edges to the Services entity.
func (nuo *NamespaceUpdateOne) AddServices(s ...*Services) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.AddServiceIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nuo *NamespaceUpdateOne) Mutation() *NamespaceMutation {
	return nuo.mutation
}

// ClearInstances clears all "instances" edges to the Instance entity.
func (nuo *NamespaceUpdateOne) ClearInstances() *NamespaceUpdateOne {
	nuo.mutation.ClearInstances()
	return nuo
}

// RemoveInstanceIDs removes the "instances" edge to Instance entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveInstanceIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveInstanceIDs(ids...)
	return nuo
}

// RemoveInstances removes "instances" edges to Instance entities.
func (nuo *NamespaceUpdateOne) RemoveInstances(i ...*Instance) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.RemoveInstanceIDs(ids...)
}

// ClearLogs clears all "logs" edges to the LogMsg entity.
func (nuo *NamespaceUpdateOne) ClearLogs() *NamespaceUpdateOne {
	nuo.mutation.ClearLogs()
	return nuo
}

// RemoveLogIDs removes the "logs" edge to LogMsg entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveLogIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveLogIDs(ids...)
	return nuo
}

// RemoveLogs removes "logs" edges to LogMsg entities.
func (nuo *NamespaceUpdateOne) RemoveLogs(l ...*LogMsg) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return nuo.RemoveLogIDs(ids...)
}

// ClearCloudevents clears all "cloudevents" edges to the CloudEvents entity.
func (nuo *NamespaceUpdateOne) ClearCloudevents() *NamespaceUpdateOne {
	nuo.mutation.ClearCloudevents()
	return nuo
}

// RemoveCloudeventIDs removes the "cloudevents" edge to CloudEvents entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveCloudeventIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveCloudeventIDs(ids...)
	return nuo
}

// RemoveCloudevents removes "cloudevents" edges to CloudEvents entities.
func (nuo *NamespaceUpdateOne) RemoveCloudevents(c ...*CloudEvents) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveCloudeventIDs(ids...)
}

// ClearNamespacelisteners clears all "namespacelisteners" edges to the Events entity.
func (nuo *NamespaceUpdateOne) ClearNamespacelisteners() *NamespaceUpdateOne {
	nuo.mutation.ClearNamespacelisteners()
	return nuo
}

// RemoveNamespacelistenerIDs removes the "namespacelisteners" edge to Events entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveNamespacelistenerIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveNamespacelistenerIDs(ids...)
	return nuo
}

// RemoveNamespacelisteners removes "namespacelisteners" edges to Events entities.
func (nuo *NamespaceUpdateOne) RemoveNamespacelisteners(e ...*Events) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.RemoveNamespacelistenerIDs(ids...)
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (nuo *NamespaceUpdateOne) ClearAnnotations() *NamespaceUpdateOne {
	nuo.mutation.ClearAnnotations()
	return nuo
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveAnnotationIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveAnnotationIDs(ids...)
	return nuo
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (nuo *NamespaceUpdateOne) RemoveAnnotations(a ...*Annotation) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.RemoveAnnotationIDs(ids...)
}

// ClearCloudeventfilters clears all "cloudeventfilters" edges to the CloudEventFilters entity.
func (nuo *NamespaceUpdateOne) ClearCloudeventfilters() *NamespaceUpdateOne {
	nuo.mutation.ClearCloudeventfilters()
	return nuo
}

// RemoveCloudeventfilterIDs removes the "cloudeventfilters" edge to CloudEventFilters entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveCloudeventfilterIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.RemoveCloudeventfilterIDs(ids...)
	return nuo
}

// RemoveCloudeventfilters removes "cloudeventfilters" edges to CloudEventFilters entities.
func (nuo *NamespaceUpdateOne) RemoveCloudeventfilters(c ...*CloudEventFilters) *NamespaceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveCloudeventfilterIDs(ids...)
}

// ClearServices clears all "services" edges to the Services entity.
func (nuo *NamespaceUpdateOne) ClearServices() *NamespaceUpdateOne {
	nuo.mutation.ClearServices()
	return nuo
}

// RemoveServiceIDs removes the "services" edge to Services entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveServiceIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveServiceIDs(ids...)
	return nuo
}

// RemoveServices removes "services" edges to Services entities.
func (nuo *NamespaceUpdateOne) RemoveServices(s ...*Services) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.RemoveServiceIDs(ids...)
}

// Where appends a list predicates to the NamespaceUpdate builder.
func (nuo *NamespaceUpdateOne) Where(ps ...predicate.Namespace) *NamespaceUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NamespaceUpdateOne) Select(field string, fields ...string) *NamespaceUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Namespace entity.
func (nuo *NamespaceUpdateOne) Save(ctx context.Context) (*Namespace, error) {
	nuo.defaults()
	return withHooks[*Namespace, NamespaceMutation](ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) SaveX(ctx context.Context) *Namespace {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NamespaceUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := namespace.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NamespaceUpdateOne) check() error {
	if v, ok := nuo.mutation.Name(); ok {
		if err := namespace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Namespace.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nuo *NamespaceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NamespaceUpdateOne {
	nuo.modifiers = append(nuo.modifiers, modifiers...)
	return nuo
}

func (nuo *NamespaceUpdateOne) sqlSave(ctx context.Context) (_node *Namespace, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(namespace.Table, namespace.Columns, sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeUUID))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Namespace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, namespace.FieldID)
		for _, f := range fields {
			if !namespace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != namespace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(namespace.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.Config(); ok {
		_spec.SetField(namespace.FieldConfig, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(namespace.FieldName, field.TypeString, value)
	}
	if nuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !nuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logmsg.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedLogsIDs(); len(nodes) > 0 && !nuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logmsg.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logmsg.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CloudeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudevents.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedCloudeventsIDs(); len(nodes) > 0 && !nuo.mutation.CloudeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudevents.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CloudeventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudevents.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NamespacelistenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNamespacelistenersIDs(); len(nodes) > 0 && !nuo.mutation.NamespacelistenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NamespacelistenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(events.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AnnotationsTable,
			Columns: []string{namespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !nuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AnnotationsTable,
			Columns: []string{namespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.AnnotationsTable,
			Columns: []string{namespace.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CloudeventfiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventfiltersTable,
			Columns: []string{namespace.CloudeventfiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudeventfilters.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedCloudeventfiltersIDs(); len(nodes) > 0 && !nuo.mutation.CloudeventfiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventfiltersTable,
			Columns: []string{namespace.CloudeventfiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudeventfilters.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CloudeventfiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventfiltersTable,
			Columns: []string{namespace.CloudeventfiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cloudeventfilters.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ServicesTable,
			Columns: []string{namespace.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(services.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedServicesIDs(); len(nodes) > 0 && !nuo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ServicesTable,
			Columns: []string{namespace.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(services.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ServicesTable,
			Columns: []string{namespace.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(services.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(nuo.modifiers...)
	_node = &Namespace{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
