// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/cloudevents"
	"github.com/direktiv/direktiv/pkg/flow/ent/events"
	"github.com/direktiv/direktiv/pkg/flow/ent/inode"
	"github.com/direktiv/direktiv/pkg/flow/ent/instance"
	"github.com/direktiv/direktiv/pkg/flow/ent/logmsg"
	"github.com/direktiv/direktiv/pkg/flow/ent/mirror"
	"github.com/direktiv/direktiv/pkg/flow/ent/mirroractivity"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/direktiv/direktiv/pkg/flow/ent/varref"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// NamespaceUpdate is the builder for updating Namespace entities.
type NamespaceUpdate struct {
	config
	hooks    []Hook
	mutation *NamespaceMutation
}

// Where appends a list predicates to the NamespaceUpdate builder.
func (nu *NamespaceUpdate) Where(ps ...predicate.Namespace) *NamespaceUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NamespaceUpdate) SetUpdatedAt(t time.Time) *NamespaceUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetConfig sets the "config" field.
func (nu *NamespaceUpdate) SetConfig(s string) *NamespaceUpdate {
	nu.mutation.SetConfig(s)
	return nu
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (nu *NamespaceUpdate) SetNillableConfig(s *string) *NamespaceUpdate {
	if s != nil {
		nu.SetConfig(*s)
	}
	return nu
}

// SetName sets the "name" field.
func (nu *NamespaceUpdate) SetName(s string) *NamespaceUpdate {
	nu.mutation.SetName(s)
	return nu
}

// AddInodeIDs adds the "inodes" edge to the Inode entity by IDs.
func (nu *NamespaceUpdate) AddInodeIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddInodeIDs(ids...)
	return nu
}

// AddInodes adds the "inodes" edges to the Inode entity.
func (nu *NamespaceUpdate) AddInodes(i ...*Inode) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.AddInodeIDs(ids...)
}

// AddWorkflowIDs adds the "workflows" edge to the Workflow entity by IDs.
func (nu *NamespaceUpdate) AddWorkflowIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddWorkflowIDs(ids...)
	return nu
}

// AddWorkflows adds the "workflows" edges to the Workflow entity.
func (nu *NamespaceUpdate) AddWorkflows(w ...*Workflow) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return nu.AddWorkflowIDs(ids...)
}

// AddMirrorIDs adds the "mirrors" edge to the Mirror entity by IDs.
func (nu *NamespaceUpdate) AddMirrorIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddMirrorIDs(ids...)
	return nu
}

// AddMirrors adds the "mirrors" edges to the Mirror entity.
func (nu *NamespaceUpdate) AddMirrors(m ...*Mirror) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.AddMirrorIDs(ids...)
}

// AddMirrorActivityIDs adds the "mirror_activities" edge to the MirrorActivity entity by IDs.
func (nu *NamespaceUpdate) AddMirrorActivityIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddMirrorActivityIDs(ids...)
	return nu
}

// AddMirrorActivities adds the "mirror_activities" edges to the MirrorActivity entity.
func (nu *NamespaceUpdate) AddMirrorActivities(m ...*MirrorActivity) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.AddMirrorActivityIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the Instance entity by IDs.
func (nu *NamespaceUpdate) AddInstanceIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddInstanceIDs(ids...)
	return nu
}

// AddInstances adds the "instances" edges to the Instance entity.
func (nu *NamespaceUpdate) AddInstances(i ...*Instance) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.AddInstanceIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the LogMsg entity by IDs.
func (nu *NamespaceUpdate) AddLogIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddLogIDs(ids...)
	return nu
}

// AddLogs adds the "logs" edges to the LogMsg entity.
func (nu *NamespaceUpdate) AddLogs(l ...*LogMsg) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return nu.AddLogIDs(ids...)
}

// AddVarIDs adds the "vars" edge to the VarRef entity by IDs.
func (nu *NamespaceUpdate) AddVarIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddVarIDs(ids...)
	return nu
}

// AddVars adds the "vars" edges to the VarRef entity.
func (nu *NamespaceUpdate) AddVars(v ...*VarRef) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nu.AddVarIDs(ids...)
}

// AddCloudeventIDs adds the "cloudevents" edge to the CloudEvents entity by IDs.
func (nu *NamespaceUpdate) AddCloudeventIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddCloudeventIDs(ids...)
	return nu
}

// AddCloudevents adds the "cloudevents" edges to the CloudEvents entity.
func (nu *NamespaceUpdate) AddCloudevents(c ...*CloudEvents) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddCloudeventIDs(ids...)
}

// AddNamespacelistenerIDs adds the "namespacelisteners" edge to the Events entity by IDs.
func (nu *NamespaceUpdate) AddNamespacelistenerIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.AddNamespacelistenerIDs(ids...)
	return nu
}

// AddNamespacelisteners adds the "namespacelisteners" edges to the Events entity.
func (nu *NamespaceUpdate) AddNamespacelisteners(e ...*Events) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.AddNamespacelistenerIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nu *NamespaceUpdate) Mutation() *NamespaceMutation {
	return nu.mutation
}

// ClearInodes clears all "inodes" edges to the Inode entity.
func (nu *NamespaceUpdate) ClearInodes() *NamespaceUpdate {
	nu.mutation.ClearInodes()
	return nu
}

// RemoveInodeIDs removes the "inodes" edge to Inode entities by IDs.
func (nu *NamespaceUpdate) RemoveInodeIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveInodeIDs(ids...)
	return nu
}

// RemoveInodes removes "inodes" edges to Inode entities.
func (nu *NamespaceUpdate) RemoveInodes(i ...*Inode) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.RemoveInodeIDs(ids...)
}

// ClearWorkflows clears all "workflows" edges to the Workflow entity.
func (nu *NamespaceUpdate) ClearWorkflows() *NamespaceUpdate {
	nu.mutation.ClearWorkflows()
	return nu
}

// RemoveWorkflowIDs removes the "workflows" edge to Workflow entities by IDs.
func (nu *NamespaceUpdate) RemoveWorkflowIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveWorkflowIDs(ids...)
	return nu
}

// RemoveWorkflows removes "workflows" edges to Workflow entities.
func (nu *NamespaceUpdate) RemoveWorkflows(w ...*Workflow) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return nu.RemoveWorkflowIDs(ids...)
}

// ClearMirrors clears all "mirrors" edges to the Mirror entity.
func (nu *NamespaceUpdate) ClearMirrors() *NamespaceUpdate {
	nu.mutation.ClearMirrors()
	return nu
}

// RemoveMirrorIDs removes the "mirrors" edge to Mirror entities by IDs.
func (nu *NamespaceUpdate) RemoveMirrorIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveMirrorIDs(ids...)
	return nu
}

// RemoveMirrors removes "mirrors" edges to Mirror entities.
func (nu *NamespaceUpdate) RemoveMirrors(m ...*Mirror) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.RemoveMirrorIDs(ids...)
}

// ClearMirrorActivities clears all "mirror_activities" edges to the MirrorActivity entity.
func (nu *NamespaceUpdate) ClearMirrorActivities() *NamespaceUpdate {
	nu.mutation.ClearMirrorActivities()
	return nu
}

// RemoveMirrorActivityIDs removes the "mirror_activities" edge to MirrorActivity entities by IDs.
func (nu *NamespaceUpdate) RemoveMirrorActivityIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveMirrorActivityIDs(ids...)
	return nu
}

// RemoveMirrorActivities removes "mirror_activities" edges to MirrorActivity entities.
func (nu *NamespaceUpdate) RemoveMirrorActivities(m ...*MirrorActivity) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nu.RemoveMirrorActivityIDs(ids...)
}

// ClearInstances clears all "instances" edges to the Instance entity.
func (nu *NamespaceUpdate) ClearInstances() *NamespaceUpdate {
	nu.mutation.ClearInstances()
	return nu
}

// RemoveInstanceIDs removes the "instances" edge to Instance entities by IDs.
func (nu *NamespaceUpdate) RemoveInstanceIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveInstanceIDs(ids...)
	return nu
}

// RemoveInstances removes "instances" edges to Instance entities.
func (nu *NamespaceUpdate) RemoveInstances(i ...*Instance) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.RemoveInstanceIDs(ids...)
}

// ClearLogs clears all "logs" edges to the LogMsg entity.
func (nu *NamespaceUpdate) ClearLogs() *NamespaceUpdate {
	nu.mutation.ClearLogs()
	return nu
}

// RemoveLogIDs removes the "logs" edge to LogMsg entities by IDs.
func (nu *NamespaceUpdate) RemoveLogIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveLogIDs(ids...)
	return nu
}

// RemoveLogs removes "logs" edges to LogMsg entities.
func (nu *NamespaceUpdate) RemoveLogs(l ...*LogMsg) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return nu.RemoveLogIDs(ids...)
}

// ClearVars clears all "vars" edges to the VarRef entity.
func (nu *NamespaceUpdate) ClearVars() *NamespaceUpdate {
	nu.mutation.ClearVars()
	return nu
}

// RemoveVarIDs removes the "vars" edge to VarRef entities by IDs.
func (nu *NamespaceUpdate) RemoveVarIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveVarIDs(ids...)
	return nu
}

// RemoveVars removes "vars" edges to VarRef entities.
func (nu *NamespaceUpdate) RemoveVars(v ...*VarRef) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nu.RemoveVarIDs(ids...)
}

// ClearCloudevents clears all "cloudevents" edges to the CloudEvents entity.
func (nu *NamespaceUpdate) ClearCloudevents() *NamespaceUpdate {
	nu.mutation.ClearCloudevents()
	return nu
}

// RemoveCloudeventIDs removes the "cloudevents" edge to CloudEvents entities by IDs.
func (nu *NamespaceUpdate) RemoveCloudeventIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveCloudeventIDs(ids...)
	return nu
}

// RemoveCloudevents removes "cloudevents" edges to CloudEvents entities.
func (nu *NamespaceUpdate) RemoveCloudevents(c ...*CloudEvents) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveCloudeventIDs(ids...)
}

// ClearNamespacelisteners clears all "namespacelisteners" edges to the Events entity.
func (nu *NamespaceUpdate) ClearNamespacelisteners() *NamespaceUpdate {
	nu.mutation.ClearNamespacelisteners()
	return nu
}

// RemoveNamespacelistenerIDs removes the "namespacelisteners" edge to Events entities by IDs.
func (nu *NamespaceUpdate) RemoveNamespacelistenerIDs(ids ...uuid.UUID) *NamespaceUpdate {
	nu.mutation.RemoveNamespacelistenerIDs(ids...)
	return nu
}

// RemoveNamespacelisteners removes "namespacelisteners" edges to Events entities.
func (nu *NamespaceUpdate) RemoveNamespacelisteners(e ...*Events) *NamespaceUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.RemoveNamespacelistenerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NamespaceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nu.defaults()
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamespaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NamespaceUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NamespaceUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NamespaceUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := namespace.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NamespaceUpdate) check() error {
	if v, ok := nu.mutation.Name(); ok {
		if err := namespace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Namespace.name": %w`, err)}
		}
	}
	return nil
}

func (nu *NamespaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   namespace.Table,
			Columns: namespace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: namespace.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(namespace.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.Config(); ok {
		_spec.SetField(namespace.FieldConfig, field.TypeString, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(namespace.FieldName, field.TypeString, value)
	}
	if nu.mutation.InodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InodesTable,
			Columns: []string{namespace.InodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedInodesIDs(); len(nodes) > 0 && !nu.mutation.InodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InodesTable,
			Columns: []string{namespace.InodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.InodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InodesTable,
			Columns: []string{namespace.InodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.WorkflowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.WorkflowsTable,
			Columns: []string{namespace.WorkflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedWorkflowsIDs(); len(nodes) > 0 && !nu.mutation.WorkflowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.WorkflowsTable,
			Columns: []string{namespace.WorkflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.WorkflowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.WorkflowsTable,
			Columns: []string{namespace.WorkflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.MirrorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorsTable,
			Columns: []string{namespace.MirrorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedMirrorsIDs(); len(nodes) > 0 && !nu.mutation.MirrorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorsTable,
			Columns: []string{namespace.MirrorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.MirrorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorsTable,
			Columns: []string{namespace.MirrorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.MirrorActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorActivitiesTable,
			Columns: []string{namespace.MirrorActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirroractivity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedMirrorActivitiesIDs(); len(nodes) > 0 && !nu.mutation.MirrorActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorActivitiesTable,
			Columns: []string{namespace.MirrorActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirroractivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.MirrorActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorActivitiesTable,
			Columns: []string{namespace.MirrorActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirroractivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !nu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedLogsIDs(); len(nodes) > 0 && !nu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.VarsTable,
			Columns: []string{namespace.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedVarsIDs(); len(nodes) > 0 && !nu.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.VarsTable,
			Columns: []string{namespace.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.VarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.VarsTable,
			Columns: []string{namespace.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CloudeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cloudevents.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedCloudeventsIDs(); len(nodes) > 0 && !nu.mutation.CloudeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cloudevents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CloudeventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cloudevents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NamespacelistenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNamespacelistenersIDs(); len(nodes) > 0 && !nu.mutation.NamespacelistenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NamespacelistenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NamespaceUpdateOne is the builder for updating a single Namespace entity.
type NamespaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NamespaceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NamespaceUpdateOne) SetUpdatedAt(t time.Time) *NamespaceUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetConfig sets the "config" field.
func (nuo *NamespaceUpdateOne) SetConfig(s string) *NamespaceUpdateOne {
	nuo.mutation.SetConfig(s)
	return nuo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (nuo *NamespaceUpdateOne) SetNillableConfig(s *string) *NamespaceUpdateOne {
	if s != nil {
		nuo.SetConfig(*s)
	}
	return nuo
}

// SetName sets the "name" field.
func (nuo *NamespaceUpdateOne) SetName(s string) *NamespaceUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// AddInodeIDs adds the "inodes" edge to the Inode entity by IDs.
func (nuo *NamespaceUpdateOne) AddInodeIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddInodeIDs(ids...)
	return nuo
}

// AddInodes adds the "inodes" edges to the Inode entity.
func (nuo *NamespaceUpdateOne) AddInodes(i ...*Inode) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.AddInodeIDs(ids...)
}

// AddWorkflowIDs adds the "workflows" edge to the Workflow entity by IDs.
func (nuo *NamespaceUpdateOne) AddWorkflowIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddWorkflowIDs(ids...)
	return nuo
}

// AddWorkflows adds the "workflows" edges to the Workflow entity.
func (nuo *NamespaceUpdateOne) AddWorkflows(w ...*Workflow) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return nuo.AddWorkflowIDs(ids...)
}

// AddMirrorIDs adds the "mirrors" edge to the Mirror entity by IDs.
func (nuo *NamespaceUpdateOne) AddMirrorIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddMirrorIDs(ids...)
	return nuo
}

// AddMirrors adds the "mirrors" edges to the Mirror entity.
func (nuo *NamespaceUpdateOne) AddMirrors(m ...*Mirror) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.AddMirrorIDs(ids...)
}

// AddMirrorActivityIDs adds the "mirror_activities" edge to the MirrorActivity entity by IDs.
func (nuo *NamespaceUpdateOne) AddMirrorActivityIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddMirrorActivityIDs(ids...)
	return nuo
}

// AddMirrorActivities adds the "mirror_activities" edges to the MirrorActivity entity.
func (nuo *NamespaceUpdateOne) AddMirrorActivities(m ...*MirrorActivity) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.AddMirrorActivityIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the Instance entity by IDs.
func (nuo *NamespaceUpdateOne) AddInstanceIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddInstanceIDs(ids...)
	return nuo
}

// AddInstances adds the "instances" edges to the Instance entity.
func (nuo *NamespaceUpdateOne) AddInstances(i ...*Instance) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.AddInstanceIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the LogMsg entity by IDs.
func (nuo *NamespaceUpdateOne) AddLogIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddLogIDs(ids...)
	return nuo
}

// AddLogs adds the "logs" edges to the LogMsg entity.
func (nuo *NamespaceUpdateOne) AddLogs(l ...*LogMsg) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return nuo.AddLogIDs(ids...)
}

// AddVarIDs adds the "vars" edge to the VarRef entity by IDs.
func (nuo *NamespaceUpdateOne) AddVarIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddVarIDs(ids...)
	return nuo
}

// AddVars adds the "vars" edges to the VarRef entity.
func (nuo *NamespaceUpdateOne) AddVars(v ...*VarRef) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nuo.AddVarIDs(ids...)
}

// AddCloudeventIDs adds the "cloudevents" edge to the CloudEvents entity by IDs.
func (nuo *NamespaceUpdateOne) AddCloudeventIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddCloudeventIDs(ids...)
	return nuo
}

// AddCloudevents adds the "cloudevents" edges to the CloudEvents entity.
func (nuo *NamespaceUpdateOne) AddCloudevents(c ...*CloudEvents) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddCloudeventIDs(ids...)
}

// AddNamespacelistenerIDs adds the "namespacelisteners" edge to the Events entity by IDs.
func (nuo *NamespaceUpdateOne) AddNamespacelistenerIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.AddNamespacelistenerIDs(ids...)
	return nuo
}

// AddNamespacelisteners adds the "namespacelisteners" edges to the Events entity.
func (nuo *NamespaceUpdateOne) AddNamespacelisteners(e ...*Events) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.AddNamespacelistenerIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nuo *NamespaceUpdateOne) Mutation() *NamespaceMutation {
	return nuo.mutation
}

// ClearInodes clears all "inodes" edges to the Inode entity.
func (nuo *NamespaceUpdateOne) ClearInodes() *NamespaceUpdateOne {
	nuo.mutation.ClearInodes()
	return nuo
}

// RemoveInodeIDs removes the "inodes" edge to Inode entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveInodeIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveInodeIDs(ids...)
	return nuo
}

// RemoveInodes removes "inodes" edges to Inode entities.
func (nuo *NamespaceUpdateOne) RemoveInodes(i ...*Inode) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.RemoveInodeIDs(ids...)
}

// ClearWorkflows clears all "workflows" edges to the Workflow entity.
func (nuo *NamespaceUpdateOne) ClearWorkflows() *NamespaceUpdateOne {
	nuo.mutation.ClearWorkflows()
	return nuo
}

// RemoveWorkflowIDs removes the "workflows" edge to Workflow entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveWorkflowIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveWorkflowIDs(ids...)
	return nuo
}

// RemoveWorkflows removes "workflows" edges to Workflow entities.
func (nuo *NamespaceUpdateOne) RemoveWorkflows(w ...*Workflow) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return nuo.RemoveWorkflowIDs(ids...)
}

// ClearMirrors clears all "mirrors" edges to the Mirror entity.
func (nuo *NamespaceUpdateOne) ClearMirrors() *NamespaceUpdateOne {
	nuo.mutation.ClearMirrors()
	return nuo
}

// RemoveMirrorIDs removes the "mirrors" edge to Mirror entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveMirrorIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveMirrorIDs(ids...)
	return nuo
}

// RemoveMirrors removes "mirrors" edges to Mirror entities.
func (nuo *NamespaceUpdateOne) RemoveMirrors(m ...*Mirror) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.RemoveMirrorIDs(ids...)
}

// ClearMirrorActivities clears all "mirror_activities" edges to the MirrorActivity entity.
func (nuo *NamespaceUpdateOne) ClearMirrorActivities() *NamespaceUpdateOne {
	nuo.mutation.ClearMirrorActivities()
	return nuo
}

// RemoveMirrorActivityIDs removes the "mirror_activities" edge to MirrorActivity entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveMirrorActivityIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveMirrorActivityIDs(ids...)
	return nuo
}

// RemoveMirrorActivities removes "mirror_activities" edges to MirrorActivity entities.
func (nuo *NamespaceUpdateOne) RemoveMirrorActivities(m ...*MirrorActivity) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nuo.RemoveMirrorActivityIDs(ids...)
}

// ClearInstances clears all "instances" edges to the Instance entity.
func (nuo *NamespaceUpdateOne) ClearInstances() *NamespaceUpdateOne {
	nuo.mutation.ClearInstances()
	return nuo
}

// RemoveInstanceIDs removes the "instances" edge to Instance entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveInstanceIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveInstanceIDs(ids...)
	return nuo
}

// RemoveInstances removes "instances" edges to Instance entities.
func (nuo *NamespaceUpdateOne) RemoveInstances(i ...*Instance) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.RemoveInstanceIDs(ids...)
}

// ClearLogs clears all "logs" edges to the LogMsg entity.
func (nuo *NamespaceUpdateOne) ClearLogs() *NamespaceUpdateOne {
	nuo.mutation.ClearLogs()
	return nuo
}

// RemoveLogIDs removes the "logs" edge to LogMsg entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveLogIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveLogIDs(ids...)
	return nuo
}

// RemoveLogs removes "logs" edges to LogMsg entities.
func (nuo *NamespaceUpdateOne) RemoveLogs(l ...*LogMsg) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return nuo.RemoveLogIDs(ids...)
}

// ClearVars clears all "vars" edges to the VarRef entity.
func (nuo *NamespaceUpdateOne) ClearVars() *NamespaceUpdateOne {
	nuo.mutation.ClearVars()
	return nuo
}

// RemoveVarIDs removes the "vars" edge to VarRef entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveVarIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveVarIDs(ids...)
	return nuo
}

// RemoveVars removes "vars" edges to VarRef entities.
func (nuo *NamespaceUpdateOne) RemoveVars(v ...*VarRef) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return nuo.RemoveVarIDs(ids...)
}

// ClearCloudevents clears all "cloudevents" edges to the CloudEvents entity.
func (nuo *NamespaceUpdateOne) ClearCloudevents() *NamespaceUpdateOne {
	nuo.mutation.ClearCloudevents()
	return nuo
}

// RemoveCloudeventIDs removes the "cloudevents" edge to CloudEvents entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveCloudeventIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveCloudeventIDs(ids...)
	return nuo
}

// RemoveCloudevents removes "cloudevents" edges to CloudEvents entities.
func (nuo *NamespaceUpdateOne) RemoveCloudevents(c ...*CloudEvents) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveCloudeventIDs(ids...)
}

// ClearNamespacelisteners clears all "namespacelisteners" edges to the Events entity.
func (nuo *NamespaceUpdateOne) ClearNamespacelisteners() *NamespaceUpdateOne {
	nuo.mutation.ClearNamespacelisteners()
	return nuo
}

// RemoveNamespacelistenerIDs removes the "namespacelisteners" edge to Events entities by IDs.
func (nuo *NamespaceUpdateOne) RemoveNamespacelistenerIDs(ids ...uuid.UUID) *NamespaceUpdateOne {
	nuo.mutation.RemoveNamespacelistenerIDs(ids...)
	return nuo
}

// RemoveNamespacelisteners removes "namespacelisteners" edges to Events entities.
func (nuo *NamespaceUpdateOne) RemoveNamespacelisteners(e ...*Events) *NamespaceUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.RemoveNamespacelistenerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NamespaceUpdateOne) Select(field string, fields ...string) *NamespaceUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Namespace entity.
func (nuo *NamespaceUpdateOne) Save(ctx context.Context) (*Namespace, error) {
	var (
		err  error
		node *Namespace
	)
	nuo.defaults()
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamespaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Namespace)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NamespaceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) SaveX(ctx context.Context) *Namespace {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NamespaceUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := namespace.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NamespaceUpdateOne) check() error {
	if v, ok := nuo.mutation.Name(); ok {
		if err := namespace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Namespace.name": %w`, err)}
		}
	}
	return nil
}

func (nuo *NamespaceUpdateOne) sqlSave(ctx context.Context) (_node *Namespace, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   namespace.Table,
			Columns: namespace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: namespace.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Namespace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, namespace.FieldID)
		for _, f := range fields {
			if !namespace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != namespace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(namespace.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.Config(); ok {
		_spec.SetField(namespace.FieldConfig, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(namespace.FieldName, field.TypeString, value)
	}
	if nuo.mutation.InodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InodesTable,
			Columns: []string{namespace.InodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedInodesIDs(); len(nodes) > 0 && !nuo.mutation.InodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InodesTable,
			Columns: []string{namespace.InodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.InodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InodesTable,
			Columns: []string{namespace.InodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.WorkflowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.WorkflowsTable,
			Columns: []string{namespace.WorkflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedWorkflowsIDs(); len(nodes) > 0 && !nuo.mutation.WorkflowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.WorkflowsTable,
			Columns: []string{namespace.WorkflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.WorkflowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.WorkflowsTable,
			Columns: []string{namespace.WorkflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.MirrorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorsTable,
			Columns: []string{namespace.MirrorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedMirrorsIDs(); len(nodes) > 0 && !nuo.mutation.MirrorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorsTable,
			Columns: []string{namespace.MirrorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.MirrorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorsTable,
			Columns: []string{namespace.MirrorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.MirrorActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorActivitiesTable,
			Columns: []string{namespace.MirrorActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirroractivity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedMirrorActivitiesIDs(); len(nodes) > 0 && !nuo.mutation.MirrorActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorActivitiesTable,
			Columns: []string{namespace.MirrorActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirroractivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.MirrorActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.MirrorActivitiesTable,
			Columns: []string{namespace.MirrorActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirroractivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !nuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.InstancesTable,
			Columns: []string{namespace.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedLogsIDs(); len(nodes) > 0 && !nuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.LogsTable,
			Columns: []string{namespace.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.VarsTable,
			Columns: []string{namespace.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedVarsIDs(); len(nodes) > 0 && !nuo.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.VarsTable,
			Columns: []string{namespace.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.VarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.VarsTable,
			Columns: []string{namespace.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CloudeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cloudevents.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedCloudeventsIDs(); len(nodes) > 0 && !nuo.mutation.CloudeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cloudevents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CloudeventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.CloudeventsTable,
			Columns: []string{namespace.CloudeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: cloudevents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NamespacelistenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNamespacelistenersIDs(); len(nodes) > 0 && !nuo.mutation.NamespacelistenersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NamespacelistenersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.NamespacelistenersTable,
			Columns: []string{namespace.NamespacelistenersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Namespace{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
