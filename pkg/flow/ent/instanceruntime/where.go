// Code generated by ent, DO NOT EDIT.

package instanceruntime

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldID, id))
}

// Input applies equality check predicate on the "input" field. It's identical to InputEQ.
func Input(v []byte) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldInput, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldData, v))
}

// Controller applies equality check predicate on the "controller" field. It's identical to ControllerEQ.
func Controller(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldController, v))
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldMemory, v))
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldOutput, v))
}

// StateBeginTime applies equality check predicate on the "stateBeginTime" field. It's identical to StateBeginTimeEQ.
func StateBeginTime(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldStateBeginTime, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldDeadline, v))
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldAttempts, v))
}

// CallerData applies equality check predicate on the "caller_data" field. It's identical to CallerDataEQ.
func CallerData(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldCallerData, v))
}

// InstanceContext applies equality check predicate on the "instanceContext" field. It's identical to InstanceContextEQ.
func InstanceContext(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldInstanceContext, v))
}

// StateContext applies equality check predicate on the "stateContext" field. It's identical to StateContextEQ.
func StateContext(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldStateContext, v))
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldMetadata, v))
}

// LogToEvents applies equality check predicate on the "logToEvents" field. It's identical to LogToEventsEQ.
func LogToEvents(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldLogToEvents, v))
}

// InputEQ applies the EQ predicate on the "input" field.
func InputEQ(v []byte) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldInput, v))
}

// InputNEQ applies the NEQ predicate on the "input" field.
func InputNEQ(v []byte) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldInput, v))
}

// InputIn applies the In predicate on the "input" field.
func InputIn(vs ...[]byte) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldInput, vs...))
}

// InputNotIn applies the NotIn predicate on the "input" field.
func InputNotIn(vs ...[]byte) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldInput, vs...))
}

// InputGT applies the GT predicate on the "input" field.
func InputGT(v []byte) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldInput, v))
}

// InputGTE applies the GTE predicate on the "input" field.
func InputGTE(v []byte) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldInput, v))
}

// InputLT applies the LT predicate on the "input" field.
func InputLT(v []byte) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldInput, v))
}

// InputLTE applies the LTE predicate on the "input" field.
func InputLTE(v []byte) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldInput, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldData, v))
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContains(FieldData, v))
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasPrefix(FieldData, v))
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasSuffix(FieldData, v))
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEqualFold(FieldData, v))
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContainsFold(FieldData, v))
}

// ControllerEQ applies the EQ predicate on the "controller" field.
func ControllerEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldController, v))
}

// ControllerNEQ applies the NEQ predicate on the "controller" field.
func ControllerNEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldController, v))
}

// ControllerIn applies the In predicate on the "controller" field.
func ControllerIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldController, vs...))
}

// ControllerNotIn applies the NotIn predicate on the "controller" field.
func ControllerNotIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldController, vs...))
}

// ControllerGT applies the GT predicate on the "controller" field.
func ControllerGT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldController, v))
}

// ControllerGTE applies the GTE predicate on the "controller" field.
func ControllerGTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldController, v))
}

// ControllerLT applies the LT predicate on the "controller" field.
func ControllerLT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldController, v))
}

// ControllerLTE applies the LTE predicate on the "controller" field.
func ControllerLTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldController, v))
}

// ControllerContains applies the Contains predicate on the "controller" field.
func ControllerContains(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContains(FieldController, v))
}

// ControllerHasPrefix applies the HasPrefix predicate on the "controller" field.
func ControllerHasPrefix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasPrefix(FieldController, v))
}

// ControllerHasSuffix applies the HasSuffix predicate on the "controller" field.
func ControllerHasSuffix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasSuffix(FieldController, v))
}

// ControllerIsNil applies the IsNil predicate on the "controller" field.
func ControllerIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldController))
}

// ControllerNotNil applies the NotNil predicate on the "controller" field.
func ControllerNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldController))
}

// ControllerEqualFold applies the EqualFold predicate on the "controller" field.
func ControllerEqualFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEqualFold(FieldController, v))
}

// ControllerContainsFold applies the ContainsFold predicate on the "controller" field.
func ControllerContainsFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContainsFold(FieldController, v))
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldMemory, v))
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldMemory, v))
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldMemory, vs...))
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldMemory, vs...))
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldMemory, v))
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldMemory, v))
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldMemory, v))
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldMemory, v))
}

// MemoryContains applies the Contains predicate on the "memory" field.
func MemoryContains(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContains(FieldMemory, v))
}

// MemoryHasPrefix applies the HasPrefix predicate on the "memory" field.
func MemoryHasPrefix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasPrefix(FieldMemory, v))
}

// MemoryHasSuffix applies the HasSuffix predicate on the "memory" field.
func MemoryHasSuffix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasSuffix(FieldMemory, v))
}

// MemoryIsNil applies the IsNil predicate on the "memory" field.
func MemoryIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldMemory))
}

// MemoryNotNil applies the NotNil predicate on the "memory" field.
func MemoryNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldMemory))
}

// MemoryEqualFold applies the EqualFold predicate on the "memory" field.
func MemoryEqualFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEqualFold(FieldMemory, v))
}

// MemoryContainsFold applies the ContainsFold predicate on the "memory" field.
func MemoryContainsFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContainsFold(FieldMemory, v))
}

// FlowIsNil applies the IsNil predicate on the "flow" field.
func FlowIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldFlow))
}

// FlowNotNil applies the NotNil predicate on the "flow" field.
func FlowNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldFlow))
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldOutput, v))
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldOutput, v))
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldOutput, vs...))
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldOutput, vs...))
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldOutput, v))
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldOutput, v))
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldOutput, v))
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldOutput, v))
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContains(FieldOutput, v))
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasPrefix(FieldOutput, v))
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasSuffix(FieldOutput, v))
}

// OutputIsNil applies the IsNil predicate on the "output" field.
func OutputIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldOutput))
}

// OutputNotNil applies the NotNil predicate on the "output" field.
func OutputNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldOutput))
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEqualFold(FieldOutput, v))
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContainsFold(FieldOutput, v))
}

// StateBeginTimeEQ applies the EQ predicate on the "stateBeginTime" field.
func StateBeginTimeEQ(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldStateBeginTime, v))
}

// StateBeginTimeNEQ applies the NEQ predicate on the "stateBeginTime" field.
func StateBeginTimeNEQ(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldStateBeginTime, v))
}

// StateBeginTimeIn applies the In predicate on the "stateBeginTime" field.
func StateBeginTimeIn(vs ...time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldStateBeginTime, vs...))
}

// StateBeginTimeNotIn applies the NotIn predicate on the "stateBeginTime" field.
func StateBeginTimeNotIn(vs ...time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldStateBeginTime, vs...))
}

// StateBeginTimeGT applies the GT predicate on the "stateBeginTime" field.
func StateBeginTimeGT(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldStateBeginTime, v))
}

// StateBeginTimeGTE applies the GTE predicate on the "stateBeginTime" field.
func StateBeginTimeGTE(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldStateBeginTime, v))
}

// StateBeginTimeLT applies the LT predicate on the "stateBeginTime" field.
func StateBeginTimeLT(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldStateBeginTime, v))
}

// StateBeginTimeLTE applies the LTE predicate on the "stateBeginTime" field.
func StateBeginTimeLTE(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldStateBeginTime, v))
}

// StateBeginTimeIsNil applies the IsNil predicate on the "stateBeginTime" field.
func StateBeginTimeIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldStateBeginTime))
}

// StateBeginTimeNotNil applies the NotNil predicate on the "stateBeginTime" field.
func StateBeginTimeNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldStateBeginTime))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v time.Time) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldDeadline, v))
}

// DeadlineIsNil applies the IsNil predicate on the "deadline" field.
func DeadlineIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldDeadline))
}

// DeadlineNotNil applies the NotNil predicate on the "deadline" field.
func DeadlineNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldDeadline))
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldAttempts, v))
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldAttempts, v))
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldAttempts, vs...))
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldAttempts, vs...))
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldAttempts, v))
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldAttempts, v))
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldAttempts, v))
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldAttempts, v))
}

// AttemptsIsNil applies the IsNil predicate on the "attempts" field.
func AttemptsIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldAttempts))
}

// AttemptsNotNil applies the NotNil predicate on the "attempts" field.
func AttemptsNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldAttempts))
}

// CallerDataEQ applies the EQ predicate on the "caller_data" field.
func CallerDataEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldCallerData, v))
}

// CallerDataNEQ applies the NEQ predicate on the "caller_data" field.
func CallerDataNEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldCallerData, v))
}

// CallerDataIn applies the In predicate on the "caller_data" field.
func CallerDataIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldCallerData, vs...))
}

// CallerDataNotIn applies the NotIn predicate on the "caller_data" field.
func CallerDataNotIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldCallerData, vs...))
}

// CallerDataGT applies the GT predicate on the "caller_data" field.
func CallerDataGT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldCallerData, v))
}

// CallerDataGTE applies the GTE predicate on the "caller_data" field.
func CallerDataGTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldCallerData, v))
}

// CallerDataLT applies the LT predicate on the "caller_data" field.
func CallerDataLT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldCallerData, v))
}

// CallerDataLTE applies the LTE predicate on the "caller_data" field.
func CallerDataLTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldCallerData, v))
}

// CallerDataContains applies the Contains predicate on the "caller_data" field.
func CallerDataContains(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContains(FieldCallerData, v))
}

// CallerDataHasPrefix applies the HasPrefix predicate on the "caller_data" field.
func CallerDataHasPrefix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasPrefix(FieldCallerData, v))
}

// CallerDataHasSuffix applies the HasSuffix predicate on the "caller_data" field.
func CallerDataHasSuffix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasSuffix(FieldCallerData, v))
}

// CallerDataIsNil applies the IsNil predicate on the "caller_data" field.
func CallerDataIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldCallerData))
}

// CallerDataNotNil applies the NotNil predicate on the "caller_data" field.
func CallerDataNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldCallerData))
}

// CallerDataEqualFold applies the EqualFold predicate on the "caller_data" field.
func CallerDataEqualFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEqualFold(FieldCallerData, v))
}

// CallerDataContainsFold applies the ContainsFold predicate on the "caller_data" field.
func CallerDataContainsFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContainsFold(FieldCallerData, v))
}

// InstanceContextEQ applies the EQ predicate on the "instanceContext" field.
func InstanceContextEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldInstanceContext, v))
}

// InstanceContextNEQ applies the NEQ predicate on the "instanceContext" field.
func InstanceContextNEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldInstanceContext, v))
}

// InstanceContextIn applies the In predicate on the "instanceContext" field.
func InstanceContextIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldInstanceContext, vs...))
}

// InstanceContextNotIn applies the NotIn predicate on the "instanceContext" field.
func InstanceContextNotIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldInstanceContext, vs...))
}

// InstanceContextGT applies the GT predicate on the "instanceContext" field.
func InstanceContextGT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldInstanceContext, v))
}

// InstanceContextGTE applies the GTE predicate on the "instanceContext" field.
func InstanceContextGTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldInstanceContext, v))
}

// InstanceContextLT applies the LT predicate on the "instanceContext" field.
func InstanceContextLT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldInstanceContext, v))
}

// InstanceContextLTE applies the LTE predicate on the "instanceContext" field.
func InstanceContextLTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldInstanceContext, v))
}

// InstanceContextContains applies the Contains predicate on the "instanceContext" field.
func InstanceContextContains(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContains(FieldInstanceContext, v))
}

// InstanceContextHasPrefix applies the HasPrefix predicate on the "instanceContext" field.
func InstanceContextHasPrefix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasPrefix(FieldInstanceContext, v))
}

// InstanceContextHasSuffix applies the HasSuffix predicate on the "instanceContext" field.
func InstanceContextHasSuffix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasSuffix(FieldInstanceContext, v))
}

// InstanceContextIsNil applies the IsNil predicate on the "instanceContext" field.
func InstanceContextIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldInstanceContext))
}

// InstanceContextNotNil applies the NotNil predicate on the "instanceContext" field.
func InstanceContextNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldInstanceContext))
}

// InstanceContextEqualFold applies the EqualFold predicate on the "instanceContext" field.
func InstanceContextEqualFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEqualFold(FieldInstanceContext, v))
}

// InstanceContextContainsFold applies the ContainsFold predicate on the "instanceContext" field.
func InstanceContextContainsFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContainsFold(FieldInstanceContext, v))
}

// StateContextEQ applies the EQ predicate on the "stateContext" field.
func StateContextEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldStateContext, v))
}

// StateContextNEQ applies the NEQ predicate on the "stateContext" field.
func StateContextNEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldStateContext, v))
}

// StateContextIn applies the In predicate on the "stateContext" field.
func StateContextIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldStateContext, vs...))
}

// StateContextNotIn applies the NotIn predicate on the "stateContext" field.
func StateContextNotIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldStateContext, vs...))
}

// StateContextGT applies the GT predicate on the "stateContext" field.
func StateContextGT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldStateContext, v))
}

// StateContextGTE applies the GTE predicate on the "stateContext" field.
func StateContextGTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldStateContext, v))
}

// StateContextLT applies the LT predicate on the "stateContext" field.
func StateContextLT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldStateContext, v))
}

// StateContextLTE applies the LTE predicate on the "stateContext" field.
func StateContextLTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldStateContext, v))
}

// StateContextContains applies the Contains predicate on the "stateContext" field.
func StateContextContains(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContains(FieldStateContext, v))
}

// StateContextHasPrefix applies the HasPrefix predicate on the "stateContext" field.
func StateContextHasPrefix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasPrefix(FieldStateContext, v))
}

// StateContextHasSuffix applies the HasSuffix predicate on the "stateContext" field.
func StateContextHasSuffix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasSuffix(FieldStateContext, v))
}

// StateContextIsNil applies the IsNil predicate on the "stateContext" field.
func StateContextIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldStateContext))
}

// StateContextNotNil applies the NotNil predicate on the "stateContext" field.
func StateContextNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldStateContext))
}

// StateContextEqualFold applies the EqualFold predicate on the "stateContext" field.
func StateContextEqualFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEqualFold(FieldStateContext, v))
}

// StateContextContainsFold applies the ContainsFold predicate on the "stateContext" field.
func StateContextContainsFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContainsFold(FieldStateContext, v))
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldMetadata, v))
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldMetadata, v))
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldMetadata, vs...))
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldMetadata, vs...))
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldMetadata, v))
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldMetadata, v))
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldMetadata, v))
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldMetadata, v))
}

// MetadataContains applies the Contains predicate on the "metadata" field.
func MetadataContains(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContains(FieldMetadata, v))
}

// MetadataHasPrefix applies the HasPrefix predicate on the "metadata" field.
func MetadataHasPrefix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasPrefix(FieldMetadata, v))
}

// MetadataHasSuffix applies the HasSuffix predicate on the "metadata" field.
func MetadataHasSuffix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasSuffix(FieldMetadata, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldMetadata))
}

// MetadataEqualFold applies the EqualFold predicate on the "metadata" field.
func MetadataEqualFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEqualFold(FieldMetadata, v))
}

// MetadataContainsFold applies the ContainsFold predicate on the "metadata" field.
func MetadataContainsFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContainsFold(FieldMetadata, v))
}

// LogToEventsEQ applies the EQ predicate on the "logToEvents" field.
func LogToEventsEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEQ(FieldLogToEvents, v))
}

// LogToEventsNEQ applies the NEQ predicate on the "logToEvents" field.
func LogToEventsNEQ(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNEQ(FieldLogToEvents, v))
}

// LogToEventsIn applies the In predicate on the "logToEvents" field.
func LogToEventsIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIn(FieldLogToEvents, vs...))
}

// LogToEventsNotIn applies the NotIn predicate on the "logToEvents" field.
func LogToEventsNotIn(vs ...string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotIn(FieldLogToEvents, vs...))
}

// LogToEventsGT applies the GT predicate on the "logToEvents" field.
func LogToEventsGT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGT(FieldLogToEvents, v))
}

// LogToEventsGTE applies the GTE predicate on the "logToEvents" field.
func LogToEventsGTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldGTE(FieldLogToEvents, v))
}

// LogToEventsLT applies the LT predicate on the "logToEvents" field.
func LogToEventsLT(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLT(FieldLogToEvents, v))
}

// LogToEventsLTE applies the LTE predicate on the "logToEvents" field.
func LogToEventsLTE(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldLTE(FieldLogToEvents, v))
}

// LogToEventsContains applies the Contains predicate on the "logToEvents" field.
func LogToEventsContains(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContains(FieldLogToEvents, v))
}

// LogToEventsHasPrefix applies the HasPrefix predicate on the "logToEvents" field.
func LogToEventsHasPrefix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasPrefix(FieldLogToEvents, v))
}

// LogToEventsHasSuffix applies the HasSuffix predicate on the "logToEvents" field.
func LogToEventsHasSuffix(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldHasSuffix(FieldLogToEvents, v))
}

// LogToEventsIsNil applies the IsNil predicate on the "logToEvents" field.
func LogToEventsIsNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldIsNull(FieldLogToEvents))
}

// LogToEventsNotNil applies the NotNil predicate on the "logToEvents" field.
func LogToEventsNotNil() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldNotNull(FieldLogToEvents))
}

// LogToEventsEqualFold applies the EqualFold predicate on the "logToEvents" field.
func LogToEventsEqualFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldEqualFold(FieldLogToEvents, v))
}

// LogToEventsContainsFold applies the ContainsFold predicate on the "logToEvents" field.
func LogToEventsContainsFold(v string) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(sql.FieldContainsFold(FieldLogToEvents, v))
}

// HasInstance applies the HasEdge predicate on the "instance" edge.
func HasInstance() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstanceWith applies the HasEdge predicate on the "instance" edge with a given conditions (other predicates).
func HasInstanceWith(preds ...predicate.Instance) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstanceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCaller applies the HasEdge predicate on the "caller" edge.
func HasCaller() predicate.InstanceRuntime {
	return predicate.InstanceRuntime(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CallerTable, CallerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCallerWith applies the HasEdge predicate on the "caller" edge with a given conditions (other predicates).
func HasCallerWith(preds ...predicate.Instance) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CallerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CallerTable, CallerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InstanceRuntime) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InstanceRuntime) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InstanceRuntime) predicate.InstanceRuntime {
	return predicate.InstanceRuntime(func(s *sql.Selector) {
		p(s.Not())
	})
}
