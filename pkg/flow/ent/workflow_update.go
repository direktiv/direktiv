// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/annotation"
	"github.com/direktiv/direktiv/pkg/flow/ent/events"
	"github.com/direktiv/direktiv/pkg/flow/ent/inode"
	"github.com/direktiv/direktiv/pkg/flow/ent/instance"
	"github.com/direktiv/direktiv/pkg/flow/ent/logmsg"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/direktiv/direktiv/pkg/flow/ent/ref"
	"github.com/direktiv/direktiv/pkg/flow/ent/revision"
	"github.com/direktiv/direktiv/pkg/flow/ent/route"
	"github.com/direktiv/direktiv/pkg/flow/ent/varref"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// WorkflowUpdate is the builder for updating Workflow entities.
type WorkflowUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkflowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WorkflowUpdate builder.
func (wu *WorkflowUpdate) Where(ps ...predicate.Workflow) *WorkflowUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetLive sets the "live" field.
func (wu *WorkflowUpdate) SetLive(b bool) *WorkflowUpdate {
	wu.mutation.SetLive(b)
	return wu
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableLive(b *bool) *WorkflowUpdate {
	if b != nil {
		wu.SetLive(*b)
	}
	return wu
}

// SetLogToEvents sets the "logToEvents" field.
func (wu *WorkflowUpdate) SetLogToEvents(s string) *WorkflowUpdate {
	wu.mutation.SetLogToEvents(s)
	return wu
}

// SetNillableLogToEvents sets the "logToEvents" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableLogToEvents(s *string) *WorkflowUpdate {
	if s != nil {
		wu.SetLogToEvents(*s)
	}
	return wu
}

// ClearLogToEvents clears the value of the "logToEvents" field.
func (wu *WorkflowUpdate) ClearLogToEvents() *WorkflowUpdate {
	wu.mutation.ClearLogToEvents()
	return wu
}

// SetReadOnly sets the "readOnly" field.
func (wu *WorkflowUpdate) SetReadOnly(b bool) *WorkflowUpdate {
	wu.mutation.SetReadOnly(b)
	return wu
}

// SetNillableReadOnly sets the "readOnly" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableReadOnly(b *bool) *WorkflowUpdate {
	if b != nil {
		wu.SetReadOnly(*b)
	}
	return wu
}

// ClearReadOnly clears the value of the "readOnly" field.
func (wu *WorkflowUpdate) ClearReadOnly() *WorkflowUpdate {
	wu.mutation.ClearReadOnly()
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WorkflowUpdate) SetUpdatedAt(t time.Time) *WorkflowUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wu *WorkflowUpdate) ClearUpdatedAt() *WorkflowUpdate {
	wu.mutation.ClearUpdatedAt()
	return wu
}

// SetInodeID sets the "inode" edge to the Inode entity by ID.
func (wu *WorkflowUpdate) SetInodeID(id uuid.UUID) *WorkflowUpdate {
	wu.mutation.SetInodeID(id)
	return wu
}

// SetNillableInodeID sets the "inode" edge to the Inode entity by ID if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableInodeID(id *uuid.UUID) *WorkflowUpdate {
	if id != nil {
		wu = wu.SetInodeID(*id)
	}
	return wu
}

// SetInode sets the "inode" edge to the Inode entity.
func (wu *WorkflowUpdate) SetInode(i *Inode) *WorkflowUpdate {
	return wu.SetInodeID(i.ID)
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by ID.
func (wu *WorkflowUpdate) SetNamespaceID(id uuid.UUID) *WorkflowUpdate {
	wu.mutation.SetNamespaceID(id)
	return wu
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (wu *WorkflowUpdate) SetNamespace(n *Namespace) *WorkflowUpdate {
	return wu.SetNamespaceID(n.ID)
}

// AddRevisionIDs adds the "revisions" edge to the Revision entity by IDs.
func (wu *WorkflowUpdate) AddRevisionIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.AddRevisionIDs(ids...)
	return wu
}

// AddRevisions adds the "revisions" edges to the Revision entity.
func (wu *WorkflowUpdate) AddRevisions(r ...*Revision) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.AddRevisionIDs(ids...)
}

// AddRefIDs adds the "refs" edge to the Ref entity by IDs.
func (wu *WorkflowUpdate) AddRefIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.AddRefIDs(ids...)
	return wu
}

// AddRefs adds the "refs" edges to the Ref entity.
func (wu *WorkflowUpdate) AddRefs(r ...*Ref) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.AddRefIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the Instance entity by IDs.
func (wu *WorkflowUpdate) AddInstanceIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.AddInstanceIDs(ids...)
	return wu
}

// AddInstances adds the "instances" edges to the Instance entity.
func (wu *WorkflowUpdate) AddInstances(i ...*Instance) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wu.AddInstanceIDs(ids...)
}

// AddRouteIDs adds the "routes" edge to the Route entity by IDs.
func (wu *WorkflowUpdate) AddRouteIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.AddRouteIDs(ids...)
	return wu
}

// AddRoutes adds the "routes" edges to the Route entity.
func (wu *WorkflowUpdate) AddRoutes(r ...*Route) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.AddRouteIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the LogMsg entity by IDs.
func (wu *WorkflowUpdate) AddLogIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.AddLogIDs(ids...)
	return wu
}

// AddLogs adds the "logs" edges to the LogMsg entity.
func (wu *WorkflowUpdate) AddLogs(l ...*LogMsg) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wu.AddLogIDs(ids...)
}

// AddVarIDs adds the "vars" edge to the VarRef entity by IDs.
func (wu *WorkflowUpdate) AddVarIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.AddVarIDs(ids...)
	return wu
}

// AddVars adds the "vars" edges to the VarRef entity.
func (wu *WorkflowUpdate) AddVars(v ...*VarRef) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return wu.AddVarIDs(ids...)
}

// AddWfeventIDs adds the "wfevents" edge to the Events entity by IDs.
func (wu *WorkflowUpdate) AddWfeventIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.AddWfeventIDs(ids...)
	return wu
}

// AddWfevents adds the "wfevents" edges to the Events entity.
func (wu *WorkflowUpdate) AddWfevents(e ...*Events) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wu.AddWfeventIDs(ids...)
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (wu *WorkflowUpdate) AddAnnotationIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.AddAnnotationIDs(ids...)
	return wu
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (wu *WorkflowUpdate) AddAnnotations(a ...*Annotation) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wu.AddAnnotationIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wu *WorkflowUpdate) Mutation() *WorkflowMutation {
	return wu.mutation
}

// ClearInode clears the "inode" edge to the Inode entity.
func (wu *WorkflowUpdate) ClearInode() *WorkflowUpdate {
	wu.mutation.ClearInode()
	return wu
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (wu *WorkflowUpdate) ClearNamespace() *WorkflowUpdate {
	wu.mutation.ClearNamespace()
	return wu
}

// ClearRevisions clears all "revisions" edges to the Revision entity.
func (wu *WorkflowUpdate) ClearRevisions() *WorkflowUpdate {
	wu.mutation.ClearRevisions()
	return wu
}

// RemoveRevisionIDs removes the "revisions" edge to Revision entities by IDs.
func (wu *WorkflowUpdate) RemoveRevisionIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.RemoveRevisionIDs(ids...)
	return wu
}

// RemoveRevisions removes "revisions" edges to Revision entities.
func (wu *WorkflowUpdate) RemoveRevisions(r ...*Revision) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.RemoveRevisionIDs(ids...)
}

// ClearRefs clears all "refs" edges to the Ref entity.
func (wu *WorkflowUpdate) ClearRefs() *WorkflowUpdate {
	wu.mutation.ClearRefs()
	return wu
}

// RemoveRefIDs removes the "refs" edge to Ref entities by IDs.
func (wu *WorkflowUpdate) RemoveRefIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.RemoveRefIDs(ids...)
	return wu
}

// RemoveRefs removes "refs" edges to Ref entities.
func (wu *WorkflowUpdate) RemoveRefs(r ...*Ref) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.RemoveRefIDs(ids...)
}

// ClearInstances clears all "instances" edges to the Instance entity.
func (wu *WorkflowUpdate) ClearInstances() *WorkflowUpdate {
	wu.mutation.ClearInstances()
	return wu
}

// RemoveInstanceIDs removes the "instances" edge to Instance entities by IDs.
func (wu *WorkflowUpdate) RemoveInstanceIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.RemoveInstanceIDs(ids...)
	return wu
}

// RemoveInstances removes "instances" edges to Instance entities.
func (wu *WorkflowUpdate) RemoveInstances(i ...*Instance) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wu.RemoveInstanceIDs(ids...)
}

// ClearRoutes clears all "routes" edges to the Route entity.
func (wu *WorkflowUpdate) ClearRoutes() *WorkflowUpdate {
	wu.mutation.ClearRoutes()
	return wu
}

// RemoveRouteIDs removes the "routes" edge to Route entities by IDs.
func (wu *WorkflowUpdate) RemoveRouteIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.RemoveRouteIDs(ids...)
	return wu
}

// RemoveRoutes removes "routes" edges to Route entities.
func (wu *WorkflowUpdate) RemoveRoutes(r ...*Route) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.RemoveRouteIDs(ids...)
}

// ClearLogs clears all "logs" edges to the LogMsg entity.
func (wu *WorkflowUpdate) ClearLogs() *WorkflowUpdate {
	wu.mutation.ClearLogs()
	return wu
}

// RemoveLogIDs removes the "logs" edge to LogMsg entities by IDs.
func (wu *WorkflowUpdate) RemoveLogIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.RemoveLogIDs(ids...)
	return wu
}

// RemoveLogs removes "logs" edges to LogMsg entities.
func (wu *WorkflowUpdate) RemoveLogs(l ...*LogMsg) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wu.RemoveLogIDs(ids...)
}

// ClearVars clears all "vars" edges to the VarRef entity.
func (wu *WorkflowUpdate) ClearVars() *WorkflowUpdate {
	wu.mutation.ClearVars()
	return wu
}

// RemoveVarIDs removes the "vars" edge to VarRef entities by IDs.
func (wu *WorkflowUpdate) RemoveVarIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.RemoveVarIDs(ids...)
	return wu
}

// RemoveVars removes "vars" edges to VarRef entities.
func (wu *WorkflowUpdate) RemoveVars(v ...*VarRef) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return wu.RemoveVarIDs(ids...)
}

// ClearWfevents clears all "wfevents" edges to the Events entity.
func (wu *WorkflowUpdate) ClearWfevents() *WorkflowUpdate {
	wu.mutation.ClearWfevents()
	return wu
}

// RemoveWfeventIDs removes the "wfevents" edge to Events entities by IDs.
func (wu *WorkflowUpdate) RemoveWfeventIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.RemoveWfeventIDs(ids...)
	return wu
}

// RemoveWfevents removes "wfevents" edges to Events entities.
func (wu *WorkflowUpdate) RemoveWfevents(e ...*Events) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wu.RemoveWfeventIDs(ids...)
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (wu *WorkflowUpdate) ClearAnnotations() *WorkflowUpdate {
	wu.mutation.ClearAnnotations()
	return wu
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (wu *WorkflowUpdate) RemoveAnnotationIDs(ids ...uuid.UUID) *WorkflowUpdate {
	wu.mutation.RemoveAnnotationIDs(ids...)
	return wu
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (wu *WorkflowUpdate) RemoveAnnotations(a ...*Annotation) *WorkflowUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wu.RemoveAnnotationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkflowUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wu.defaults()
	if len(wu.hooks) == 0 {
		if err = wu.check(); err != nil {
			return 0, err
		}
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkflowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wu.check(); err != nil {
				return 0, err
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			if wu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkflowUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkflowUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkflowUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkflowUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok && !wu.mutation.UpdatedAtCleared() {
		v := workflow.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkflowUpdate) check() error {
	if _, ok := wu.mutation.NamespaceID(); wu.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Workflow.namespace"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WorkflowUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WorkflowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workflow.Table,
			Columns: workflow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: workflow.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Live(); ok {
		_spec.SetField(workflow.FieldLive, field.TypeBool, value)
	}
	if value, ok := wu.mutation.LogToEvents(); ok {
		_spec.SetField(workflow.FieldLogToEvents, field.TypeString, value)
	}
	if wu.mutation.LogToEventsCleared() {
		_spec.ClearField(workflow.FieldLogToEvents, field.TypeString)
	}
	if value, ok := wu.mutation.ReadOnly(); ok {
		_spec.SetField(workflow.FieldReadOnly, field.TypeBool, value)
	}
	if wu.mutation.ReadOnlyCleared() {
		_spec.ClearField(workflow.FieldReadOnly, field.TypeBool)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(workflow.FieldUpdatedAt, field.TypeTime, value)
	}
	if wu.mutation.UpdatedAtCleared() {
		_spec.ClearField(workflow.FieldUpdatedAt, field.TypeTime)
	}
	if wu.mutation.InodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflow.InodeTable,
			Columns: []string{workflow.InodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.InodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflow.InodeTable,
			Columns: []string{workflow.InodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.NamespaceTable,
			Columns: []string{workflow.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.NamespaceTable,
			Columns: []string{workflow.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RevisionsTable,
			Columns: []string{workflow.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: revision.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedRevisionsIDs(); len(nodes) > 0 && !wu.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RevisionsTable,
			Columns: []string{workflow.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RevisionsTable,
			Columns: []string{workflow.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.RefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RefsTable,
			Columns: []string{workflow.RefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ref.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedRefsIDs(); len(nodes) > 0 && !wu.mutation.RefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RefsTable,
			Columns: []string{workflow.RefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RefsTable,
			Columns: []string{workflow.RefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.InstancesTable,
			Columns: []string{workflow.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !wu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.InstancesTable,
			Columns: []string{workflow.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.InstancesTable,
			Columns: []string{workflow.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.RoutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RoutesTable,
			Columns: []string{workflow.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: route.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedRoutesIDs(); len(nodes) > 0 && !wu.mutation.RoutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RoutesTable,
			Columns: []string{workflow.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: route.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RoutesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RoutesTable,
			Columns: []string{workflow.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: route.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.LogsTable,
			Columns: []string{workflow.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedLogsIDs(); len(nodes) > 0 && !wu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.LogsTable,
			Columns: []string{workflow.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.LogsTable,
			Columns: []string{workflow.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.VarsTable,
			Columns: []string{workflow.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedVarsIDs(); len(nodes) > 0 && !wu.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.VarsTable,
			Columns: []string{workflow.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.VarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.VarsTable,
			Columns: []string{workflow.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WfeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.WfeventsTable,
			Columns: []string{workflow.WfeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWfeventsIDs(); len(nodes) > 0 && !wu.mutation.WfeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.WfeventsTable,
			Columns: []string{workflow.WfeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WfeventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.WfeventsTable,
			Columns: []string{workflow.WfeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.AnnotationsTable,
			Columns: []string{workflow.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !wu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.AnnotationsTable,
			Columns: []string{workflow.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.AnnotationsTable,
			Columns: []string{workflow.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// WorkflowUpdateOne is the builder for updating a single Workflow entity.
type WorkflowUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkflowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetLive sets the "live" field.
func (wuo *WorkflowUpdateOne) SetLive(b bool) *WorkflowUpdateOne {
	wuo.mutation.SetLive(b)
	return wuo
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableLive(b *bool) *WorkflowUpdateOne {
	if b != nil {
		wuo.SetLive(*b)
	}
	return wuo
}

// SetLogToEvents sets the "logToEvents" field.
func (wuo *WorkflowUpdateOne) SetLogToEvents(s string) *WorkflowUpdateOne {
	wuo.mutation.SetLogToEvents(s)
	return wuo
}

// SetNillableLogToEvents sets the "logToEvents" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableLogToEvents(s *string) *WorkflowUpdateOne {
	if s != nil {
		wuo.SetLogToEvents(*s)
	}
	return wuo
}

// ClearLogToEvents clears the value of the "logToEvents" field.
func (wuo *WorkflowUpdateOne) ClearLogToEvents() *WorkflowUpdateOne {
	wuo.mutation.ClearLogToEvents()
	return wuo
}

// SetReadOnly sets the "readOnly" field.
func (wuo *WorkflowUpdateOne) SetReadOnly(b bool) *WorkflowUpdateOne {
	wuo.mutation.SetReadOnly(b)
	return wuo
}

// SetNillableReadOnly sets the "readOnly" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableReadOnly(b *bool) *WorkflowUpdateOne {
	if b != nil {
		wuo.SetReadOnly(*b)
	}
	return wuo
}

// ClearReadOnly clears the value of the "readOnly" field.
func (wuo *WorkflowUpdateOne) ClearReadOnly() *WorkflowUpdateOne {
	wuo.mutation.ClearReadOnly()
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WorkflowUpdateOne) SetUpdatedAt(t time.Time) *WorkflowUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wuo *WorkflowUpdateOne) ClearUpdatedAt() *WorkflowUpdateOne {
	wuo.mutation.ClearUpdatedAt()
	return wuo
}

// SetInodeID sets the "inode" edge to the Inode entity by ID.
func (wuo *WorkflowUpdateOne) SetInodeID(id uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.SetInodeID(id)
	return wuo
}

// SetNillableInodeID sets the "inode" edge to the Inode entity by ID if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableInodeID(id *uuid.UUID) *WorkflowUpdateOne {
	if id != nil {
		wuo = wuo.SetInodeID(*id)
	}
	return wuo
}

// SetInode sets the "inode" edge to the Inode entity.
func (wuo *WorkflowUpdateOne) SetInode(i *Inode) *WorkflowUpdateOne {
	return wuo.SetInodeID(i.ID)
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by ID.
func (wuo *WorkflowUpdateOne) SetNamespaceID(id uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.SetNamespaceID(id)
	return wuo
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (wuo *WorkflowUpdateOne) SetNamespace(n *Namespace) *WorkflowUpdateOne {
	return wuo.SetNamespaceID(n.ID)
}

// AddRevisionIDs adds the "revisions" edge to the Revision entity by IDs.
func (wuo *WorkflowUpdateOne) AddRevisionIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.AddRevisionIDs(ids...)
	return wuo
}

// AddRevisions adds the "revisions" edges to the Revision entity.
func (wuo *WorkflowUpdateOne) AddRevisions(r ...*Revision) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.AddRevisionIDs(ids...)
}

// AddRefIDs adds the "refs" edge to the Ref entity by IDs.
func (wuo *WorkflowUpdateOne) AddRefIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.AddRefIDs(ids...)
	return wuo
}

// AddRefs adds the "refs" edges to the Ref entity.
func (wuo *WorkflowUpdateOne) AddRefs(r ...*Ref) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.AddRefIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the Instance entity by IDs.
func (wuo *WorkflowUpdateOne) AddInstanceIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.AddInstanceIDs(ids...)
	return wuo
}

// AddInstances adds the "instances" edges to the Instance entity.
func (wuo *WorkflowUpdateOne) AddInstances(i ...*Instance) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wuo.AddInstanceIDs(ids...)
}

// AddRouteIDs adds the "routes" edge to the Route entity by IDs.
func (wuo *WorkflowUpdateOne) AddRouteIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.AddRouteIDs(ids...)
	return wuo
}

// AddRoutes adds the "routes" edges to the Route entity.
func (wuo *WorkflowUpdateOne) AddRoutes(r ...*Route) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.AddRouteIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the LogMsg entity by IDs.
func (wuo *WorkflowUpdateOne) AddLogIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.AddLogIDs(ids...)
	return wuo
}

// AddLogs adds the "logs" edges to the LogMsg entity.
func (wuo *WorkflowUpdateOne) AddLogs(l ...*LogMsg) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wuo.AddLogIDs(ids...)
}

// AddVarIDs adds the "vars" edge to the VarRef entity by IDs.
func (wuo *WorkflowUpdateOne) AddVarIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.AddVarIDs(ids...)
	return wuo
}

// AddVars adds the "vars" edges to the VarRef entity.
func (wuo *WorkflowUpdateOne) AddVars(v ...*VarRef) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return wuo.AddVarIDs(ids...)
}

// AddWfeventIDs adds the "wfevents" edge to the Events entity by IDs.
func (wuo *WorkflowUpdateOne) AddWfeventIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.AddWfeventIDs(ids...)
	return wuo
}

// AddWfevents adds the "wfevents" edges to the Events entity.
func (wuo *WorkflowUpdateOne) AddWfevents(e ...*Events) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wuo.AddWfeventIDs(ids...)
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (wuo *WorkflowUpdateOne) AddAnnotationIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.AddAnnotationIDs(ids...)
	return wuo
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (wuo *WorkflowUpdateOne) AddAnnotations(a ...*Annotation) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wuo.AddAnnotationIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wuo *WorkflowUpdateOne) Mutation() *WorkflowMutation {
	return wuo.mutation
}

// ClearInode clears the "inode" edge to the Inode entity.
func (wuo *WorkflowUpdateOne) ClearInode() *WorkflowUpdateOne {
	wuo.mutation.ClearInode()
	return wuo
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (wuo *WorkflowUpdateOne) ClearNamespace() *WorkflowUpdateOne {
	wuo.mutation.ClearNamespace()
	return wuo
}

// ClearRevisions clears all "revisions" edges to the Revision entity.
func (wuo *WorkflowUpdateOne) ClearRevisions() *WorkflowUpdateOne {
	wuo.mutation.ClearRevisions()
	return wuo
}

// RemoveRevisionIDs removes the "revisions" edge to Revision entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveRevisionIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.RemoveRevisionIDs(ids...)
	return wuo
}

// RemoveRevisions removes "revisions" edges to Revision entities.
func (wuo *WorkflowUpdateOne) RemoveRevisions(r ...*Revision) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.RemoveRevisionIDs(ids...)
}

// ClearRefs clears all "refs" edges to the Ref entity.
func (wuo *WorkflowUpdateOne) ClearRefs() *WorkflowUpdateOne {
	wuo.mutation.ClearRefs()
	return wuo
}

// RemoveRefIDs removes the "refs" edge to Ref entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveRefIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.RemoveRefIDs(ids...)
	return wuo
}

// RemoveRefs removes "refs" edges to Ref entities.
func (wuo *WorkflowUpdateOne) RemoveRefs(r ...*Ref) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.RemoveRefIDs(ids...)
}

// ClearInstances clears all "instances" edges to the Instance entity.
func (wuo *WorkflowUpdateOne) ClearInstances() *WorkflowUpdateOne {
	wuo.mutation.ClearInstances()
	return wuo
}

// RemoveInstanceIDs removes the "instances" edge to Instance entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveInstanceIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.RemoveInstanceIDs(ids...)
	return wuo
}

// RemoveInstances removes "instances" edges to Instance entities.
func (wuo *WorkflowUpdateOne) RemoveInstances(i ...*Instance) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return wuo.RemoveInstanceIDs(ids...)
}

// ClearRoutes clears all "routes" edges to the Route entity.
func (wuo *WorkflowUpdateOne) ClearRoutes() *WorkflowUpdateOne {
	wuo.mutation.ClearRoutes()
	return wuo
}

// RemoveRouteIDs removes the "routes" edge to Route entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveRouteIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.RemoveRouteIDs(ids...)
	return wuo
}

// RemoveRoutes removes "routes" edges to Route entities.
func (wuo *WorkflowUpdateOne) RemoveRoutes(r ...*Route) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.RemoveRouteIDs(ids...)
}

// ClearLogs clears all "logs" edges to the LogMsg entity.
func (wuo *WorkflowUpdateOne) ClearLogs() *WorkflowUpdateOne {
	wuo.mutation.ClearLogs()
	return wuo
}

// RemoveLogIDs removes the "logs" edge to LogMsg entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveLogIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.RemoveLogIDs(ids...)
	return wuo
}

// RemoveLogs removes "logs" edges to LogMsg entities.
func (wuo *WorkflowUpdateOne) RemoveLogs(l ...*LogMsg) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return wuo.RemoveLogIDs(ids...)
}

// ClearVars clears all "vars" edges to the VarRef entity.
func (wuo *WorkflowUpdateOne) ClearVars() *WorkflowUpdateOne {
	wuo.mutation.ClearVars()
	return wuo
}

// RemoveVarIDs removes the "vars" edge to VarRef entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveVarIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.RemoveVarIDs(ids...)
	return wuo
}

// RemoveVars removes "vars" edges to VarRef entities.
func (wuo *WorkflowUpdateOne) RemoveVars(v ...*VarRef) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return wuo.RemoveVarIDs(ids...)
}

// ClearWfevents clears all "wfevents" edges to the Events entity.
func (wuo *WorkflowUpdateOne) ClearWfevents() *WorkflowUpdateOne {
	wuo.mutation.ClearWfevents()
	return wuo
}

// RemoveWfeventIDs removes the "wfevents" edge to Events entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveWfeventIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.RemoveWfeventIDs(ids...)
	return wuo
}

// RemoveWfevents removes "wfevents" edges to Events entities.
func (wuo *WorkflowUpdateOne) RemoveWfevents(e ...*Events) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wuo.RemoveWfeventIDs(ids...)
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (wuo *WorkflowUpdateOne) ClearAnnotations() *WorkflowUpdateOne {
	wuo.mutation.ClearAnnotations()
	return wuo
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveAnnotationIDs(ids ...uuid.UUID) *WorkflowUpdateOne {
	wuo.mutation.RemoveAnnotationIDs(ids...)
	return wuo
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (wuo *WorkflowUpdateOne) RemoveAnnotations(a ...*Annotation) *WorkflowUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wuo.RemoveAnnotationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkflowUpdateOne) Select(field string, fields ...string) *WorkflowUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workflow entity.
func (wuo *WorkflowUpdateOne) Save(ctx context.Context) (*Workflow, error) {
	var (
		err  error
		node *Workflow
	)
	wuo.defaults()
	if len(wuo.hooks) == 0 {
		if err = wuo.check(); err != nil {
			return nil, err
		}
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkflowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wuo.check(); err != nil {
				return nil, err
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			if wuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, wuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Workflow)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from WorkflowMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) SaveX(ctx context.Context) *Workflow {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkflowUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkflowUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok && !wuo.mutation.UpdatedAtCleared() {
		v := workflow.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkflowUpdateOne) check() error {
	if _, ok := wuo.mutation.NamespaceID(); wuo.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Workflow.namespace"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WorkflowUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WorkflowUpdateOne) sqlSave(ctx context.Context) (_node *Workflow, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workflow.Table,
			Columns: workflow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: workflow.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workflow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflow.FieldID)
		for _, f := range fields {
			if !workflow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Live(); ok {
		_spec.SetField(workflow.FieldLive, field.TypeBool, value)
	}
	if value, ok := wuo.mutation.LogToEvents(); ok {
		_spec.SetField(workflow.FieldLogToEvents, field.TypeString, value)
	}
	if wuo.mutation.LogToEventsCleared() {
		_spec.ClearField(workflow.FieldLogToEvents, field.TypeString)
	}
	if value, ok := wuo.mutation.ReadOnly(); ok {
		_spec.SetField(workflow.FieldReadOnly, field.TypeBool, value)
	}
	if wuo.mutation.ReadOnlyCleared() {
		_spec.ClearField(workflow.FieldReadOnly, field.TypeBool)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workflow.FieldUpdatedAt, field.TypeTime, value)
	}
	if wuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(workflow.FieldUpdatedAt, field.TypeTime)
	}
	if wuo.mutation.InodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflow.InodeTable,
			Columns: []string{workflow.InodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.InodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workflow.InodeTable,
			Columns: []string{workflow.InodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.NamespaceTable,
			Columns: []string{workflow.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.NamespaceTable,
			Columns: []string{workflow.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RevisionsTable,
			Columns: []string{workflow.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: revision.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedRevisionsIDs(); len(nodes) > 0 && !wuo.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RevisionsTable,
			Columns: []string{workflow.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RevisionsTable,
			Columns: []string{workflow.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.RefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RefsTable,
			Columns: []string{workflow.RefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ref.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedRefsIDs(); len(nodes) > 0 && !wuo.mutation.RefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RefsTable,
			Columns: []string{workflow.RefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RefsTable,
			Columns: []string{workflow.RefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.InstancesTable,
			Columns: []string{workflow.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !wuo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.InstancesTable,
			Columns: []string{workflow.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.InstancesTable,
			Columns: []string{workflow.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.RoutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RoutesTable,
			Columns: []string{workflow.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: route.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedRoutesIDs(); len(nodes) > 0 && !wuo.mutation.RoutesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RoutesTable,
			Columns: []string{workflow.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: route.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RoutesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.RoutesTable,
			Columns: []string{workflow.RoutesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: route.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.LogsTable,
			Columns: []string{workflow.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedLogsIDs(); len(nodes) > 0 && !wuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.LogsTable,
			Columns: []string{workflow.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.LogsTable,
			Columns: []string{workflow.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.VarsTable,
			Columns: []string{workflow.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedVarsIDs(); len(nodes) > 0 && !wuo.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.VarsTable,
			Columns: []string{workflow.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.VarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.VarsTable,
			Columns: []string{workflow.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WfeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.WfeventsTable,
			Columns: []string{workflow.WfeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWfeventsIDs(); len(nodes) > 0 && !wuo.mutation.WfeventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.WfeventsTable,
			Columns: []string{workflow.WfeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WfeventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.WfeventsTable,
			Columns: []string{workflow.WfeventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.AnnotationsTable,
			Columns: []string{workflow.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !wuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.AnnotationsTable,
			Columns: []string{workflow.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.AnnotationsTable,
			Columns: []string{workflow.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Workflow{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
