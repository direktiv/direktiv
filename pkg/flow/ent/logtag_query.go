// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/logmsg"
	"github.com/direktiv/direktiv/pkg/flow/ent/logtag"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

// LogTagQuery is the builder for querying LogTag entities.
type LogTagQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.LogTag
	withLogmsg *LogMsgQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LogTagQuery builder.
func (ltq *LogTagQuery) Where(ps ...predicate.LogTag) *LogTagQuery {
	ltq.predicates = append(ltq.predicates, ps...)
	return ltq
}

// Limit adds a limit step to the query.
func (ltq *LogTagQuery) Limit(limit int) *LogTagQuery {
	ltq.limit = &limit
	return ltq
}

// Offset adds an offset step to the query.
func (ltq *LogTagQuery) Offset(offset int) *LogTagQuery {
	ltq.offset = &offset
	return ltq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ltq *LogTagQuery) Unique(unique bool) *LogTagQuery {
	ltq.unique = &unique
	return ltq
}

// Order adds an order step to the query.
func (ltq *LogTagQuery) Order(o ...OrderFunc) *LogTagQuery {
	ltq.order = append(ltq.order, o...)
	return ltq
}

// QueryLogmsg chains the current query on the "logmsg" edge.
func (ltq *LogTagQuery) QueryLogmsg() *LogMsgQuery {
	query := &LogMsgQuery{config: ltq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ltq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ltq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(logtag.Table, logtag.FieldID, selector),
			sqlgraph.To(logmsg.Table, logmsg.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, logtag.LogmsgTable, logtag.LogmsgColumn),
		)
		fromU = sqlgraph.SetNeighbors(ltq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LogTag entity from the query.
// Returns a *NotFoundError when no LogTag was found.
func (ltq *LogTagQuery) First(ctx context.Context) (*LogTag, error) {
	nodes, err := ltq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{logtag.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ltq *LogTagQuery) FirstX(ctx context.Context) *LogTag {
	node, err := ltq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LogTag ID from the query.
// Returns a *NotFoundError when no LogTag ID was found.
func (ltq *LogTagQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ltq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{logtag.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ltq *LogTagQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ltq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LogTag entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LogTag entity is found.
// Returns a *NotFoundError when no LogTag entities are found.
func (ltq *LogTagQuery) Only(ctx context.Context) (*LogTag, error) {
	nodes, err := ltq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{logtag.Label}
	default:
		return nil, &NotSingularError{logtag.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ltq *LogTagQuery) OnlyX(ctx context.Context) *LogTag {
	node, err := ltq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LogTag ID in the query.
// Returns a *NotSingularError when more than one LogTag ID is found.
// Returns a *NotFoundError when no entities are found.
func (ltq *LogTagQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ltq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{logtag.Label}
	default:
		err = &NotSingularError{logtag.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ltq *LogTagQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ltq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LogTags.
func (ltq *LogTagQuery) All(ctx context.Context) ([]*LogTag, error) {
	if err := ltq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ltq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ltq *LogTagQuery) AllX(ctx context.Context) []*LogTag {
	nodes, err := ltq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LogTag IDs.
func (ltq *LogTagQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := ltq.Select(logtag.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ltq *LogTagQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ltq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ltq *LogTagQuery) Count(ctx context.Context) (int, error) {
	if err := ltq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ltq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ltq *LogTagQuery) CountX(ctx context.Context) int {
	count, err := ltq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ltq *LogTagQuery) Exist(ctx context.Context) (bool, error) {
	if err := ltq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ltq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ltq *LogTagQuery) ExistX(ctx context.Context) bool {
	exist, err := ltq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LogTagQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ltq *LogTagQuery) Clone() *LogTagQuery {
	if ltq == nil {
		return nil
	}
	return &LogTagQuery{
		config:     ltq.config,
		limit:      ltq.limit,
		offset:     ltq.offset,
		order:      append([]OrderFunc{}, ltq.order...),
		predicates: append([]predicate.LogTag{}, ltq.predicates...),
		withLogmsg: ltq.withLogmsg.Clone(),
		// clone intermediate query.
		sql:    ltq.sql.Clone(),
		path:   ltq.path,
		unique: ltq.unique,
	}
}

// WithLogmsg tells the query-builder to eager-load the nodes that are connected to
// the "logmsg" edge. The optional arguments are used to configure the query builder of the edge.
func (ltq *LogTagQuery) WithLogmsg(opts ...func(*LogMsgQuery)) *LogTagQuery {
	query := &LogMsgQuery{config: ltq.config}
	for _, opt := range opts {
		opt(query)
	}
	ltq.withLogmsg = query
	return ltq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LogTag.Query().
//		GroupBy(logtag.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ltq *LogTagQuery) GroupBy(field string, fields ...string) *LogTagGroupBy {
	grbuild := &LogTagGroupBy{config: ltq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ltq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ltq.sqlQuery(ctx), nil
	}
	grbuild.label = logtag.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//	}
//
//	client.LogTag.Query().
//		Select(logtag.FieldType).
//		Scan(ctx, &v)
func (ltq *LogTagQuery) Select(fields ...string) *LogTagSelect {
	ltq.fields = append(ltq.fields, fields...)
	selbuild := &LogTagSelect{LogTagQuery: ltq}
	selbuild.label = logtag.Label
	selbuild.flds, selbuild.scan = &ltq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a LogTagSelect configured with the given aggregations.
func (ltq *LogTagQuery) Aggregate(fns ...AggregateFunc) *LogTagSelect {
	return ltq.Select().Aggregate(fns...)
}

func (ltq *LogTagQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ltq.fields {
		if !logtag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ltq.path != nil {
		prev, err := ltq.path(ctx)
		if err != nil {
			return err
		}
		ltq.sql = prev
	}
	return nil
}

func (ltq *LogTagQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LogTag, error) {
	var (
		nodes       = []*LogTag{}
		withFKs     = ltq.withFKs
		_spec       = ltq.querySpec()
		loadedTypes = [1]bool{
			ltq.withLogmsg != nil,
		}
	)
	if ltq.withLogmsg != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, logtag.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LogTag).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LogTag{config: ltq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ltq.modifiers) > 0 {
		_spec.Modifiers = ltq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ltq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ltq.withLogmsg; query != nil {
		if err := ltq.loadLogmsg(ctx, query, nodes, nil,
			func(n *LogTag, e *LogMsg) { n.Edges.Logmsg = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ltq *LogTagQuery) loadLogmsg(ctx context.Context, query *LogMsgQuery, nodes []*LogTag, init func(*LogTag), assign func(*LogTag, *LogMsg)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*LogTag)
	for i := range nodes {
		if nodes[i].log_msg_logtag == nil {
			continue
		}
		fk := *nodes[i].log_msg_logtag
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(logmsg.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "log_msg_logtag" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ltq *LogTagQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ltq.querySpec()
	if len(ltq.modifiers) > 0 {
		_spec.Modifiers = ltq.modifiers
	}
	_spec.Node.Columns = ltq.fields
	if len(ltq.fields) > 0 {
		_spec.Unique = ltq.unique != nil && *ltq.unique
	}
	return sqlgraph.CountNodes(ctx, ltq.driver, _spec)
}

func (ltq *LogTagQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := ltq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (ltq *LogTagQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   logtag.Table,
			Columns: logtag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: logtag.FieldID,
			},
		},
		From:   ltq.sql,
		Unique: true,
	}
	if unique := ltq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ltq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logtag.FieldID)
		for i := range fields {
			if fields[i] != logtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ltq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ltq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ltq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ltq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ltq *LogTagQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ltq.driver.Dialect())
	t1 := builder.Table(logtag.Table)
	columns := ltq.fields
	if len(columns) == 0 {
		columns = logtag.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ltq.sql != nil {
		selector = ltq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ltq.unique != nil && *ltq.unique {
		selector.Distinct()
	}
	for _, m := range ltq.modifiers {
		m(selector)
	}
	for _, p := range ltq.predicates {
		p(selector)
	}
	for _, p := range ltq.order {
		p(selector)
	}
	if offset := ltq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ltq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ltq *LogTagQuery) ForUpdate(opts ...sql.LockOption) *LogTagQuery {
	if ltq.driver.Dialect() == dialect.Postgres {
		ltq.Unique(false)
	}
	ltq.modifiers = append(ltq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ltq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ltq *LogTagQuery) ForShare(opts ...sql.LockOption) *LogTagQuery {
	if ltq.driver.Dialect() == dialect.Postgres {
		ltq.Unique(false)
	}
	ltq.modifiers = append(ltq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ltq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ltq *LogTagQuery) Modify(modifiers ...func(s *sql.Selector)) *LogTagSelect {
	ltq.modifiers = append(ltq.modifiers, modifiers...)
	return ltq.Select()
}

// LogTagGroupBy is the group-by builder for LogTag entities.
type LogTagGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ltgb *LogTagGroupBy) Aggregate(fns ...AggregateFunc) *LogTagGroupBy {
	ltgb.fns = append(ltgb.fns, fns...)
	return ltgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ltgb *LogTagGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ltgb.path(ctx)
	if err != nil {
		return err
	}
	ltgb.sql = query
	return ltgb.sqlScan(ctx, v)
}

func (ltgb *LogTagGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ltgb.fields {
		if !logtag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ltgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ltgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ltgb *LogTagGroupBy) sqlQuery() *sql.Selector {
	selector := ltgb.sql.Select()
	aggregation := make([]string, 0, len(ltgb.fns))
	for _, fn := range ltgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ltgb.fields)+len(ltgb.fns))
		for _, f := range ltgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ltgb.fields...)...)
}

// LogTagSelect is the builder for selecting fields of LogTag entities.
type LogTagSelect struct {
	*LogTagQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lts *LogTagSelect) Aggregate(fns ...AggregateFunc) *LogTagSelect {
	lts.fns = append(lts.fns, fns...)
	return lts
}

// Scan applies the selector query and scans the result into the given value.
func (lts *LogTagSelect) Scan(ctx context.Context, v any) error {
	if err := lts.prepareQuery(ctx); err != nil {
		return err
	}
	lts.sql = lts.LogTagQuery.sqlQuery(ctx)
	return lts.sqlScan(ctx, v)
}

func (lts *LogTagSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(lts.fns))
	for _, fn := range lts.fns {
		aggregation = append(aggregation, fn(lts.sql))
	}
	switch n := len(*lts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		lts.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		lts.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := lts.sql.Query()
	if err := lts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (lts *LogTagSelect) Modify(modifiers ...func(s *sql.Selector)) *LogTagSelect {
	lts.modifiers = append(lts.modifiers, modifiers...)
	return lts
}
