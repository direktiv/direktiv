// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/pkg/flow/ent/annotation"
	"github.com/direktiv/direktiv/pkg/flow/ent/inode"
	"github.com/direktiv/direktiv/pkg/flow/ent/instance"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// Annotation is the model entity for the Annotation schema.
type Annotation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"-"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"checksum"`
	// Data holds the value of the "data" field.
	Data []byte `json:"data,omitempty"`
	// MimeType holds the value of the "mime_type" field.
	MimeType string `json:"mime_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnnotationQuery when eager-loading is set.
	Edges                 AnnotationEdges `json:"edges"`
	inode_annotations     *uuid.UUID
	instance_annotations  *uuid.UUID
	namespace_annotations *uuid.UUID
	workflow_annotations  *uuid.UUID
}

// AnnotationEdges holds the relations/edges for other nodes in the graph.
type AnnotationEdges struct {
	// Namespace holds the value of the namespace edge.
	Namespace *Namespace `json:"namespace,omitempty"`
	// Workflow holds the value of the workflow edge.
	Workflow *Workflow `json:"workflow,omitempty"`
	// Instance holds the value of the instance edge.
	Instance *Instance `json:"instance,omitempty"`
	// Inode holds the value of the inode edge.
	Inode *Inode `json:"inode,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// NamespaceOrErr returns the Namespace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnnotationEdges) NamespaceOrErr() (*Namespace, error) {
	if e.loadedTypes[0] {
		if e.Namespace == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: namespace.Label}
		}
		return e.Namespace, nil
	}
	return nil, &NotLoadedError{edge: "namespace"}
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnnotationEdges) WorkflowOrErr() (*Workflow, error) {
	if e.loadedTypes[1] {
		if e.Workflow == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workflow.Label}
		}
		return e.Workflow, nil
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnnotationEdges) InstanceOrErr() (*Instance, error) {
	if e.loadedTypes[2] {
		if e.Instance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: instance.Label}
		}
		return e.Instance, nil
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// InodeOrErr returns the Inode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnnotationEdges) InodeOrErr() (*Inode, error) {
	if e.loadedTypes[3] {
		if e.Inode == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: inode.Label}
		}
		return e.Inode, nil
	}
	return nil, &NotLoadedError{edge: "inode"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Annotation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case annotation.FieldData:
			values[i] = new([]byte)
		case annotation.FieldSize:
			values[i] = new(sql.NullInt64)
		case annotation.FieldName, annotation.FieldHash, annotation.FieldMimeType:
			values[i] = new(sql.NullString)
		case annotation.FieldCreatedAt, annotation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case annotation.FieldID:
			values[i] = new(uuid.UUID)
		case annotation.ForeignKeys[0]: // inode_annotations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case annotation.ForeignKeys[1]: // instance_annotations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case annotation.ForeignKeys[2]: // namespace_annotations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case annotation.ForeignKeys[3]: // workflow_annotations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Annotation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Annotation fields.
func (a *Annotation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case annotation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case annotation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case annotation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case annotation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case annotation.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				a.Size = int(value.Int64)
			}
		case annotation.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				a.Hash = value.String
			}
		case annotation.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil {
				a.Data = *value
			}
		case annotation.FieldMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime_type", values[i])
			} else if value.Valid {
				a.MimeType = value.String
			}
		case annotation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field inode_annotations", values[i])
			} else if value.Valid {
				a.inode_annotations = new(uuid.UUID)
				*a.inode_annotations = *value.S.(*uuid.UUID)
			}
		case annotation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field instance_annotations", values[i])
			} else if value.Valid {
				a.instance_annotations = new(uuid.UUID)
				*a.instance_annotations = *value.S.(*uuid.UUID)
			}
		case annotation.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field namespace_annotations", values[i])
			} else if value.Valid {
				a.namespace_annotations = new(uuid.UUID)
				*a.namespace_annotations = *value.S.(*uuid.UUID)
			}
		case annotation.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_annotations", values[i])
			} else if value.Valid {
				a.workflow_annotations = new(uuid.UUID)
				*a.workflow_annotations = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryNamespace queries the "namespace" edge of the Annotation entity.
func (a *Annotation) QueryNamespace() *NamespaceQuery {
	return (&AnnotationClient{config: a.config}).QueryNamespace(a)
}

// QueryWorkflow queries the "workflow" edge of the Annotation entity.
func (a *Annotation) QueryWorkflow() *WorkflowQuery {
	return (&AnnotationClient{config: a.config}).QueryWorkflow(a)
}

// QueryInstance queries the "instance" edge of the Annotation entity.
func (a *Annotation) QueryInstance() *InstanceQuery {
	return (&AnnotationClient{config: a.config}).QueryInstance(a)
}

// QueryInode queries the "inode" edge of the Annotation entity.
func (a *Annotation) QueryInode() *InodeQuery {
	return (&AnnotationClient{config: a.config}).QueryInode(a)
}

// Update returns a builder for updating this Annotation.
// Note that you need to call Annotation.Unwrap() before calling this method if this Annotation
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Annotation) Update() *AnnotationUpdateOne {
	return (&AnnotationClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Annotation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Annotation) Unwrap() *Annotation {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Annotation is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Annotation) String() string {
	var builder strings.Builder
	builder.WriteString("Annotation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", a.Size))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(a.Hash)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", a.Data))
	builder.WriteString(", ")
	builder.WriteString("mime_type=")
	builder.WriteString(a.MimeType)
	builder.WriteByte(')')
	return builder.String()
}

// Annotations is a parsable slice of Annotation.
type Annotations []*Annotation

func (a Annotations) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
