// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/pkg/flow/ent/inode"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// Workflow is the model entity for the Workflow schema.
type Workflow struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Live holds the value of the "live" field.
	Live bool `json:"live,omitempty"`
	// LogToEvents holds the value of the "logToEvents" field.
	LogToEvents string `json:"logToEvents,omitempty"`
	// ReadOnly holds the value of the "readOnly" field.
	ReadOnly bool `json:"readOnly,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowQuery when eager-loading is set.
	Edges               WorkflowEdges `json:"edges"`
	inode_workflow      *uuid.UUID
	namespace_workflows *uuid.UUID
}

// WorkflowEdges holds the relations/edges for other nodes in the graph.
type WorkflowEdges struct {
	// Inode holds the value of the inode edge.
	Inode *Inode `json:"inode,omitempty"`
	// Namespace holds the value of the namespace edge.
	Namespace *Namespace `json:"namespace,omitempty"`
	// Revisions holds the value of the revisions edge.
	Revisions []*Revision `json:"revisions,omitempty"`
	// Refs holds the value of the refs edge.
	Refs []*Ref `json:"refs,omitempty"`
	// Instances holds the value of the instances edge.
	Instances []*Instance `json:"instances,omitempty"`
	// Routes holds the value of the routes edge.
	Routes []*Route `json:"routes,omitempty"`
	// Logs holds the value of the logs edge.
	Logs []*LogMsg `json:"logs,omitempty"`
	// Vars holds the value of the vars edge.
	Vars []*VarRef `json:"vars,omitempty"`
	// Wfevents holds the value of the wfevents edge.
	Wfevents []*Events `json:"wfevents,omitempty"`
	// Annotations holds the value of the annotations edge.
	Annotations []*Annotation `json:"annotations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// InodeOrErr returns the Inode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEdges) InodeOrErr() (*Inode, error) {
	if e.loadedTypes[0] {
		if e.Inode == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: inode.Label}
		}
		return e.Inode, nil
	}
	return nil, &NotLoadedError{edge: "inode"}
}

// NamespaceOrErr returns the Namespace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEdges) NamespaceOrErr() (*Namespace, error) {
	if e.loadedTypes[1] {
		if e.Namespace == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: namespace.Label}
		}
		return e.Namespace, nil
	}
	return nil, &NotLoadedError{edge: "namespace"}
}

// RevisionsOrErr returns the Revisions value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEdges) RevisionsOrErr() ([]*Revision, error) {
	if e.loadedTypes[2] {
		return e.Revisions, nil
	}
	return nil, &NotLoadedError{edge: "revisions"}
}

// RefsOrErr returns the Refs value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEdges) RefsOrErr() ([]*Ref, error) {
	if e.loadedTypes[3] {
		return e.Refs, nil
	}
	return nil, &NotLoadedError{edge: "refs"}
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEdges) InstancesOrErr() ([]*Instance, error) {
	if e.loadedTypes[4] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// RoutesOrErr returns the Routes value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEdges) RoutesOrErr() ([]*Route, error) {
	if e.loadedTypes[5] {
		return e.Routes, nil
	}
	return nil, &NotLoadedError{edge: "routes"}
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEdges) LogsOrErr() ([]*LogMsg, error) {
	if e.loadedTypes[6] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// VarsOrErr returns the Vars value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEdges) VarsOrErr() ([]*VarRef, error) {
	if e.loadedTypes[7] {
		return e.Vars, nil
	}
	return nil, &NotLoadedError{edge: "vars"}
}

// WfeventsOrErr returns the Wfevents value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEdges) WfeventsOrErr() ([]*Events, error) {
	if e.loadedTypes[8] {
		return e.Wfevents, nil
	}
	return nil, &NotLoadedError{edge: "wfevents"}
}

// AnnotationsOrErr returns the Annotations value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEdges) AnnotationsOrErr() ([]*Annotation, error) {
	if e.loadedTypes[9] {
		return e.Annotations, nil
	}
	return nil, &NotLoadedError{edge: "annotations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Workflow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflow.FieldLive, workflow.FieldReadOnly:
			values[i] = new(sql.NullBool)
		case workflow.FieldLogToEvents:
			values[i] = new(sql.NullString)
		case workflow.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workflow.FieldID:
			values[i] = new(uuid.UUID)
		case workflow.ForeignKeys[0]: // inode_workflow
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case workflow.ForeignKeys[1]: // namespace_workflows
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Workflow", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Workflow fields.
func (w *Workflow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflow.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case workflow.FieldLive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field live", values[i])
			} else if value.Valid {
				w.Live = value.Bool
			}
		case workflow.FieldLogToEvents:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logToEvents", values[i])
			} else if value.Valid {
				w.LogToEvents = value.String
			}
		case workflow.FieldReadOnly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field readOnly", values[i])
			} else if value.Valid {
				w.ReadOnly = value.Bool
			}
		case workflow.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case workflow.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field inode_workflow", values[i])
			} else if value.Valid {
				w.inode_workflow = new(uuid.UUID)
				*w.inode_workflow = *value.S.(*uuid.UUID)
			}
		case workflow.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field namespace_workflows", values[i])
			} else if value.Valid {
				w.namespace_workflows = new(uuid.UUID)
				*w.namespace_workflows = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryInode queries the "inode" edge of the Workflow entity.
func (w *Workflow) QueryInode() *InodeQuery {
	return (&WorkflowClient{config: w.config}).QueryInode(w)
}

// QueryNamespace queries the "namespace" edge of the Workflow entity.
func (w *Workflow) QueryNamespace() *NamespaceQuery {
	return (&WorkflowClient{config: w.config}).QueryNamespace(w)
}

// QueryRevisions queries the "revisions" edge of the Workflow entity.
func (w *Workflow) QueryRevisions() *RevisionQuery {
	return (&WorkflowClient{config: w.config}).QueryRevisions(w)
}

// QueryRefs queries the "refs" edge of the Workflow entity.
func (w *Workflow) QueryRefs() *RefQuery {
	return (&WorkflowClient{config: w.config}).QueryRefs(w)
}

// QueryInstances queries the "instances" edge of the Workflow entity.
func (w *Workflow) QueryInstances() *InstanceQuery {
	return (&WorkflowClient{config: w.config}).QueryInstances(w)
}

// QueryRoutes queries the "routes" edge of the Workflow entity.
func (w *Workflow) QueryRoutes() *RouteQuery {
	return (&WorkflowClient{config: w.config}).QueryRoutes(w)
}

// QueryLogs queries the "logs" edge of the Workflow entity.
func (w *Workflow) QueryLogs() *LogMsgQuery {
	return (&WorkflowClient{config: w.config}).QueryLogs(w)
}

// QueryVars queries the "vars" edge of the Workflow entity.
func (w *Workflow) QueryVars() *VarRefQuery {
	return (&WorkflowClient{config: w.config}).QueryVars(w)
}

// QueryWfevents queries the "wfevents" edge of the Workflow entity.
func (w *Workflow) QueryWfevents() *EventsQuery {
	return (&WorkflowClient{config: w.config}).QueryWfevents(w)
}

// QueryAnnotations queries the "annotations" edge of the Workflow entity.
func (w *Workflow) QueryAnnotations() *AnnotationQuery {
	return (&WorkflowClient{config: w.config}).QueryAnnotations(w)
}

// Update returns a builder for updating this Workflow.
// Note that you need to call Workflow.Unwrap() before calling this method if this Workflow
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Workflow) Update() *WorkflowUpdateOne {
	return (&WorkflowClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Workflow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Workflow) Unwrap() *Workflow {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Workflow is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Workflow) String() string {
	var builder strings.Builder
	builder.WriteString("Workflow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("live=")
	builder.WriteString(fmt.Sprintf("%v", w.Live))
	builder.WriteString(", ")
	builder.WriteString("logToEvents=")
	builder.WriteString(w.LogToEvents)
	builder.WriteString(", ")
	builder.WriteString("readOnly=")
	builder.WriteString(fmt.Sprintf("%v", w.ReadOnly))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Workflows is a parsable slice of Workflow.
type Workflows []*Workflow

func (w Workflows) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
