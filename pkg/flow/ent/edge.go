// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (ce *CloudEvents) Namespace(ctx context.Context) (*Namespace, error) {
	result, err := ce.Edges.NamespaceOrErr()
	if IsNotLoaded(err) {
		result, err = ce.QueryNamespace().Only(ctx)
	}
	return result, err
}

func (e *Events) Workflow(ctx context.Context) (*Workflow, error) {
	result, err := e.Edges.WorkflowOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryWorkflow().Only(ctx)
	}
	return result, err
}

func (e *Events) Wfeventswait(ctx context.Context) ([]*EventsWait, error) {
	result, err := e.Edges.WfeventswaitOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryWfeventswait().All(ctx)
	}
	return result, err
}

func (e *Events) Instance(ctx context.Context) (*Instance, error) {
	result, err := e.Edges.InstanceOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryInstance().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Events) Namespace(ctx context.Context) (*Namespace, error) {
	result, err := e.Edges.NamespaceOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryNamespace().Only(ctx)
	}
	return result, err
}

func (ew *EventsWait) Workflowevent(ctx context.Context) (*Events, error) {
	result, err := ew.Edges.WorkfloweventOrErr()
	if IsNotLoaded(err) {
		result, err = ew.QueryWorkflowevent().Only(ctx)
	}
	return result, err
}

func (i *Inode) Namespace(ctx context.Context) (*Namespace, error) {
	result, err := i.Edges.NamespaceOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryNamespace().Only(ctx)
	}
	return result, err
}

func (i *Inode) Children(ctx context.Context) ([]*Inode, error) {
	result, err := i.Edges.ChildrenOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryChildren().All(ctx)
	}
	return result, err
}

func (i *Inode) Parent(ctx context.Context) (*Inode, error) {
	result, err := i.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Inode) Workflow(ctx context.Context) (*Workflow, error) {
	result, err := i.Edges.WorkflowOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryWorkflow().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Instance) Namespace(ctx context.Context) (*Namespace, error) {
	result, err := i.Edges.NamespaceOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryNamespace().Only(ctx)
	}
	return result, err
}

func (i *Instance) Workflow(ctx context.Context) (*Workflow, error) {
	result, err := i.Edges.WorkflowOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryWorkflow().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Instance) Revision(ctx context.Context) (*Revision, error) {
	result, err := i.Edges.RevisionOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryRevision().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Instance) Logs(ctx context.Context) ([]*LogMsg, error) {
	result, err := i.Edges.LogsOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryLogs().All(ctx)
	}
	return result, err
}

func (i *Instance) Vars(ctx context.Context) ([]*VarRef, error) {
	result, err := i.Edges.VarsOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryVars().All(ctx)
	}
	return result, err
}

func (i *Instance) Runtime(ctx context.Context) (*InstanceRuntime, error) {
	result, err := i.Edges.RuntimeOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryRuntime().Only(ctx)
	}
	return result, err
}

func (i *Instance) Children(ctx context.Context) ([]*InstanceRuntime, error) {
	result, err := i.Edges.ChildrenOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryChildren().All(ctx)
	}
	return result, err
}

func (i *Instance) Eventlisteners(ctx context.Context) ([]*Events, error) {
	result, err := i.Edges.EventlistenersOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryEventlisteners().All(ctx)
	}
	return result, err
}

func (ir *InstanceRuntime) Instance(ctx context.Context) (*Instance, error) {
	result, err := ir.Edges.InstanceOrErr()
	if IsNotLoaded(err) {
		result, err = ir.QueryInstance().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ir *InstanceRuntime) Caller(ctx context.Context) (*Instance, error) {
	result, err := ir.Edges.CallerOrErr()
	if IsNotLoaded(err) {
		result, err = ir.QueryCaller().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (lm *LogMsg) Namespace(ctx context.Context) (*Namespace, error) {
	result, err := lm.Edges.NamespaceOrErr()
	if IsNotLoaded(err) {
		result, err = lm.QueryNamespace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (lm *LogMsg) Workflow(ctx context.Context) (*Workflow, error) {
	result, err := lm.Edges.WorkflowOrErr()
	if IsNotLoaded(err) {
		result, err = lm.QueryWorkflow().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (lm *LogMsg) Instance(ctx context.Context) (*Instance, error) {
	result, err := lm.Edges.InstanceOrErr()
	if IsNotLoaded(err) {
		result, err = lm.QueryInstance().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (n *Namespace) Inodes(ctx context.Context) ([]*Inode, error) {
	result, err := n.Edges.InodesOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryInodes().All(ctx)
	}
	return result, err
}

func (n *Namespace) Workflows(ctx context.Context) ([]*Workflow, error) {
	result, err := n.Edges.WorkflowsOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryWorkflows().All(ctx)
	}
	return result, err
}

func (n *Namespace) Instances(ctx context.Context) ([]*Instance, error) {
	result, err := n.Edges.InstancesOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryInstances().All(ctx)
	}
	return result, err
}

func (n *Namespace) Logs(ctx context.Context) ([]*LogMsg, error) {
	result, err := n.Edges.LogsOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryLogs().All(ctx)
	}
	return result, err
}

func (n *Namespace) Vars(ctx context.Context) ([]*VarRef, error) {
	result, err := n.Edges.VarsOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryVars().All(ctx)
	}
	return result, err
}

func (n *Namespace) Cloudevents(ctx context.Context) ([]*CloudEvents, error) {
	result, err := n.Edges.CloudeventsOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryCloudevents().All(ctx)
	}
	return result, err
}

func (n *Namespace) Namespacelisteners(ctx context.Context) ([]*Events, error) {
	result, err := n.Edges.NamespacelistenersOrErr()
	if IsNotLoaded(err) {
		result, err = n.QueryNamespacelisteners().All(ctx)
	}
	return result, err
}

func (r *Ref) Workflow(ctx context.Context) (*Workflow, error) {
	result, err := r.Edges.WorkflowOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryWorkflow().Only(ctx)
	}
	return result, err
}

func (r *Ref) Revision(ctx context.Context) (*Revision, error) {
	result, err := r.Edges.RevisionOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryRevision().Only(ctx)
	}
	return result, err
}

func (r *Ref) Routes(ctx context.Context) ([]*Route, error) {
	result, err := r.Edges.RoutesOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryRoutes().All(ctx)
	}
	return result, err
}

func (r *Revision) Workflow(ctx context.Context) (*Workflow, error) {
	result, err := r.Edges.WorkflowOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryWorkflow().Only(ctx)
	}
	return result, err
}

func (r *Revision) Refs(ctx context.Context) ([]*Ref, error) {
	result, err := r.Edges.RefsOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryRefs().All(ctx)
	}
	return result, err
}

func (r *Revision) Instances(ctx context.Context) ([]*Instance, error) {
	result, err := r.Edges.InstancesOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryInstances().All(ctx)
	}
	return result, err
}

func (r *Route) Workflow(ctx context.Context) (*Workflow, error) {
	result, err := r.Edges.WorkflowOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryWorkflow().Only(ctx)
	}
	return result, err
}

func (r *Route) Ref(ctx context.Context) (*Ref, error) {
	result, err := r.Edges.RefOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryRef().Only(ctx)
	}
	return result, err
}

func (vd *VarData) Varrefs(ctx context.Context) ([]*VarRef, error) {
	result, err := vd.Edges.VarrefsOrErr()
	if IsNotLoaded(err) {
		result, err = vd.QueryVarrefs().All(ctx)
	}
	return result, err
}

func (vr *VarRef) Vardata(ctx context.Context) (*VarData, error) {
	result, err := vr.Edges.VardataOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryVardata().Only(ctx)
	}
	return result, err
}

func (vr *VarRef) Namespace(ctx context.Context) (*Namespace, error) {
	result, err := vr.Edges.NamespaceOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryNamespace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vr *VarRef) Workflow(ctx context.Context) (*Workflow, error) {
	result, err := vr.Edges.WorkflowOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryWorkflow().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vr *VarRef) Instance(ctx context.Context) (*Instance, error) {
	result, err := vr.Edges.InstanceOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryInstance().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workflow) Inode(ctx context.Context) (*Inode, error) {
	result, err := w.Edges.InodeOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryInode().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workflow) Namespace(ctx context.Context) (*Namespace, error) {
	result, err := w.Edges.NamespaceOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryNamespace().Only(ctx)
	}
	return result, err
}

func (w *Workflow) Revisions(ctx context.Context) ([]*Revision, error) {
	result, err := w.Edges.RevisionsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryRevisions().All(ctx)
	}
	return result, err
}

func (w *Workflow) Refs(ctx context.Context) ([]*Ref, error) {
	result, err := w.Edges.RefsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryRefs().All(ctx)
	}
	return result, err
}

func (w *Workflow) Instances(ctx context.Context) ([]*Instance, error) {
	result, err := w.Edges.InstancesOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryInstances().All(ctx)
	}
	return result, err
}

func (w *Workflow) Routes(ctx context.Context) ([]*Route, error) {
	result, err := w.Edges.RoutesOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryRoutes().All(ctx)
	}
	return result, err
}

func (w *Workflow) Logs(ctx context.Context) ([]*LogMsg, error) {
	result, err := w.Edges.LogsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryLogs().All(ctx)
	}
	return result, err
}

func (w *Workflow) Vars(ctx context.Context) ([]*VarRef, error) {
	result, err := w.Edges.VarsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryVars().All(ctx)
	}
	return result, err
}

func (w *Workflow) Wfevents(ctx context.Context) ([]*Events, error) {
	result, err := w.Edges.WfeventsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryWfevents().All(ctx)
	}
	return result, err
}
