// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/logmsg"
	"github.com/direktiv/direktiv/pkg/flow/ent/mirror"
	"github.com/direktiv/direktiv/pkg/flow/ent/mirroractivity"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/google/uuid"
)

// MirrorActivityQuery is the builder for querying MirrorActivity entities.
type MirrorActivityQuery struct {
	config
	limit         *int
	offset        *int
	unique        *bool
	order         []OrderFunc
	fields        []string
	predicates    []predicate.MirrorActivity
	withNamespace *NamespaceQuery
	withMirror    *MirrorQuery
	withLogs      *LogMsgQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MirrorActivityQuery builder.
func (maq *MirrorActivityQuery) Where(ps ...predicate.MirrorActivity) *MirrorActivityQuery {
	maq.predicates = append(maq.predicates, ps...)
	return maq
}

// Limit adds a limit step to the query.
func (maq *MirrorActivityQuery) Limit(limit int) *MirrorActivityQuery {
	maq.limit = &limit
	return maq
}

// Offset adds an offset step to the query.
func (maq *MirrorActivityQuery) Offset(offset int) *MirrorActivityQuery {
	maq.offset = &offset
	return maq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (maq *MirrorActivityQuery) Unique(unique bool) *MirrorActivityQuery {
	maq.unique = &unique
	return maq
}

// Order adds an order step to the query.
func (maq *MirrorActivityQuery) Order(o ...OrderFunc) *MirrorActivityQuery {
	maq.order = append(maq.order, o...)
	return maq
}

// QueryNamespace chains the current query on the "namespace" edge.
func (maq *MirrorActivityQuery) QueryNamespace() *NamespaceQuery {
	query := &NamespaceQuery{config: maq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := maq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := maq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mirroractivity.Table, mirroractivity.FieldID, selector),
			sqlgraph.To(namespace.Table, namespace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mirroractivity.NamespaceTable, mirroractivity.NamespaceColumn),
		)
		fromU = sqlgraph.SetNeighbors(maq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMirror chains the current query on the "mirror" edge.
func (maq *MirrorActivityQuery) QueryMirror() *MirrorQuery {
	query := &MirrorQuery{config: maq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := maq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := maq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mirroractivity.Table, mirroractivity.FieldID, selector),
			sqlgraph.To(mirror.Table, mirror.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mirroractivity.MirrorTable, mirroractivity.MirrorColumn),
		)
		fromU = sqlgraph.SetNeighbors(maq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogs chains the current query on the "logs" edge.
func (maq *MirrorActivityQuery) QueryLogs() *LogMsgQuery {
	query := &LogMsgQuery{config: maq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := maq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := maq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mirroractivity.Table, mirroractivity.FieldID, selector),
			sqlgraph.To(logmsg.Table, logmsg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mirroractivity.LogsTable, mirroractivity.LogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(maq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MirrorActivity entity from the query.
// Returns a *NotFoundError when no MirrorActivity was found.
func (maq *MirrorActivityQuery) First(ctx context.Context) (*MirrorActivity, error) {
	nodes, err := maq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{mirroractivity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (maq *MirrorActivityQuery) FirstX(ctx context.Context) *MirrorActivity {
	node, err := maq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MirrorActivity ID from the query.
// Returns a *NotFoundError when no MirrorActivity ID was found.
func (maq *MirrorActivityQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = maq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{mirroractivity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (maq *MirrorActivityQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := maq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MirrorActivity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MirrorActivity entity is found.
// Returns a *NotFoundError when no MirrorActivity entities are found.
func (maq *MirrorActivityQuery) Only(ctx context.Context) (*MirrorActivity, error) {
	nodes, err := maq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{mirroractivity.Label}
	default:
		return nil, &NotSingularError{mirroractivity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (maq *MirrorActivityQuery) OnlyX(ctx context.Context) *MirrorActivity {
	node, err := maq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MirrorActivity ID in the query.
// Returns a *NotSingularError when more than one MirrorActivity ID is found.
// Returns a *NotFoundError when no entities are found.
func (maq *MirrorActivityQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = maq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{mirroractivity.Label}
	default:
		err = &NotSingularError{mirroractivity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (maq *MirrorActivityQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := maq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MirrorActivities.
func (maq *MirrorActivityQuery) All(ctx context.Context) ([]*MirrorActivity, error) {
	if err := maq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return maq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (maq *MirrorActivityQuery) AllX(ctx context.Context) []*MirrorActivity {
	nodes, err := maq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MirrorActivity IDs.
func (maq *MirrorActivityQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := maq.Select(mirroractivity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (maq *MirrorActivityQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := maq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (maq *MirrorActivityQuery) Count(ctx context.Context) (int, error) {
	if err := maq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return maq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (maq *MirrorActivityQuery) CountX(ctx context.Context) int {
	count, err := maq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (maq *MirrorActivityQuery) Exist(ctx context.Context) (bool, error) {
	if err := maq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return maq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (maq *MirrorActivityQuery) ExistX(ctx context.Context) bool {
	exist, err := maq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MirrorActivityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (maq *MirrorActivityQuery) Clone() *MirrorActivityQuery {
	if maq == nil {
		return nil
	}
	return &MirrorActivityQuery{
		config:        maq.config,
		limit:         maq.limit,
		offset:        maq.offset,
		order:         append([]OrderFunc{}, maq.order...),
		predicates:    append([]predicate.MirrorActivity{}, maq.predicates...),
		withNamespace: maq.withNamespace.Clone(),
		withMirror:    maq.withMirror.Clone(),
		withLogs:      maq.withLogs.Clone(),
		// clone intermediate query.
		sql:    maq.sql.Clone(),
		path:   maq.path,
		unique: maq.unique,
	}
}

// WithNamespace tells the query-builder to eager-load the nodes that are connected to
// the "namespace" edge. The optional arguments are used to configure the query builder of the edge.
func (maq *MirrorActivityQuery) WithNamespace(opts ...func(*NamespaceQuery)) *MirrorActivityQuery {
	query := &NamespaceQuery{config: maq.config}
	for _, opt := range opts {
		opt(query)
	}
	maq.withNamespace = query
	return maq
}

// WithMirror tells the query-builder to eager-load the nodes that are connected to
// the "mirror" edge. The optional arguments are used to configure the query builder of the edge.
func (maq *MirrorActivityQuery) WithMirror(opts ...func(*MirrorQuery)) *MirrorActivityQuery {
	query := &MirrorQuery{config: maq.config}
	for _, opt := range opts {
		opt(query)
	}
	maq.withMirror = query
	return maq
}

// WithLogs tells the query-builder to eager-load the nodes that are connected to
// the "logs" edge. The optional arguments are used to configure the query builder of the edge.
func (maq *MirrorActivityQuery) WithLogs(opts ...func(*LogMsgQuery)) *MirrorActivityQuery {
	query := &LogMsgQuery{config: maq.config}
	for _, opt := range opts {
		opt(query)
	}
	maq.withLogs = query
	return maq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MirrorActivity.Query().
//		GroupBy(mirroractivity.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (maq *MirrorActivityQuery) GroupBy(field string, fields ...string) *MirrorActivityGroupBy {
	grbuild := &MirrorActivityGroupBy{config: maq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := maq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return maq.sqlQuery(ctx), nil
	}
	grbuild.label = mirroractivity.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//	}
//
//	client.MirrorActivity.Query().
//		Select(mirroractivity.FieldType).
//		Scan(ctx, &v)
func (maq *MirrorActivityQuery) Select(fields ...string) *MirrorActivitySelect {
	maq.fields = append(maq.fields, fields...)
	selbuild := &MirrorActivitySelect{MirrorActivityQuery: maq}
	selbuild.label = mirroractivity.Label
	selbuild.flds, selbuild.scan = &maq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a MirrorActivitySelect configured with the given aggregations.
func (maq *MirrorActivityQuery) Aggregate(fns ...AggregateFunc) *MirrorActivitySelect {
	return maq.Select().Aggregate(fns...)
}

func (maq *MirrorActivityQuery) prepareQuery(ctx context.Context) error {
	for _, f := range maq.fields {
		if !mirroractivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if maq.path != nil {
		prev, err := maq.path(ctx)
		if err != nil {
			return err
		}
		maq.sql = prev
	}
	return nil
}

func (maq *MirrorActivityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MirrorActivity, error) {
	var (
		nodes       = []*MirrorActivity{}
		withFKs     = maq.withFKs
		_spec       = maq.querySpec()
		loadedTypes = [3]bool{
			maq.withNamespace != nil,
			maq.withMirror != nil,
			maq.withLogs != nil,
		}
	)
	if maq.withNamespace != nil || maq.withMirror != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, mirroractivity.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MirrorActivity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MirrorActivity{config: maq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, maq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := maq.withNamespace; query != nil {
		if err := maq.loadNamespace(ctx, query, nodes, nil,
			func(n *MirrorActivity, e *Namespace) { n.Edges.Namespace = e }); err != nil {
			return nil, err
		}
	}
	if query := maq.withMirror; query != nil {
		if err := maq.loadMirror(ctx, query, nodes, nil,
			func(n *MirrorActivity, e *Mirror) { n.Edges.Mirror = e }); err != nil {
			return nil, err
		}
	}
	if query := maq.withLogs; query != nil {
		if err := maq.loadLogs(ctx, query, nodes,
			func(n *MirrorActivity) { n.Edges.Logs = []*LogMsg{} },
			func(n *MirrorActivity, e *LogMsg) { n.Edges.Logs = append(n.Edges.Logs, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (maq *MirrorActivityQuery) loadNamespace(ctx context.Context, query *NamespaceQuery, nodes []*MirrorActivity, init func(*MirrorActivity), assign func(*MirrorActivity, *Namespace)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*MirrorActivity)
	for i := range nodes {
		if nodes[i].namespace_mirror_activities == nil {
			continue
		}
		fk := *nodes[i].namespace_mirror_activities
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(namespace.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "namespace_mirror_activities" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (maq *MirrorActivityQuery) loadMirror(ctx context.Context, query *MirrorQuery, nodes []*MirrorActivity, init func(*MirrorActivity), assign func(*MirrorActivity, *Mirror)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*MirrorActivity)
	for i := range nodes {
		if nodes[i].mirror_activities == nil {
			continue
		}
		fk := *nodes[i].mirror_activities
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(mirror.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mirror_activities" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (maq *MirrorActivityQuery) loadLogs(ctx context.Context, query *LogMsgQuery, nodes []*MirrorActivity, init func(*MirrorActivity), assign func(*MirrorActivity, *LogMsg)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*MirrorActivity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.LogMsg(func(s *sql.Selector) {
		s.Where(sql.InValues(mirroractivity.LogsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.mirror_activity_logs
		if fk == nil {
			return fmt.Errorf(`foreign-key "mirror_activity_logs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mirror_activity_logs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (maq *MirrorActivityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := maq.querySpec()
	_spec.Node.Columns = maq.fields
	if len(maq.fields) > 0 {
		_spec.Unique = maq.unique != nil && *maq.unique
	}
	return sqlgraph.CountNodes(ctx, maq.driver, _spec)
}

func (maq *MirrorActivityQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := maq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (maq *MirrorActivityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mirroractivity.Table,
			Columns: mirroractivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mirroractivity.FieldID,
			},
		},
		From:   maq.sql,
		Unique: true,
	}
	if unique := maq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := maq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mirroractivity.FieldID)
		for i := range fields {
			if fields[i] != mirroractivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := maq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := maq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := maq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := maq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (maq *MirrorActivityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(maq.driver.Dialect())
	t1 := builder.Table(mirroractivity.Table)
	columns := maq.fields
	if len(columns) == 0 {
		columns = mirroractivity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if maq.sql != nil {
		selector = maq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if maq.unique != nil && *maq.unique {
		selector.Distinct()
	}
	for _, p := range maq.predicates {
		p(selector)
	}
	for _, p := range maq.order {
		p(selector)
	}
	if offset := maq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := maq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MirrorActivityGroupBy is the group-by builder for MirrorActivity entities.
type MirrorActivityGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (magb *MirrorActivityGroupBy) Aggregate(fns ...AggregateFunc) *MirrorActivityGroupBy {
	magb.fns = append(magb.fns, fns...)
	return magb
}

// Scan applies the group-by query and scans the result into the given value.
func (magb *MirrorActivityGroupBy) Scan(ctx context.Context, v any) error {
	query, err := magb.path(ctx)
	if err != nil {
		return err
	}
	magb.sql = query
	return magb.sqlScan(ctx, v)
}

func (magb *MirrorActivityGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range magb.fields {
		if !mirroractivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := magb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := magb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (magb *MirrorActivityGroupBy) sqlQuery() *sql.Selector {
	selector := magb.sql.Select()
	aggregation := make([]string, 0, len(magb.fns))
	for _, fn := range magb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(magb.fields)+len(magb.fns))
		for _, f := range magb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(magb.fields...)...)
}

// MirrorActivitySelect is the builder for selecting fields of MirrorActivity entities.
type MirrorActivitySelect struct {
	*MirrorActivityQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mas *MirrorActivitySelect) Aggregate(fns ...AggregateFunc) *MirrorActivitySelect {
	mas.fns = append(mas.fns, fns...)
	return mas
}

// Scan applies the selector query and scans the result into the given value.
func (mas *MirrorActivitySelect) Scan(ctx context.Context, v any) error {
	if err := mas.prepareQuery(ctx); err != nil {
		return err
	}
	mas.sql = mas.MirrorActivityQuery.sqlQuery(ctx)
	return mas.sqlScan(ctx, v)
}

func (mas *MirrorActivitySelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(mas.fns))
	for _, fn := range mas.fns {
		aggregation = append(aggregation, fn(mas.sql))
	}
	switch n := len(*mas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		mas.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		mas.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := mas.sql.Query()
	if err := mas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
