// Code generated by ent, DO NOT EDIT.

package workflow

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workflow type in the database.
	Label = "workflow"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldLive holds the string denoting the live field in the database.
	FieldLive = "live"
	// FieldLogToEvents holds the string denoting the logtoevents field in the database.
	FieldLogToEvents = "log_to_events"
	// FieldReadOnly holds the string denoting the readonly field in the database.
	FieldReadOnly = "read_only"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeInode holds the string denoting the inode edge name in mutations.
	EdgeInode = "inode"
	// EdgeNamespace holds the string denoting the namespace edge name in mutations.
	EdgeNamespace = "namespace"
	// EdgeRevisions holds the string denoting the revisions edge name in mutations.
	EdgeRevisions = "revisions"
	// EdgeRefs holds the string denoting the refs edge name in mutations.
	EdgeRefs = "refs"
	// EdgeInstances holds the string denoting the instances edge name in mutations.
	EdgeInstances = "instances"
	// EdgeRoutes holds the string denoting the routes edge name in mutations.
	EdgeRoutes = "routes"
	// EdgeLogs holds the string denoting the logs edge name in mutations.
	EdgeLogs = "logs"
	// EdgeVars holds the string denoting the vars edge name in mutations.
	EdgeVars = "vars"
	// EdgeWfevents holds the string denoting the wfevents edge name in mutations.
	EdgeWfevents = "wfevents"
	// EdgeAnnotations holds the string denoting the annotations edge name in mutations.
	EdgeAnnotations = "annotations"
	// Table holds the table name of the workflow in the database.
	Table = "workflows"
	// InodeTable is the table that holds the inode relation/edge.
	InodeTable = "workflows"
	// InodeInverseTable is the table name for the Inode entity.
	// It exists in this package in order to avoid circular dependency with the "inode" package.
	InodeInverseTable = "inodes"
	// InodeColumn is the table column denoting the inode relation/edge.
	InodeColumn = "inode_workflow"
	// NamespaceTable is the table that holds the namespace relation/edge.
	NamespaceTable = "workflows"
	// NamespaceInverseTable is the table name for the Namespace entity.
	// It exists in this package in order to avoid circular dependency with the "namespace" package.
	NamespaceInverseTable = "namespaces"
	// NamespaceColumn is the table column denoting the namespace relation/edge.
	NamespaceColumn = "namespace_workflows"
	// RevisionsTable is the table that holds the revisions relation/edge.
	RevisionsTable = "revisions"
	// RevisionsInverseTable is the table name for the Revision entity.
	// It exists in this package in order to avoid circular dependency with the "revision" package.
	RevisionsInverseTable = "revisions"
	// RevisionsColumn is the table column denoting the revisions relation/edge.
	RevisionsColumn = "workflow_revisions"
	// RefsTable is the table that holds the refs relation/edge.
	RefsTable = "refs"
	// RefsInverseTable is the table name for the Ref entity.
	// It exists in this package in order to avoid circular dependency with the "ref" package.
	RefsInverseTable = "refs"
	// RefsColumn is the table column denoting the refs relation/edge.
	RefsColumn = "workflow_refs"
	// InstancesTable is the table that holds the instances relation/edge.
	InstancesTable = "instances"
	// InstancesInverseTable is the table name for the Instance entity.
	// It exists in this package in order to avoid circular dependency with the "instance" package.
	InstancesInverseTable = "instances"
	// InstancesColumn is the table column denoting the instances relation/edge.
	InstancesColumn = "workflow_instances"
	// RoutesTable is the table that holds the routes relation/edge.
	RoutesTable = "routes"
	// RoutesInverseTable is the table name for the Route entity.
	// It exists in this package in order to avoid circular dependency with the "route" package.
	RoutesInverseTable = "routes"
	// RoutesColumn is the table column denoting the routes relation/edge.
	RoutesColumn = "workflow_routes"
	// LogsTable is the table that holds the logs relation/edge.
	LogsTable = "log_msgs"
	// LogsInverseTable is the table name for the LogMsg entity.
	// It exists in this package in order to avoid circular dependency with the "logmsg" package.
	LogsInverseTable = "log_msgs"
	// LogsColumn is the table column denoting the logs relation/edge.
	LogsColumn = "workflow_logs"
	// VarsTable is the table that holds the vars relation/edge.
	VarsTable = "var_refs"
	// VarsInverseTable is the table name for the VarRef entity.
	// It exists in this package in order to avoid circular dependency with the "varref" package.
	VarsInverseTable = "var_refs"
	// VarsColumn is the table column denoting the vars relation/edge.
	VarsColumn = "workflow_vars"
	// WfeventsTable is the table that holds the wfevents relation/edge.
	WfeventsTable = "events"
	// WfeventsInverseTable is the table name for the Events entity.
	// It exists in this package in order to avoid circular dependency with the "events" package.
	WfeventsInverseTable = "events"
	// WfeventsColumn is the table column denoting the wfevents relation/edge.
	WfeventsColumn = "workflow_wfevents"
	// AnnotationsTable is the table that holds the annotations relation/edge.
	AnnotationsTable = "annotations"
	// AnnotationsInverseTable is the table name for the Annotation entity.
	// It exists in this package in order to avoid circular dependency with the "annotation" package.
	AnnotationsInverseTable = "annotations"
	// AnnotationsColumn is the table column denoting the annotations relation/edge.
	AnnotationsColumn = "workflow_annotations"
)

// Columns holds all SQL columns for workflow fields.
var Columns = []string{
	FieldID,
	FieldLive,
	FieldLogToEvents,
	FieldReadOnly,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workflows"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"inode_workflow",
	"namespace_workflows",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLive holds the default value on creation for the "live" field.
	DefaultLive bool
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
