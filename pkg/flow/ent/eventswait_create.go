// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/events"
	"github.com/direktiv/direktiv/pkg/flow/ent/eventswait"
	"github.com/google/uuid"
)

// EventsWaitCreate is the builder for creating a EventsWait entity.
type EventsWaitCreate struct {
	config
	mutation *EventsWaitMutation
	hooks    []Hook
}

// SetEvents sets the "events" field.
func (ewc *EventsWaitCreate) SetEvents(m map[string]interface{}) *EventsWaitCreate {
	ewc.mutation.SetEvents(m)
	return ewc
}

// SetID sets the "id" field.
func (ewc *EventsWaitCreate) SetID(u uuid.UUID) *EventsWaitCreate {
	ewc.mutation.SetID(u)
	return ewc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ewc *EventsWaitCreate) SetNillableID(u *uuid.UUID) *EventsWaitCreate {
	if u != nil {
		ewc.SetID(*u)
	}
	return ewc
}

// SetWorkfloweventID sets the "workflowevent" edge to the Events entity by ID.
func (ewc *EventsWaitCreate) SetWorkfloweventID(id uuid.UUID) *EventsWaitCreate {
	ewc.mutation.SetWorkfloweventID(id)
	return ewc
}

// SetWorkflowevent sets the "workflowevent" edge to the Events entity.
func (ewc *EventsWaitCreate) SetWorkflowevent(e *Events) *EventsWaitCreate {
	return ewc.SetWorkfloweventID(e.ID)
}

// Mutation returns the EventsWaitMutation object of the builder.
func (ewc *EventsWaitCreate) Mutation() *EventsWaitMutation {
	return ewc.mutation
}

// Save creates the EventsWait in the database.
func (ewc *EventsWaitCreate) Save(ctx context.Context) (*EventsWait, error) {
	var (
		err  error
		node *EventsWait
	)
	ewc.defaults()
	if len(ewc.hooks) == 0 {
		if err = ewc.check(); err != nil {
			return nil, err
		}
		node, err = ewc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventsWaitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ewc.check(); err != nil {
				return nil, err
			}
			ewc.mutation = mutation
			if node, err = ewc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ewc.hooks) - 1; i >= 0; i-- {
			if ewc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ewc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ewc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EventsWait)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EventsWaitMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ewc *EventsWaitCreate) SaveX(ctx context.Context) *EventsWait {
	v, err := ewc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ewc *EventsWaitCreate) Exec(ctx context.Context) error {
	_, err := ewc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ewc *EventsWaitCreate) ExecX(ctx context.Context) {
	if err := ewc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ewc *EventsWaitCreate) defaults() {
	if _, ok := ewc.mutation.ID(); !ok {
		v := eventswait.DefaultID()
		ewc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ewc *EventsWaitCreate) check() error {
	if _, ok := ewc.mutation.Events(); !ok {
		return &ValidationError{Name: "events", err: errors.New(`ent: missing required field "EventsWait.events"`)}
	}
	if _, ok := ewc.mutation.WorkfloweventID(); !ok {
		return &ValidationError{Name: "workflowevent", err: errors.New(`ent: missing required edge "EventsWait.workflowevent"`)}
	}
	return nil
}

func (ewc *EventsWaitCreate) sqlSave(ctx context.Context) (*EventsWait, error) {
	_node, _spec := ewc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ewc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ewc *EventsWaitCreate) createSpec() (*EventsWait, *sqlgraph.CreateSpec) {
	var (
		_node = &EventsWait{config: ewc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: eventswait.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: eventswait.FieldID,
			},
		}
	)
	if id, ok := ewc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ewc.mutation.Events(); ok {
		_spec.SetField(eventswait.FieldEvents, field.TypeJSON, value)
		_node.Events = value
	}
	if nodes := ewc.mutation.WorkfloweventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventswait.WorkfloweventTable,
			Columns: []string{eventswait.WorkfloweventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: events.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.events_wfeventswait = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventsWaitCreateBulk is the builder for creating many EventsWait entities in bulk.
type EventsWaitCreateBulk struct {
	config
	builders []*EventsWaitCreate
}

// Save creates the EventsWait entities in the database.
func (ewcb *EventsWaitCreateBulk) Save(ctx context.Context) ([]*EventsWait, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ewcb.builders))
	nodes := make([]*EventsWait, len(ewcb.builders))
	mutators := make([]Mutator, len(ewcb.builders))
	for i := range ewcb.builders {
		func(i int, root context.Context) {
			builder := ewcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventsWaitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ewcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ewcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ewcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ewcb *EventsWaitCreateBulk) SaveX(ctx context.Context) []*EventsWait {
	v, err := ewcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ewcb *EventsWaitCreateBulk) Exec(ctx context.Context) error {
	_, err := ewcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ewcb *EventsWaitCreateBulk) ExecX(ctx context.Context) {
	if err := ewcb.Exec(ctx); err != nil {
		panic(err)
	}
}
