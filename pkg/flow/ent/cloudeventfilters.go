// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/pkg/flow/ent/cloudeventfilters"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/google/uuid"
)

// CloudEventFilters is the model entity for the CloudEventFilters schema.
type CloudEventFilters struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Jscode holds the value of the "jscode" field.
	Jscode string `json:"jscode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CloudEventFiltersQuery when eager-loading is set.
	Edges                       CloudEventFiltersEdges `json:"edges"`
	namespace_cloudeventfilters *uuid.UUID
}

// CloudEventFiltersEdges holds the relations/edges for other nodes in the graph.
type CloudEventFiltersEdges struct {
	// Namespace holds the value of the namespace edge.
	Namespace *Namespace `json:"namespace,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NamespaceOrErr returns the Namespace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CloudEventFiltersEdges) NamespaceOrErr() (*Namespace, error) {
	if e.loadedTypes[0] {
		if e.Namespace == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: namespace.Label}
		}
		return e.Namespace, nil
	}
	return nil, &NotLoadedError{edge: "namespace"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CloudEventFilters) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cloudeventfilters.FieldID:
			values[i] = new(sql.NullInt64)
		case cloudeventfilters.FieldName, cloudeventfilters.FieldJscode:
			values[i] = new(sql.NullString)
		case cloudeventfilters.ForeignKeys[0]: // namespace_cloudeventfilters
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type CloudEventFilters", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CloudEventFilters fields.
func (cef *CloudEventFilters) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cloudeventfilters.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cef.ID = int(value.Int64)
		case cloudeventfilters.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cef.Name = value.String
			}
		case cloudeventfilters.FieldJscode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jscode", values[i])
			} else if value.Valid {
				cef.Jscode = value.String
			}
		case cloudeventfilters.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field namespace_cloudeventfilters", values[i])
			} else if value.Valid {
				cef.namespace_cloudeventfilters = new(uuid.UUID)
				*cef.namespace_cloudeventfilters = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryNamespace queries the "namespace" edge of the CloudEventFilters entity.
func (cef *CloudEventFilters) QueryNamespace() *NamespaceQuery {
	return NewCloudEventFiltersClient(cef.config).QueryNamespace(cef)
}

// Update returns a builder for updating this CloudEventFilters.
// Note that you need to call CloudEventFilters.Unwrap() before calling this method if this CloudEventFilters
// was returned from a transaction, and the transaction was committed or rolled back.
func (cef *CloudEventFilters) Update() *CloudEventFiltersUpdateOne {
	return NewCloudEventFiltersClient(cef.config).UpdateOne(cef)
}

// Unwrap unwraps the CloudEventFilters entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cef *CloudEventFilters) Unwrap() *CloudEventFilters {
	_tx, ok := cef.config.driver.(*txDriver)
	if !ok {
		panic("ent: CloudEventFilters is not a transactional entity")
	}
	cef.config.driver = _tx.drv
	return cef
}

// String implements the fmt.Stringer.
func (cef *CloudEventFilters) String() string {
	var builder strings.Builder
	builder.WriteString("CloudEventFilters(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cef.ID))
	builder.WriteString("name=")
	builder.WriteString(cef.Name)
	builder.WriteString(", ")
	builder.WriteString("jscode=")
	builder.WriteString(cef.Jscode)
	builder.WriteByte(')')
	return builder.String()
}

// CloudEventFiltersSlice is a parsable slice of CloudEventFilters.
type CloudEventFiltersSlice []*CloudEventFilters
