// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/direktiv/direktiv/pkg/flow/ent/vardata"
	"github.com/direktiv/direktiv/pkg/flow/ent/varref"
	"github.com/google/uuid"
)

// VarDataUpdate is the builder for updating VarData entities.
type VarDataUpdate struct {
	config
	hooks    []Hook
	mutation *VarDataMutation
}

// Where appends a list predicates to the VarDataUpdate builder.
func (vdu *VarDataUpdate) Where(ps ...predicate.VarData) *VarDataUpdate {
	vdu.mutation.Where(ps...)
	return vdu
}

// SetUpdatedAt sets the "updated_at" field.
func (vdu *VarDataUpdate) SetUpdatedAt(t time.Time) *VarDataUpdate {
	vdu.mutation.SetUpdatedAt(t)
	return vdu
}

// SetSize sets the "size" field.
func (vdu *VarDataUpdate) SetSize(i int) *VarDataUpdate {
	vdu.mutation.ResetSize()
	vdu.mutation.SetSize(i)
	return vdu
}

// AddSize adds i to the "size" field.
func (vdu *VarDataUpdate) AddSize(i int) *VarDataUpdate {
	vdu.mutation.AddSize(i)
	return vdu
}

// SetHash sets the "hash" field.
func (vdu *VarDataUpdate) SetHash(s string) *VarDataUpdate {
	vdu.mutation.SetHash(s)
	return vdu
}

// SetData sets the "data" field.
func (vdu *VarDataUpdate) SetData(b []byte) *VarDataUpdate {
	vdu.mutation.SetData(b)
	return vdu
}

// SetMimeType sets the "mime_type" field.
func (vdu *VarDataUpdate) SetMimeType(s string) *VarDataUpdate {
	vdu.mutation.SetMimeType(s)
	return vdu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (vdu *VarDataUpdate) SetNillableMimeType(s *string) *VarDataUpdate {
	if s != nil {
		vdu.SetMimeType(*s)
	}
	return vdu
}

// AddVarrefIDs adds the "varrefs" edge to the VarRef entity by IDs.
func (vdu *VarDataUpdate) AddVarrefIDs(ids ...uuid.UUID) *VarDataUpdate {
	vdu.mutation.AddVarrefIDs(ids...)
	return vdu
}

// AddVarrefs adds the "varrefs" edges to the VarRef entity.
func (vdu *VarDataUpdate) AddVarrefs(v ...*VarRef) *VarDataUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vdu.AddVarrefIDs(ids...)
}

// Mutation returns the VarDataMutation object of the builder.
func (vdu *VarDataUpdate) Mutation() *VarDataMutation {
	return vdu.mutation
}

// ClearVarrefs clears all "varrefs" edges to the VarRef entity.
func (vdu *VarDataUpdate) ClearVarrefs() *VarDataUpdate {
	vdu.mutation.ClearVarrefs()
	return vdu
}

// RemoveVarrefIDs removes the "varrefs" edge to VarRef entities by IDs.
func (vdu *VarDataUpdate) RemoveVarrefIDs(ids ...uuid.UUID) *VarDataUpdate {
	vdu.mutation.RemoveVarrefIDs(ids...)
	return vdu
}

// RemoveVarrefs removes "varrefs" edges to VarRef entities.
func (vdu *VarDataUpdate) RemoveVarrefs(v ...*VarRef) *VarDataUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vdu.RemoveVarrefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vdu *VarDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vdu.defaults()
	if len(vdu.hooks) == 0 {
		affected, err = vdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VarDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vdu.mutation = mutation
			affected, err = vdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vdu.hooks) - 1; i >= 0; i-- {
			if vdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vdu *VarDataUpdate) SaveX(ctx context.Context) int {
	affected, err := vdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vdu *VarDataUpdate) Exec(ctx context.Context) error {
	_, err := vdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdu *VarDataUpdate) ExecX(ctx context.Context) {
	if err := vdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdu *VarDataUpdate) defaults() {
	if _, ok := vdu.mutation.UpdatedAt(); !ok {
		v := vardata.UpdateDefaultUpdatedAt()
		vdu.mutation.SetUpdatedAt(v)
	}
}

func (vdu *VarDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vardata.Table,
			Columns: vardata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vardata.FieldID,
			},
		},
	}
	if ps := vdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdu.mutation.UpdatedAt(); ok {
		_spec.SetField(vardata.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vdu.mutation.Size(); ok {
		_spec.SetField(vardata.FieldSize, field.TypeInt, value)
	}
	if value, ok := vdu.mutation.AddedSize(); ok {
		_spec.AddField(vardata.FieldSize, field.TypeInt, value)
	}
	if value, ok := vdu.mutation.Hash(); ok {
		_spec.SetField(vardata.FieldHash, field.TypeString, value)
	}
	if value, ok := vdu.mutation.Data(); ok {
		_spec.SetField(vardata.FieldData, field.TypeBytes, value)
	}
	if value, ok := vdu.mutation.MimeType(); ok {
		_spec.SetField(vardata.FieldMimeType, field.TypeString, value)
	}
	if vdu.mutation.VarrefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vardata.VarrefsTable,
			Columns: []string{vardata.VarrefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.RemovedVarrefsIDs(); len(nodes) > 0 && !vdu.mutation.VarrefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vardata.VarrefsTable,
			Columns: []string{vardata.VarrefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.VarrefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vardata.VarrefsTable,
			Columns: []string{vardata.VarrefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vardata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// VarDataUpdateOne is the builder for updating a single VarData entity.
type VarDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VarDataMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vduo *VarDataUpdateOne) SetUpdatedAt(t time.Time) *VarDataUpdateOne {
	vduo.mutation.SetUpdatedAt(t)
	return vduo
}

// SetSize sets the "size" field.
func (vduo *VarDataUpdateOne) SetSize(i int) *VarDataUpdateOne {
	vduo.mutation.ResetSize()
	vduo.mutation.SetSize(i)
	return vduo
}

// AddSize adds i to the "size" field.
func (vduo *VarDataUpdateOne) AddSize(i int) *VarDataUpdateOne {
	vduo.mutation.AddSize(i)
	return vduo
}

// SetHash sets the "hash" field.
func (vduo *VarDataUpdateOne) SetHash(s string) *VarDataUpdateOne {
	vduo.mutation.SetHash(s)
	return vduo
}

// SetData sets the "data" field.
func (vduo *VarDataUpdateOne) SetData(b []byte) *VarDataUpdateOne {
	vduo.mutation.SetData(b)
	return vduo
}

// SetMimeType sets the "mime_type" field.
func (vduo *VarDataUpdateOne) SetMimeType(s string) *VarDataUpdateOne {
	vduo.mutation.SetMimeType(s)
	return vduo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (vduo *VarDataUpdateOne) SetNillableMimeType(s *string) *VarDataUpdateOne {
	if s != nil {
		vduo.SetMimeType(*s)
	}
	return vduo
}

// AddVarrefIDs adds the "varrefs" edge to the VarRef entity by IDs.
func (vduo *VarDataUpdateOne) AddVarrefIDs(ids ...uuid.UUID) *VarDataUpdateOne {
	vduo.mutation.AddVarrefIDs(ids...)
	return vduo
}

// AddVarrefs adds the "varrefs" edges to the VarRef entity.
func (vduo *VarDataUpdateOne) AddVarrefs(v ...*VarRef) *VarDataUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vduo.AddVarrefIDs(ids...)
}

// Mutation returns the VarDataMutation object of the builder.
func (vduo *VarDataUpdateOne) Mutation() *VarDataMutation {
	return vduo.mutation
}

// ClearVarrefs clears all "varrefs" edges to the VarRef entity.
func (vduo *VarDataUpdateOne) ClearVarrefs() *VarDataUpdateOne {
	vduo.mutation.ClearVarrefs()
	return vduo
}

// RemoveVarrefIDs removes the "varrefs" edge to VarRef entities by IDs.
func (vduo *VarDataUpdateOne) RemoveVarrefIDs(ids ...uuid.UUID) *VarDataUpdateOne {
	vduo.mutation.RemoveVarrefIDs(ids...)
	return vduo
}

// RemoveVarrefs removes "varrefs" edges to VarRef entities.
func (vduo *VarDataUpdateOne) RemoveVarrefs(v ...*VarRef) *VarDataUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vduo.RemoveVarrefIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vduo *VarDataUpdateOne) Select(field string, fields ...string) *VarDataUpdateOne {
	vduo.fields = append([]string{field}, fields...)
	return vduo
}

// Save executes the query and returns the updated VarData entity.
func (vduo *VarDataUpdateOne) Save(ctx context.Context) (*VarData, error) {
	var (
		err  error
		node *VarData
	)
	vduo.defaults()
	if len(vduo.hooks) == 0 {
		node, err = vduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VarDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vduo.mutation = mutation
			node, err = vduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vduo.hooks) - 1; i >= 0; i-- {
			if vduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*VarData)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VarDataMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vduo *VarDataUpdateOne) SaveX(ctx context.Context) *VarData {
	node, err := vduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vduo *VarDataUpdateOne) Exec(ctx context.Context) error {
	_, err := vduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vduo *VarDataUpdateOne) ExecX(ctx context.Context) {
	if err := vduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vduo *VarDataUpdateOne) defaults() {
	if _, ok := vduo.mutation.UpdatedAt(); !ok {
		v := vardata.UpdateDefaultUpdatedAt()
		vduo.mutation.SetUpdatedAt(v)
	}
}

func (vduo *VarDataUpdateOne) sqlSave(ctx context.Context) (_node *VarData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vardata.Table,
			Columns: vardata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vardata.FieldID,
			},
		},
	}
	id, ok := vduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VarData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vardata.FieldID)
		for _, f := range fields {
			if !vardata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vardata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vduo.mutation.UpdatedAt(); ok {
		_spec.SetField(vardata.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vduo.mutation.Size(); ok {
		_spec.SetField(vardata.FieldSize, field.TypeInt, value)
	}
	if value, ok := vduo.mutation.AddedSize(); ok {
		_spec.AddField(vardata.FieldSize, field.TypeInt, value)
	}
	if value, ok := vduo.mutation.Hash(); ok {
		_spec.SetField(vardata.FieldHash, field.TypeString, value)
	}
	if value, ok := vduo.mutation.Data(); ok {
		_spec.SetField(vardata.FieldData, field.TypeBytes, value)
	}
	if value, ok := vduo.mutation.MimeType(); ok {
		_spec.SetField(vardata.FieldMimeType, field.TypeString, value)
	}
	if vduo.mutation.VarrefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vardata.VarrefsTable,
			Columns: []string{vardata.VarrefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.RemovedVarrefsIDs(); len(nodes) > 0 && !vduo.mutation.VarrefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vardata.VarrefsTable,
			Columns: []string{vardata.VarrefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.VarrefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vardata.VarrefsTable,
			Columns: []string{vardata.VarrefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: varref.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VarData{config: vduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vardata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
