// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/annotation"
	"github.com/direktiv/direktiv/pkg/flow/ent/events"
	"github.com/direktiv/direktiv/pkg/flow/ent/inode"
	"github.com/direktiv/direktiv/pkg/flow/ent/instance"
	"github.com/direktiv/direktiv/pkg/flow/ent/logmsg"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/direktiv/direktiv/pkg/flow/ent/ref"
	"github.com/direktiv/direktiv/pkg/flow/ent/revision"
	"github.com/direktiv/direktiv/pkg/flow/ent/route"
	"github.com/direktiv/direktiv/pkg/flow/ent/varref"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// WorkflowQuery is the builder for querying Workflow entities.
type WorkflowQuery struct {
	config
	limit           *int
	offset          *int
	unique          *bool
	order           []OrderFunc
	fields          []string
	predicates      []predicate.Workflow
	withInode       *InodeQuery
	withNamespace   *NamespaceQuery
	withRevisions   *RevisionQuery
	withRefs        *RefQuery
	withInstances   *InstanceQuery
	withRoutes      *RouteQuery
	withLogs        *LogMsgQuery
	withVars        *VarRefQuery
	withWfevents    *EventsQuery
	withAnnotations *AnnotationQuery
	withFKs         bool
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkflowQuery builder.
func (wq *WorkflowQuery) Where(ps ...predicate.Workflow) *WorkflowQuery {
	wq.predicates = append(wq.predicates, ps...)
	return wq
}

// Limit adds a limit step to the query.
func (wq *WorkflowQuery) Limit(limit int) *WorkflowQuery {
	wq.limit = &limit
	return wq
}

// Offset adds an offset step to the query.
func (wq *WorkflowQuery) Offset(offset int) *WorkflowQuery {
	wq.offset = &offset
	return wq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wq *WorkflowQuery) Unique(unique bool) *WorkflowQuery {
	wq.unique = &unique
	return wq
}

// Order adds an order step to the query.
func (wq *WorkflowQuery) Order(o ...OrderFunc) *WorkflowQuery {
	wq.order = append(wq.order, o...)
	return wq
}

// QueryInode chains the current query on the "inode" edge.
func (wq *WorkflowQuery) QueryInode() *InodeQuery {
	query := &InodeQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(inode.Table, inode.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, workflow.InodeTable, workflow.InodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNamespace chains the current query on the "namespace" edge.
func (wq *WorkflowQuery) QueryNamespace() *NamespaceQuery {
	query := &NamespaceQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(namespace.Table, namespace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflow.NamespaceTable, workflow.NamespaceColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRevisions chains the current query on the "revisions" edge.
func (wq *WorkflowQuery) QueryRevisions() *RevisionQuery {
	query := &RevisionQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(revision.Table, revision.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.RevisionsTable, workflow.RevisionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRefs chains the current query on the "refs" edge.
func (wq *WorkflowQuery) QueryRefs() *RefQuery {
	query := &RefQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(ref.Table, ref.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.RefsTable, workflow.RefsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInstances chains the current query on the "instances" edge.
func (wq *WorkflowQuery) QueryInstances() *InstanceQuery {
	query := &InstanceQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(instance.Table, instance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.InstancesTable, workflow.InstancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoutes chains the current query on the "routes" edge.
func (wq *WorkflowQuery) QueryRoutes() *RouteQuery {
	query := &RouteQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(route.Table, route.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.RoutesTable, workflow.RoutesColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogs chains the current query on the "logs" edge.
func (wq *WorkflowQuery) QueryLogs() *LogMsgQuery {
	query := &LogMsgQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(logmsg.Table, logmsg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.LogsTable, workflow.LogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVars chains the current query on the "vars" edge.
func (wq *WorkflowQuery) QueryVars() *VarRefQuery {
	query := &VarRefQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(varref.Table, varref.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.VarsTable, workflow.VarsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWfevents chains the current query on the "wfevents" edge.
func (wq *WorkflowQuery) QueryWfevents() *EventsQuery {
	query := &EventsQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(events.Table, events.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.WfeventsTable, workflow.WfeventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnnotations chains the current query on the "annotations" edge.
func (wq *WorkflowQuery) QueryAnnotations() *AnnotationQuery {
	query := &AnnotationQuery{config: wq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, selector),
			sqlgraph.To(annotation.Table, annotation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.AnnotationsTable, workflow.AnnotationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Workflow entity from the query.
// Returns a *NotFoundError when no Workflow was found.
func (wq *WorkflowQuery) First(ctx context.Context) (*Workflow, error) {
	nodes, err := wq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workflow.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wq *WorkflowQuery) FirstX(ctx context.Context) *Workflow {
	node, err := wq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Workflow ID from the query.
// Returns a *NotFoundError when no Workflow ID was found.
func (wq *WorkflowQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workflow.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wq *WorkflowQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Workflow entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Workflow entity is found.
// Returns a *NotFoundError when no Workflow entities are found.
func (wq *WorkflowQuery) Only(ctx context.Context) (*Workflow, error) {
	nodes, err := wq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workflow.Label}
	default:
		return nil, &NotSingularError{workflow.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wq *WorkflowQuery) OnlyX(ctx context.Context) *Workflow {
	node, err := wq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Workflow ID in the query.
// Returns a *NotSingularError when more than one Workflow ID is found.
// Returns a *NotFoundError when no entities are found.
func (wq *WorkflowQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workflow.Label}
	default:
		err = &NotSingularError{workflow.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wq *WorkflowQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Workflows.
func (wq *WorkflowQuery) All(ctx context.Context) ([]*Workflow, error) {
	if err := wq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return wq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (wq *WorkflowQuery) AllX(ctx context.Context) []*Workflow {
	nodes, err := wq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Workflow IDs.
func (wq *WorkflowQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := wq.Select(workflow.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wq *WorkflowQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wq *WorkflowQuery) Count(ctx context.Context) (int, error) {
	if err := wq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return wq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (wq *WorkflowQuery) CountX(ctx context.Context) int {
	count, err := wq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wq *WorkflowQuery) Exist(ctx context.Context) (bool, error) {
	if err := wq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return wq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (wq *WorkflowQuery) ExistX(ctx context.Context) bool {
	exist, err := wq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkflowQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wq *WorkflowQuery) Clone() *WorkflowQuery {
	if wq == nil {
		return nil
	}
	return &WorkflowQuery{
		config:          wq.config,
		limit:           wq.limit,
		offset:          wq.offset,
		order:           append([]OrderFunc{}, wq.order...),
		predicates:      append([]predicate.Workflow{}, wq.predicates...),
		withInode:       wq.withInode.Clone(),
		withNamespace:   wq.withNamespace.Clone(),
		withRevisions:   wq.withRevisions.Clone(),
		withRefs:        wq.withRefs.Clone(),
		withInstances:   wq.withInstances.Clone(),
		withRoutes:      wq.withRoutes.Clone(),
		withLogs:        wq.withLogs.Clone(),
		withVars:        wq.withVars.Clone(),
		withWfevents:    wq.withWfevents.Clone(),
		withAnnotations: wq.withAnnotations.Clone(),
		// clone intermediate query.
		sql:    wq.sql.Clone(),
		path:   wq.path,
		unique: wq.unique,
	}
}

// WithInode tells the query-builder to eager-load the nodes that are connected to
// the "inode" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithInode(opts ...func(*InodeQuery)) *WorkflowQuery {
	query := &InodeQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withInode = query
	return wq
}

// WithNamespace tells the query-builder to eager-load the nodes that are connected to
// the "namespace" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithNamespace(opts ...func(*NamespaceQuery)) *WorkflowQuery {
	query := &NamespaceQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withNamespace = query
	return wq
}

// WithRevisions tells the query-builder to eager-load the nodes that are connected to
// the "revisions" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithRevisions(opts ...func(*RevisionQuery)) *WorkflowQuery {
	query := &RevisionQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withRevisions = query
	return wq
}

// WithRefs tells the query-builder to eager-load the nodes that are connected to
// the "refs" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithRefs(opts ...func(*RefQuery)) *WorkflowQuery {
	query := &RefQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withRefs = query
	return wq
}

// WithInstances tells the query-builder to eager-load the nodes that are connected to
// the "instances" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithInstances(opts ...func(*InstanceQuery)) *WorkflowQuery {
	query := &InstanceQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withInstances = query
	return wq
}

// WithRoutes tells the query-builder to eager-load the nodes that are connected to
// the "routes" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithRoutes(opts ...func(*RouteQuery)) *WorkflowQuery {
	query := &RouteQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withRoutes = query
	return wq
}

// WithLogs tells the query-builder to eager-load the nodes that are connected to
// the "logs" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithLogs(opts ...func(*LogMsgQuery)) *WorkflowQuery {
	query := &LogMsgQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withLogs = query
	return wq
}

// WithVars tells the query-builder to eager-load the nodes that are connected to
// the "vars" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithVars(opts ...func(*VarRefQuery)) *WorkflowQuery {
	query := &VarRefQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withVars = query
	return wq
}

// WithWfevents tells the query-builder to eager-load the nodes that are connected to
// the "wfevents" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithWfevents(opts ...func(*EventsQuery)) *WorkflowQuery {
	query := &EventsQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withWfevents = query
	return wq
}

// WithAnnotations tells the query-builder to eager-load the nodes that are connected to
// the "annotations" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkflowQuery) WithAnnotations(opts ...func(*AnnotationQuery)) *WorkflowQuery {
	query := &AnnotationQuery{config: wq.config}
	for _, opt := range opts {
		opt(query)
	}
	wq.withAnnotations = query
	return wq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Live bool `json:"live,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Workflow.Query().
//		GroupBy(workflow.FieldLive).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wq *WorkflowQuery) GroupBy(field string, fields ...string) *WorkflowGroupBy {
	grbuild := &WorkflowGroupBy{config: wq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return wq.sqlQuery(ctx), nil
	}
	grbuild.label = workflow.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Live bool `json:"live,omitempty"`
//	}
//
//	client.Workflow.Query().
//		Select(workflow.FieldLive).
//		Scan(ctx, &v)
func (wq *WorkflowQuery) Select(fields ...string) *WorkflowSelect {
	wq.fields = append(wq.fields, fields...)
	selbuild := &WorkflowSelect{WorkflowQuery: wq}
	selbuild.label = workflow.Label
	selbuild.flds, selbuild.scan = &wq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a WorkflowSelect configured with the given aggregations.
func (wq *WorkflowQuery) Aggregate(fns ...AggregateFunc) *WorkflowSelect {
	return wq.Select().Aggregate(fns...)
}

func (wq *WorkflowQuery) prepareQuery(ctx context.Context) error {
	for _, f := range wq.fields {
		if !workflow.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wq.path != nil {
		prev, err := wq.path(ctx)
		if err != nil {
			return err
		}
		wq.sql = prev
	}
	return nil
}

func (wq *WorkflowQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Workflow, error) {
	var (
		nodes       = []*Workflow{}
		withFKs     = wq.withFKs
		_spec       = wq.querySpec()
		loadedTypes = [10]bool{
			wq.withInode != nil,
			wq.withNamespace != nil,
			wq.withRevisions != nil,
			wq.withRefs != nil,
			wq.withInstances != nil,
			wq.withRoutes != nil,
			wq.withLogs != nil,
			wq.withVars != nil,
			wq.withWfevents != nil,
			wq.withAnnotations != nil,
		}
	)
	if wq.withInode != nil || wq.withNamespace != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workflow.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Workflow).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Workflow{config: wq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(wq.modifiers) > 0 {
		_spec.Modifiers = wq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wq.withInode; query != nil {
		if err := wq.loadInode(ctx, query, nodes, nil,
			func(n *Workflow, e *Inode) { n.Edges.Inode = e }); err != nil {
			return nil, err
		}
	}
	if query := wq.withNamespace; query != nil {
		if err := wq.loadNamespace(ctx, query, nodes, nil,
			func(n *Workflow, e *Namespace) { n.Edges.Namespace = e }); err != nil {
			return nil, err
		}
	}
	if query := wq.withRevisions; query != nil {
		if err := wq.loadRevisions(ctx, query, nodes,
			func(n *Workflow) { n.Edges.Revisions = []*Revision{} },
			func(n *Workflow, e *Revision) { n.Edges.Revisions = append(n.Edges.Revisions, e) }); err != nil {
			return nil, err
		}
	}
	if query := wq.withRefs; query != nil {
		if err := wq.loadRefs(ctx, query, nodes,
			func(n *Workflow) { n.Edges.Refs = []*Ref{} },
			func(n *Workflow, e *Ref) { n.Edges.Refs = append(n.Edges.Refs, e) }); err != nil {
			return nil, err
		}
	}
	if query := wq.withInstances; query != nil {
		if err := wq.loadInstances(ctx, query, nodes,
			func(n *Workflow) { n.Edges.Instances = []*Instance{} },
			func(n *Workflow, e *Instance) { n.Edges.Instances = append(n.Edges.Instances, e) }); err != nil {
			return nil, err
		}
	}
	if query := wq.withRoutes; query != nil {
		if err := wq.loadRoutes(ctx, query, nodes,
			func(n *Workflow) { n.Edges.Routes = []*Route{} },
			func(n *Workflow, e *Route) { n.Edges.Routes = append(n.Edges.Routes, e) }); err != nil {
			return nil, err
		}
	}
	if query := wq.withLogs; query != nil {
		if err := wq.loadLogs(ctx, query, nodes,
			func(n *Workflow) { n.Edges.Logs = []*LogMsg{} },
			func(n *Workflow, e *LogMsg) { n.Edges.Logs = append(n.Edges.Logs, e) }); err != nil {
			return nil, err
		}
	}
	if query := wq.withVars; query != nil {
		if err := wq.loadVars(ctx, query, nodes,
			func(n *Workflow) { n.Edges.Vars = []*VarRef{} },
			func(n *Workflow, e *VarRef) { n.Edges.Vars = append(n.Edges.Vars, e) }); err != nil {
			return nil, err
		}
	}
	if query := wq.withWfevents; query != nil {
		if err := wq.loadWfevents(ctx, query, nodes,
			func(n *Workflow) { n.Edges.Wfevents = []*Events{} },
			func(n *Workflow, e *Events) { n.Edges.Wfevents = append(n.Edges.Wfevents, e) }); err != nil {
			return nil, err
		}
	}
	if query := wq.withAnnotations; query != nil {
		if err := wq.loadAnnotations(ctx, query, nodes,
			func(n *Workflow) { n.Edges.Annotations = []*Annotation{} },
			func(n *Workflow, e *Annotation) { n.Edges.Annotations = append(n.Edges.Annotations, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wq *WorkflowQuery) loadInode(ctx context.Context, query *InodeQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *Inode)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Workflow)
	for i := range nodes {
		if nodes[i].inode_workflow == nil {
			continue
		}
		fk := *nodes[i].inode_workflow
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(inode.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "inode_workflow" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wq *WorkflowQuery) loadNamespace(ctx context.Context, query *NamespaceQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *Namespace)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Workflow)
	for i := range nodes {
		if nodes[i].namespace_workflows == nil {
			continue
		}
		fk := *nodes[i].namespace_workflows
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(namespace.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "namespace_workflows" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wq *WorkflowQuery) loadRevisions(ctx context.Context, query *RevisionQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *Revision)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Workflow)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Revision(func(s *sql.Selector) {
		s.Where(sql.InValues(workflow.RevisionsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_revisions
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_revisions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_revisions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (wq *WorkflowQuery) loadRefs(ctx context.Context, query *RefQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *Ref)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Workflow)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Ref(func(s *sql.Selector) {
		s.Where(sql.InValues(workflow.RefsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_refs
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_refs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_refs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (wq *WorkflowQuery) loadInstances(ctx context.Context, query *InstanceQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *Instance)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Workflow)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Instance(func(s *sql.Selector) {
		s.Where(sql.InValues(workflow.InstancesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_instances
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_instances" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_instances" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (wq *WorkflowQuery) loadRoutes(ctx context.Context, query *RouteQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *Route)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Workflow)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Route(func(s *sql.Selector) {
		s.Where(sql.InValues(workflow.RoutesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_routes
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_routes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_routes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (wq *WorkflowQuery) loadLogs(ctx context.Context, query *LogMsgQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *LogMsg)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Workflow)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.LogMsg(func(s *sql.Selector) {
		s.Where(sql.InValues(workflow.LogsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_logs
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_logs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_logs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (wq *WorkflowQuery) loadVars(ctx context.Context, query *VarRefQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *VarRef)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Workflow)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.VarRef(func(s *sql.Selector) {
		s.Where(sql.InValues(workflow.VarsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_vars
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_vars" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_vars" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (wq *WorkflowQuery) loadWfevents(ctx context.Context, query *EventsQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *Events)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Workflow)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Events(func(s *sql.Selector) {
		s.Where(sql.InValues(workflow.WfeventsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_wfevents
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_wfevents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_wfevents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (wq *WorkflowQuery) loadAnnotations(ctx context.Context, query *AnnotationQuery, nodes []*Workflow, init func(*Workflow), assign func(*Workflow, *Annotation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Workflow)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Annotation(func(s *sql.Selector) {
		s.Where(sql.InValues(workflow.AnnotationsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workflow_annotations
		if fk == nil {
			return fmt.Errorf(`foreign-key "workflow_annotations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_annotations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (wq *WorkflowQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wq.querySpec()
	if len(wq.modifiers) > 0 {
		_spec.Modifiers = wq.modifiers
	}
	_spec.Node.Columns = wq.fields
	if len(wq.fields) > 0 {
		_spec.Unique = wq.unique != nil && *wq.unique
	}
	return sqlgraph.CountNodes(ctx, wq.driver, _spec)
}

func (wq *WorkflowQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := wq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (wq *WorkflowQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workflow.Table,
			Columns: workflow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: workflow.FieldID,
			},
		},
		From:   wq.sql,
		Unique: true,
	}
	if unique := wq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := wq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflow.FieldID)
		for i := range fields {
			if fields[i] != workflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wq *WorkflowQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wq.driver.Dialect())
	t1 := builder.Table(workflow.Table)
	columns := wq.fields
	if len(columns) == 0 {
		columns = workflow.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wq.sql != nil {
		selector = wq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wq.unique != nil && *wq.unique {
		selector.Distinct()
	}
	for _, m := range wq.modifiers {
		m(selector)
	}
	for _, p := range wq.predicates {
		p(selector)
	}
	for _, p := range wq.order {
		p(selector)
	}
	if offset := wq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (wq *WorkflowQuery) ForUpdate(opts ...sql.LockOption) *WorkflowQuery {
	if wq.driver.Dialect() == dialect.Postgres {
		wq.Unique(false)
	}
	wq.modifiers = append(wq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return wq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (wq *WorkflowQuery) ForShare(opts ...sql.LockOption) *WorkflowQuery {
	if wq.driver.Dialect() == dialect.Postgres {
		wq.Unique(false)
	}
	wq.modifiers = append(wq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return wq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wq *WorkflowQuery) Modify(modifiers ...func(s *sql.Selector)) *WorkflowSelect {
	wq.modifiers = append(wq.modifiers, modifiers...)
	return wq.Select()
}

// WorkflowGroupBy is the group-by builder for Workflow entities.
type WorkflowGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wgb *WorkflowGroupBy) Aggregate(fns ...AggregateFunc) *WorkflowGroupBy {
	wgb.fns = append(wgb.fns, fns...)
	return wgb
}

// Scan applies the group-by query and scans the result into the given value.
func (wgb *WorkflowGroupBy) Scan(ctx context.Context, v any) error {
	query, err := wgb.path(ctx)
	if err != nil {
		return err
	}
	wgb.sql = query
	return wgb.sqlScan(ctx, v)
}

func (wgb *WorkflowGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range wgb.fields {
		if !workflow.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := wgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wgb *WorkflowGroupBy) sqlQuery() *sql.Selector {
	selector := wgb.sql.Select()
	aggregation := make([]string, 0, len(wgb.fns))
	for _, fn := range wgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(wgb.fields)+len(wgb.fns))
		for _, f := range wgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(wgb.fields...)...)
}

// WorkflowSelect is the builder for selecting fields of Workflow entities.
type WorkflowSelect struct {
	*WorkflowQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ws *WorkflowSelect) Aggregate(fns ...AggregateFunc) *WorkflowSelect {
	ws.fns = append(ws.fns, fns...)
	return ws
}

// Scan applies the selector query and scans the result into the given value.
func (ws *WorkflowSelect) Scan(ctx context.Context, v any) error {
	if err := ws.prepareQuery(ctx); err != nil {
		return err
	}
	ws.sql = ws.WorkflowQuery.sqlQuery(ctx)
	return ws.sqlScan(ctx, v)
}

func (ws *WorkflowSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ws.fns))
	for _, fn := range ws.fns {
		aggregation = append(aggregation, fn(ws.sql))
	}
	switch n := len(*ws.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ws.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ws.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ws.sql.Query()
	if err := ws.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ws *WorkflowSelect) Modify(modifiers ...func(s *sql.Selector)) *WorkflowSelect {
	ws.modifiers = append(ws.modifiers, modifiers...)
	return ws
}
