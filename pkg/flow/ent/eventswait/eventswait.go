// Code generated by ent, DO NOT EDIT.

package eventswait

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the eventswait type in the database.
	Label = "events_wait"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldEvents holds the string denoting the events field in the database.
	FieldEvents = "events"
	// EdgeWorkflowevent holds the string denoting the workflowevent edge name in mutations.
	EdgeWorkflowevent = "workflowevent"
	// Table holds the table name of the eventswait in the database.
	Table = "events_waits"
	// WorkfloweventTable is the table that holds the workflowevent relation/edge.
	WorkfloweventTable = "events_waits"
	// WorkfloweventInverseTable is the table name for the Events entity.
	// It exists in this package in order to avoid circular dependency with the "events" package.
	WorkfloweventInverseTable = "events"
	// WorkfloweventColumn is the table column denoting the workflowevent relation/edge.
	WorkfloweventColumn = "events_wfeventswait"
)

// Columns holds all SQL columns for eventswait fields.
var Columns = []string{
	FieldID,
	FieldEvents,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "events_waits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"events_wfeventswait",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
