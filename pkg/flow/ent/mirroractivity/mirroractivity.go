// Code generated by ent, DO NOT EDIT.

package mirroractivity

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the mirroractivity type in the database.
	Label = "mirror_activity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldController holds the string denoting the controller field in the database.
	FieldController = "controller"
	// FieldDeadline holds the string denoting the deadline field in the database.
	FieldDeadline = "deadline"
	// EdgeNamespace holds the string denoting the namespace edge name in mutations.
	EdgeNamespace = "namespace"
	// EdgeMirror holds the string denoting the mirror edge name in mutations.
	EdgeMirror = "mirror"
	// EdgeLogs holds the string denoting the logs edge name in mutations.
	EdgeLogs = "logs"
	// Table holds the table name of the mirroractivity in the database.
	Table = "mirror_activities"
	// NamespaceTable is the table that holds the namespace relation/edge.
	NamespaceTable = "mirror_activities"
	// NamespaceInverseTable is the table name for the Namespace entity.
	// It exists in this package in order to avoid circular dependency with the "namespace" package.
	NamespaceInverseTable = "namespaces"
	// NamespaceColumn is the table column denoting the namespace relation/edge.
	NamespaceColumn = "namespace_mirror_activities"
	// MirrorTable is the table that holds the mirror relation/edge.
	MirrorTable = "mirror_activities"
	// MirrorInverseTable is the table name for the Mirror entity.
	// It exists in this package in order to avoid circular dependency with the "mirror" package.
	MirrorInverseTable = "mirrors"
	// MirrorColumn is the table column denoting the mirror relation/edge.
	MirrorColumn = "mirror_activities"
	// LogsTable is the table that holds the logs relation/edge.
	LogsTable = "log_msgs"
	// LogsInverseTable is the table name for the LogMsg entity.
	// It exists in this package in order to avoid circular dependency with the "logmsg" package.
	LogsInverseTable = "log_msgs"
	// LogsColumn is the table column denoting the logs relation/edge.
	LogsColumn = "mirror_activity_logs"
)

// Columns holds all SQL columns for mirroractivity fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEndAt,
	FieldController,
	FieldDeadline,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "mirror_activities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"mirror_activities",
	"namespace_mirror_activities",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
