// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/logmsg"
	"github.com/direktiv/direktiv/pkg/flow/ent/logtag"
	"github.com/google/uuid"
)

// LogTagCreate is the builder for creating a LogTag entity.
type LogTagCreate struct {
	config
	mutation *LogTagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (ltc *LogTagCreate) SetType(s string) *LogTagCreate {
	ltc.mutation.SetType(s)
	return ltc
}

// SetValue sets the "value" field.
func (ltc *LogTagCreate) SetValue(s string) *LogTagCreate {
	ltc.mutation.SetValue(s)
	return ltc
}

// SetID sets the "id" field.
func (ltc *LogTagCreate) SetID(u uuid.UUID) *LogTagCreate {
	ltc.mutation.SetID(u)
	return ltc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ltc *LogTagCreate) SetNillableID(u *uuid.UUID) *LogTagCreate {
	if u != nil {
		ltc.SetID(*u)
	}
	return ltc
}

// SetLogmsgID sets the "logmsg" edge to the LogMsg entity by ID.
func (ltc *LogTagCreate) SetLogmsgID(id uuid.UUID) *LogTagCreate {
	ltc.mutation.SetLogmsgID(id)
	return ltc
}

// SetLogmsg sets the "logmsg" edge to the LogMsg entity.
func (ltc *LogTagCreate) SetLogmsg(l *LogMsg) *LogTagCreate {
	return ltc.SetLogmsgID(l.ID)
}

// Mutation returns the LogTagMutation object of the builder.
func (ltc *LogTagCreate) Mutation() *LogTagMutation {
	return ltc.mutation
}

// Save creates the LogTag in the database.
func (ltc *LogTagCreate) Save(ctx context.Context) (*LogTag, error) {
	var (
		err  error
		node *LogTag
	)
	ltc.defaults()
	if len(ltc.hooks) == 0 {
		if err = ltc.check(); err != nil {
			return nil, err
		}
		node, err = ltc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ltc.check(); err != nil {
				return nil, err
			}
			ltc.mutation = mutation
			if node, err = ltc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ltc.hooks) - 1; i >= 0; i-- {
			if ltc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ltc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ltc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LogTag)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LogTagMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ltc *LogTagCreate) SaveX(ctx context.Context) *LogTag {
	v, err := ltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltc *LogTagCreate) Exec(ctx context.Context) error {
	_, err := ltc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltc *LogTagCreate) ExecX(ctx context.Context) {
	if err := ltc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltc *LogTagCreate) defaults() {
	if _, ok := ltc.mutation.ID(); !ok {
		v := logtag.DefaultID()
		ltc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltc *LogTagCreate) check() error {
	if _, ok := ltc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "LogTag.type"`)}
	}
	if _, ok := ltc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "LogTag.value"`)}
	}
	if _, ok := ltc.mutation.LogmsgID(); !ok {
		return &ValidationError{Name: "logmsg", err: errors.New(`ent: missing required edge "LogTag.logmsg"`)}
	}
	return nil
}

func (ltc *LogTagCreate) sqlSave(ctx context.Context) (*LogTag, error) {
	_node, _spec := ltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ltc *LogTagCreate) createSpec() (*LogTag, *sqlgraph.CreateSpec) {
	var (
		_node = &LogTag{config: ltc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: logtag.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: logtag.FieldID,
			},
		}
	)
	_spec.OnConflict = ltc.conflict
	if id, ok := ltc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ltc.mutation.GetType(); ok {
		_spec.SetField(logtag.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ltc.mutation.Value(); ok {
		_spec.SetField(logtag.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := ltc.mutation.LogmsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logtag.LogmsgTable,
			Columns: []string{logtag.LogmsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.log_msg_logtag = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LogTag.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LogTagUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ltc *LogTagCreate) OnConflict(opts ...sql.ConflictOption) *LogTagUpsertOne {
	ltc.conflict = opts
	return &LogTagUpsertOne{
		create: ltc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LogTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ltc *LogTagCreate) OnConflictColumns(columns ...string) *LogTagUpsertOne {
	ltc.conflict = append(ltc.conflict, sql.ConflictColumns(columns...))
	return &LogTagUpsertOne{
		create: ltc,
	}
}

type (
	// LogTagUpsertOne is the builder for "upsert"-ing
	//  one LogTag node.
	LogTagUpsertOne struct {
		create *LogTagCreate
	}

	// LogTagUpsert is the "OnConflict" setter.
	LogTagUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *LogTagUpsert) SetType(v string) *LogTagUpsert {
	u.Set(logtag.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LogTagUpsert) UpdateType() *LogTagUpsert {
	u.SetExcluded(logtag.FieldType)
	return u
}

// SetValue sets the "value" field.
func (u *LogTagUpsert) SetValue(v string) *LogTagUpsert {
	u.Set(logtag.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *LogTagUpsert) UpdateValue() *LogTagUpsert {
	u.SetExcluded(logtag.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LogTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(logtag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LogTagUpsertOne) UpdateNewValues() *LogTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(logtag.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LogTag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LogTagUpsertOne) Ignore() *LogTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LogTagUpsertOne) DoNothing() *LogTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LogTagCreate.OnConflict
// documentation for more info.
func (u *LogTagUpsertOne) Update(set func(*LogTagUpsert)) *LogTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LogTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *LogTagUpsertOne) SetType(v string) *LogTagUpsertOne {
	return u.Update(func(s *LogTagUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LogTagUpsertOne) UpdateType() *LogTagUpsertOne {
	return u.Update(func(s *LogTagUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *LogTagUpsertOne) SetValue(v string) *LogTagUpsertOne {
	return u.Update(func(s *LogTagUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *LogTagUpsertOne) UpdateValue() *LogTagUpsertOne {
	return u.Update(func(s *LogTagUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *LogTagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LogTagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LogTagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LogTagUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LogTagUpsertOne.ID is not supported by MySQL driver. Use LogTagUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LogTagUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LogTagCreateBulk is the builder for creating many LogTag entities in bulk.
type LogTagCreateBulk struct {
	config
	builders []*LogTagCreate
	conflict []sql.ConflictOption
}

// Save creates the LogTag entities in the database.
func (ltcb *LogTagCreateBulk) Save(ctx context.Context) ([]*LogTag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ltcb.builders))
	nodes := make([]*LogTag, len(ltcb.builders))
	mutators := make([]Mutator, len(ltcb.builders))
	for i := range ltcb.builders {
		func(i int, root context.Context) {
			builder := ltcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ltcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltcb *LogTagCreateBulk) SaveX(ctx context.Context) []*LogTag {
	v, err := ltcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltcb *LogTagCreateBulk) Exec(ctx context.Context) error {
	_, err := ltcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltcb *LogTagCreateBulk) ExecX(ctx context.Context) {
	if err := ltcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LogTag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LogTagUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (ltcb *LogTagCreateBulk) OnConflict(opts ...sql.ConflictOption) *LogTagUpsertBulk {
	ltcb.conflict = opts
	return &LogTagUpsertBulk{
		create: ltcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LogTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ltcb *LogTagCreateBulk) OnConflictColumns(columns ...string) *LogTagUpsertBulk {
	ltcb.conflict = append(ltcb.conflict, sql.ConflictColumns(columns...))
	return &LogTagUpsertBulk{
		create: ltcb,
	}
}

// LogTagUpsertBulk is the builder for "upsert"-ing
// a bulk of LogTag nodes.
type LogTagUpsertBulk struct {
	create *LogTagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LogTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(logtag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LogTagUpsertBulk) UpdateNewValues() *LogTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(logtag.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LogTag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LogTagUpsertBulk) Ignore() *LogTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LogTagUpsertBulk) DoNothing() *LogTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LogTagCreateBulk.OnConflict
// documentation for more info.
func (u *LogTagUpsertBulk) Update(set func(*LogTagUpsert)) *LogTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LogTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *LogTagUpsertBulk) SetType(v string) *LogTagUpsertBulk {
	return u.Update(func(s *LogTagUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *LogTagUpsertBulk) UpdateType() *LogTagUpsertBulk {
	return u.Update(func(s *LogTagUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *LogTagUpsertBulk) SetValue(v string) *LogTagUpsertBulk {
	return u.Update(func(s *LogTagUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *LogTagUpsertBulk) UpdateValue() *LogTagUpsertBulk {
	return u.Update(func(s *LogTagUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *LogTagUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LogTagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LogTagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LogTagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
