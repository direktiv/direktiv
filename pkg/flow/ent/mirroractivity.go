// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/pkg/flow/ent/mirror"
	"github.com/direktiv/direktiv/pkg/flow/ent/mirroractivity"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/google/uuid"
)

// MirrorActivity is the model entity for the MirrorActivity schema.
type MirrorActivity struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// Controller holds the value of the "controller" field.
	Controller string `json:"controller,omitempty"`
	// Deadline holds the value of the "deadline" field.
	Deadline time.Time `json:"deadline,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MirrorActivityQuery when eager-loading is set.
	Edges                       MirrorActivityEdges `json:"edges"`
	mirror_activities           *uuid.UUID
	namespace_mirror_activities *uuid.UUID
}

// MirrorActivityEdges holds the relations/edges for other nodes in the graph.
type MirrorActivityEdges struct {
	// Namespace holds the value of the namespace edge.
	Namespace *Namespace `json:"namespace,omitempty"`
	// Mirror holds the value of the mirror edge.
	Mirror *Mirror `json:"mirror,omitempty"`
	// Logs holds the value of the logs edge.
	Logs []*LogMsg `json:"logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// NamespaceOrErr returns the Namespace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MirrorActivityEdges) NamespaceOrErr() (*Namespace, error) {
	if e.loadedTypes[0] {
		if e.Namespace == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: namespace.Label}
		}
		return e.Namespace, nil
	}
	return nil, &NotLoadedError{edge: "namespace"}
}

// MirrorOrErr returns the Mirror value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MirrorActivityEdges) MirrorOrErr() (*Mirror, error) {
	if e.loadedTypes[1] {
		if e.Mirror == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: mirror.Label}
		}
		return e.Mirror, nil
	}
	return nil, &NotLoadedError{edge: "mirror"}
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e MirrorActivityEdges) LogsOrErr() ([]*LogMsg, error) {
	if e.loadedTypes[2] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MirrorActivity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mirroractivity.FieldType, mirroractivity.FieldStatus, mirroractivity.FieldController:
			values[i] = new(sql.NullString)
		case mirroractivity.FieldCreatedAt, mirroractivity.FieldUpdatedAt, mirroractivity.FieldEndAt, mirroractivity.FieldDeadline:
			values[i] = new(sql.NullTime)
		case mirroractivity.FieldID:
			values[i] = new(uuid.UUID)
		case mirroractivity.ForeignKeys[0]: // mirror_activities
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case mirroractivity.ForeignKeys[1]: // namespace_mirror_activities
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type MirrorActivity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MirrorActivity fields.
func (ma *MirrorActivity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mirroractivity.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ma.ID = *value
			}
		case mirroractivity.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ma.Type = value.String
			}
		case mirroractivity.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ma.Status = value.String
			}
		case mirroractivity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ma.CreatedAt = value.Time
			}
		case mirroractivity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ma.UpdatedAt = value.Time
			}
		case mirroractivity.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				ma.EndAt = value.Time
			}
		case mirroractivity.FieldController:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field controller", values[i])
			} else if value.Valid {
				ma.Controller = value.String
			}
		case mirroractivity.FieldDeadline:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deadline", values[i])
			} else if value.Valid {
				ma.Deadline = value.Time
			}
		case mirroractivity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field mirror_activities", values[i])
			} else if value.Valid {
				ma.mirror_activities = new(uuid.UUID)
				*ma.mirror_activities = *value.S.(*uuid.UUID)
			}
		case mirroractivity.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field namespace_mirror_activities", values[i])
			} else if value.Valid {
				ma.namespace_mirror_activities = new(uuid.UUID)
				*ma.namespace_mirror_activities = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryNamespace queries the "namespace" edge of the MirrorActivity entity.
func (ma *MirrorActivity) QueryNamespace() *NamespaceQuery {
	return (&MirrorActivityClient{config: ma.config}).QueryNamespace(ma)
}

// QueryMirror queries the "mirror" edge of the MirrorActivity entity.
func (ma *MirrorActivity) QueryMirror() *MirrorQuery {
	return (&MirrorActivityClient{config: ma.config}).QueryMirror(ma)
}

// QueryLogs queries the "logs" edge of the MirrorActivity entity.
func (ma *MirrorActivity) QueryLogs() *LogMsgQuery {
	return (&MirrorActivityClient{config: ma.config}).QueryLogs(ma)
}

// Update returns a builder for updating this MirrorActivity.
// Note that you need to call MirrorActivity.Unwrap() before calling this method if this MirrorActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (ma *MirrorActivity) Update() *MirrorActivityUpdateOne {
	return (&MirrorActivityClient{config: ma.config}).UpdateOne(ma)
}

// Unwrap unwraps the MirrorActivity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ma *MirrorActivity) Unwrap() *MirrorActivity {
	_tx, ok := ma.config.driver.(*txDriver)
	if !ok {
		panic("ent: MirrorActivity is not a transactional entity")
	}
	ma.config.driver = _tx.drv
	return ma
}

// String implements the fmt.Stringer.
func (ma *MirrorActivity) String() string {
	var builder strings.Builder
	builder.WriteString("MirrorActivity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ma.ID))
	builder.WriteString("type=")
	builder.WriteString(ma.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ma.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ma.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ma.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(ma.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("controller=")
	builder.WriteString(ma.Controller)
	builder.WriteString(", ")
	builder.WriteString("deadline=")
	builder.WriteString(ma.Deadline.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MirrorActivities is a parsable slice of MirrorActivity.
type MirrorActivities []*MirrorActivity

func (ma MirrorActivities) config(cfg config) {
	for _i := range ma {
		ma[_i].config = cfg
	}
}
