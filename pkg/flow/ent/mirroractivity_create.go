// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/logmsg"
	"github.com/direktiv/direktiv/pkg/flow/ent/mirror"
	"github.com/direktiv/direktiv/pkg/flow/ent/mirroractivity"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/google/uuid"
)

// MirrorActivityCreate is the builder for creating a MirrorActivity entity.
type MirrorActivityCreate struct {
	config
	mutation *MirrorActivityMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (mac *MirrorActivityCreate) SetType(s string) *MirrorActivityCreate {
	mac.mutation.SetType(s)
	return mac
}

// SetStatus sets the "status" field.
func (mac *MirrorActivityCreate) SetStatus(s string) *MirrorActivityCreate {
	mac.mutation.SetStatus(s)
	return mac
}

// SetCreatedAt sets the "created_at" field.
func (mac *MirrorActivityCreate) SetCreatedAt(t time.Time) *MirrorActivityCreate {
	mac.mutation.SetCreatedAt(t)
	return mac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mac *MirrorActivityCreate) SetNillableCreatedAt(t *time.Time) *MirrorActivityCreate {
	if t != nil {
		mac.SetCreatedAt(*t)
	}
	return mac
}

// SetUpdatedAt sets the "updated_at" field.
func (mac *MirrorActivityCreate) SetUpdatedAt(t time.Time) *MirrorActivityCreate {
	mac.mutation.SetUpdatedAt(t)
	return mac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mac *MirrorActivityCreate) SetNillableUpdatedAt(t *time.Time) *MirrorActivityCreate {
	if t != nil {
		mac.SetUpdatedAt(*t)
	}
	return mac
}

// SetEndAt sets the "end_at" field.
func (mac *MirrorActivityCreate) SetEndAt(t time.Time) *MirrorActivityCreate {
	mac.mutation.SetEndAt(t)
	return mac
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (mac *MirrorActivityCreate) SetNillableEndAt(t *time.Time) *MirrorActivityCreate {
	if t != nil {
		mac.SetEndAt(*t)
	}
	return mac
}

// SetController sets the "controller" field.
func (mac *MirrorActivityCreate) SetController(s string) *MirrorActivityCreate {
	mac.mutation.SetController(s)
	return mac
}

// SetNillableController sets the "controller" field if the given value is not nil.
func (mac *MirrorActivityCreate) SetNillableController(s *string) *MirrorActivityCreate {
	if s != nil {
		mac.SetController(*s)
	}
	return mac
}

// SetDeadline sets the "deadline" field.
func (mac *MirrorActivityCreate) SetDeadline(t time.Time) *MirrorActivityCreate {
	mac.mutation.SetDeadline(t)
	return mac
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (mac *MirrorActivityCreate) SetNillableDeadline(t *time.Time) *MirrorActivityCreate {
	if t != nil {
		mac.SetDeadline(*t)
	}
	return mac
}

// SetID sets the "id" field.
func (mac *MirrorActivityCreate) SetID(u uuid.UUID) *MirrorActivityCreate {
	mac.mutation.SetID(u)
	return mac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mac *MirrorActivityCreate) SetNillableID(u *uuid.UUID) *MirrorActivityCreate {
	if u != nil {
		mac.SetID(*u)
	}
	return mac
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by ID.
func (mac *MirrorActivityCreate) SetNamespaceID(id uuid.UUID) *MirrorActivityCreate {
	mac.mutation.SetNamespaceID(id)
	return mac
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (mac *MirrorActivityCreate) SetNamespace(n *Namespace) *MirrorActivityCreate {
	return mac.SetNamespaceID(n.ID)
}

// SetMirrorID sets the "mirror" edge to the Mirror entity by ID.
func (mac *MirrorActivityCreate) SetMirrorID(id uuid.UUID) *MirrorActivityCreate {
	mac.mutation.SetMirrorID(id)
	return mac
}

// SetNillableMirrorID sets the "mirror" edge to the Mirror entity by ID if the given value is not nil.
func (mac *MirrorActivityCreate) SetNillableMirrorID(id *uuid.UUID) *MirrorActivityCreate {
	if id != nil {
		mac = mac.SetMirrorID(*id)
	}
	return mac
}

// SetMirror sets the "mirror" edge to the Mirror entity.
func (mac *MirrorActivityCreate) SetMirror(m *Mirror) *MirrorActivityCreate {
	return mac.SetMirrorID(m.ID)
}

// AddLogIDs adds the "logs" edge to the LogMsg entity by IDs.
func (mac *MirrorActivityCreate) AddLogIDs(ids ...uuid.UUID) *MirrorActivityCreate {
	mac.mutation.AddLogIDs(ids...)
	return mac
}

// AddLogs adds the "logs" edges to the LogMsg entity.
func (mac *MirrorActivityCreate) AddLogs(l ...*LogMsg) *MirrorActivityCreate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return mac.AddLogIDs(ids...)
}

// Mutation returns the MirrorActivityMutation object of the builder.
func (mac *MirrorActivityCreate) Mutation() *MirrorActivityMutation {
	return mac.mutation
}

// Save creates the MirrorActivity in the database.
func (mac *MirrorActivityCreate) Save(ctx context.Context) (*MirrorActivity, error) {
	var (
		err  error
		node *MirrorActivity
	)
	mac.defaults()
	if len(mac.hooks) == 0 {
		if err = mac.check(); err != nil {
			return nil, err
		}
		node, err = mac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MirrorActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mac.check(); err != nil {
				return nil, err
			}
			mac.mutation = mutation
			if node, err = mac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mac.hooks) - 1; i >= 0; i-- {
			if mac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MirrorActivity)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MirrorActivityMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mac *MirrorActivityCreate) SaveX(ctx context.Context) *MirrorActivity {
	v, err := mac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mac *MirrorActivityCreate) Exec(ctx context.Context) error {
	_, err := mac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mac *MirrorActivityCreate) ExecX(ctx context.Context) {
	if err := mac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mac *MirrorActivityCreate) defaults() {
	if _, ok := mac.mutation.CreatedAt(); !ok {
		v := mirroractivity.DefaultCreatedAt()
		mac.mutation.SetCreatedAt(v)
	}
	if _, ok := mac.mutation.UpdatedAt(); !ok {
		v := mirroractivity.DefaultUpdatedAt()
		mac.mutation.SetUpdatedAt(v)
	}
	if _, ok := mac.mutation.ID(); !ok {
		v := mirroractivity.DefaultID()
		mac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mac *MirrorActivityCreate) check() error {
	if _, ok := mac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "MirrorActivity.type"`)}
	}
	if _, ok := mac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MirrorActivity.status"`)}
	}
	if _, ok := mac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MirrorActivity.created_at"`)}
	}
	if _, ok := mac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MirrorActivity.updated_at"`)}
	}
	if _, ok := mac.mutation.NamespaceID(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required edge "MirrorActivity.namespace"`)}
	}
	return nil
}

func (mac *MirrorActivityCreate) sqlSave(ctx context.Context) (*MirrorActivity, error) {
	_node, _spec := mac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mac *MirrorActivityCreate) createSpec() (*MirrorActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &MirrorActivity{config: mac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mirroractivity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mirroractivity.FieldID,
			},
		}
	)
	if id, ok := mac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mac.mutation.GetType(); ok {
		_spec.SetField(mirroractivity.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := mac.mutation.Status(); ok {
		_spec.SetField(mirroractivity.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := mac.mutation.CreatedAt(); ok {
		_spec.SetField(mirroractivity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mac.mutation.UpdatedAt(); ok {
		_spec.SetField(mirroractivity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mac.mutation.EndAt(); ok {
		_spec.SetField(mirroractivity.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if value, ok := mac.mutation.Controller(); ok {
		_spec.SetField(mirroractivity.FieldController, field.TypeString, value)
		_node.Controller = value
	}
	if value, ok := mac.mutation.Deadline(); ok {
		_spec.SetField(mirroractivity.FieldDeadline, field.TypeTime, value)
		_node.Deadline = value
	}
	if nodes := mac.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mirroractivity.NamespaceTable,
			Columns: []string{mirroractivity.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.namespace_mirror_activities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mac.mutation.MirrorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mirroractivity.MirrorTable,
			Columns: []string{mirroractivity.MirrorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mirror_activities = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mac.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mirroractivity.LogsTable,
			Columns: []string{mirroractivity.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: logmsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MirrorActivityCreateBulk is the builder for creating many MirrorActivity entities in bulk.
type MirrorActivityCreateBulk struct {
	config
	builders []*MirrorActivityCreate
}

// Save creates the MirrorActivity entities in the database.
func (macb *MirrorActivityCreateBulk) Save(ctx context.Context) ([]*MirrorActivity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(macb.builders))
	nodes := make([]*MirrorActivity, len(macb.builders))
	mutators := make([]Mutator, len(macb.builders))
	for i := range macb.builders {
		func(i int, root context.Context) {
			builder := macb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MirrorActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, macb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, macb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, macb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (macb *MirrorActivityCreateBulk) SaveX(ctx context.Context) []*MirrorActivity {
	v, err := macb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macb *MirrorActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := macb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macb *MirrorActivityCreateBulk) ExecX(ctx context.Context) {
	if err := macb.Exec(ctx); err != nil {
		panic(err)
	}
}
