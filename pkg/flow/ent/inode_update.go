// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/flow/ent/annotation"
	"github.com/direktiv/direktiv/pkg/flow/ent/inode"
	"github.com/direktiv/direktiv/pkg/flow/ent/mirror"
	"github.com/direktiv/direktiv/pkg/flow/ent/namespace"
	"github.com/direktiv/direktiv/pkg/flow/ent/predicate"
	"github.com/direktiv/direktiv/pkg/flow/ent/workflow"
	"github.com/google/uuid"
)

// InodeUpdate is the builder for updating Inode entities.
type InodeUpdate struct {
	config
	hooks     []Hook
	mutation  *InodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InodeUpdate builder.
func (iu *InodeUpdate) Where(ps ...predicate.Inode) *InodeUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InodeUpdate) SetUpdatedAt(t time.Time) *InodeUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetName sets the "name" field.
func (iu *InodeUpdate) SetName(s string) *InodeUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *InodeUpdate) SetNillableName(s *string) *InodeUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// ClearName clears the value of the "name" field.
func (iu *InodeUpdate) ClearName() *InodeUpdate {
	iu.mutation.ClearName()
	return iu
}

// SetAttributes sets the "attributes" field.
func (iu *InodeUpdate) SetAttributes(s []string) *InodeUpdate {
	iu.mutation.SetAttributes(s)
	return iu
}

// AppendAttributes appends s to the "attributes" field.
func (iu *InodeUpdate) AppendAttributes(s []string) *InodeUpdate {
	iu.mutation.AppendAttributes(s)
	return iu
}

// ClearAttributes clears the value of the "attributes" field.
func (iu *InodeUpdate) ClearAttributes() *InodeUpdate {
	iu.mutation.ClearAttributes()
	return iu
}

// SetExtendedType sets the "extended_type" field.
func (iu *InodeUpdate) SetExtendedType(s string) *InodeUpdate {
	iu.mutation.SetExtendedType(s)
	return iu
}

// SetNillableExtendedType sets the "extended_type" field if the given value is not nil.
func (iu *InodeUpdate) SetNillableExtendedType(s *string) *InodeUpdate {
	if s != nil {
		iu.SetExtendedType(*s)
	}
	return iu
}

// ClearExtendedType clears the value of the "extended_type" field.
func (iu *InodeUpdate) ClearExtendedType() *InodeUpdate {
	iu.mutation.ClearExtendedType()
	return iu
}

// SetReadOnly sets the "readOnly" field.
func (iu *InodeUpdate) SetReadOnly(b bool) *InodeUpdate {
	iu.mutation.SetReadOnly(b)
	return iu
}

// SetNillableReadOnly sets the "readOnly" field if the given value is not nil.
func (iu *InodeUpdate) SetNillableReadOnly(b *bool) *InodeUpdate {
	if b != nil {
		iu.SetReadOnly(*b)
	}
	return iu
}

// ClearReadOnly clears the value of the "readOnly" field.
func (iu *InodeUpdate) ClearReadOnly() *InodeUpdate {
	iu.mutation.ClearReadOnly()
	return iu
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by ID.
func (iu *InodeUpdate) SetNamespaceID(id uuid.UUID) *InodeUpdate {
	iu.mutation.SetNamespaceID(id)
	return iu
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (iu *InodeUpdate) SetNamespace(n *Namespace) *InodeUpdate {
	return iu.SetNamespaceID(n.ID)
}

// AddChildIDs adds the "children" edge to the Inode entity by IDs.
func (iu *InodeUpdate) AddChildIDs(ids ...uuid.UUID) *InodeUpdate {
	iu.mutation.AddChildIDs(ids...)
	return iu
}

// AddChildren adds the "children" edges to the Inode entity.
func (iu *InodeUpdate) AddChildren(i ...*Inode) *InodeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the Inode entity by ID.
func (iu *InodeUpdate) SetParentID(id uuid.UUID) *InodeUpdate {
	iu.mutation.SetParentID(id)
	return iu
}

// SetNillableParentID sets the "parent" edge to the Inode entity by ID if the given value is not nil.
func (iu *InodeUpdate) SetNillableParentID(id *uuid.UUID) *InodeUpdate {
	if id != nil {
		iu = iu.SetParentID(*id)
	}
	return iu
}

// SetParent sets the "parent" edge to the Inode entity.
func (iu *InodeUpdate) SetParent(i *Inode) *InodeUpdate {
	return iu.SetParentID(i.ID)
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (iu *InodeUpdate) SetWorkflowID(id uuid.UUID) *InodeUpdate {
	iu.mutation.SetWorkflowID(id)
	return iu
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (iu *InodeUpdate) SetNillableWorkflowID(id *uuid.UUID) *InodeUpdate {
	if id != nil {
		iu = iu.SetWorkflowID(*id)
	}
	return iu
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (iu *InodeUpdate) SetWorkflow(w *Workflow) *InodeUpdate {
	return iu.SetWorkflowID(w.ID)
}

// SetMirrorID sets the "mirror" edge to the Mirror entity by ID.
func (iu *InodeUpdate) SetMirrorID(id uuid.UUID) *InodeUpdate {
	iu.mutation.SetMirrorID(id)
	return iu
}

// SetNillableMirrorID sets the "mirror" edge to the Mirror entity by ID if the given value is not nil.
func (iu *InodeUpdate) SetNillableMirrorID(id *uuid.UUID) *InodeUpdate {
	if id != nil {
		iu = iu.SetMirrorID(*id)
	}
	return iu
}

// SetMirror sets the "mirror" edge to the Mirror entity.
func (iu *InodeUpdate) SetMirror(m *Mirror) *InodeUpdate {
	return iu.SetMirrorID(m.ID)
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (iu *InodeUpdate) AddAnnotationIDs(ids ...uuid.UUID) *InodeUpdate {
	iu.mutation.AddAnnotationIDs(ids...)
	return iu
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (iu *InodeUpdate) AddAnnotations(a ...*Annotation) *InodeUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iu.AddAnnotationIDs(ids...)
}

// Mutation returns the InodeMutation object of the builder.
func (iu *InodeUpdate) Mutation() *InodeMutation {
	return iu.mutation
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (iu *InodeUpdate) ClearNamespace() *InodeUpdate {
	iu.mutation.ClearNamespace()
	return iu
}

// ClearChildren clears all "children" edges to the Inode entity.
func (iu *InodeUpdate) ClearChildren() *InodeUpdate {
	iu.mutation.ClearChildren()
	return iu
}

// RemoveChildIDs removes the "children" edge to Inode entities by IDs.
func (iu *InodeUpdate) RemoveChildIDs(ids ...uuid.UUID) *InodeUpdate {
	iu.mutation.RemoveChildIDs(ids...)
	return iu
}

// RemoveChildren removes "children" edges to Inode entities.
func (iu *InodeUpdate) RemoveChildren(i ...*Inode) *InodeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Inode entity.
func (iu *InodeUpdate) ClearParent() *InodeUpdate {
	iu.mutation.ClearParent()
	return iu
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (iu *InodeUpdate) ClearWorkflow() *InodeUpdate {
	iu.mutation.ClearWorkflow()
	return iu
}

// ClearMirror clears the "mirror" edge to the Mirror entity.
func (iu *InodeUpdate) ClearMirror() *InodeUpdate {
	iu.mutation.ClearMirror()
	return iu
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (iu *InodeUpdate) ClearAnnotations() *InodeUpdate {
	iu.mutation.ClearAnnotations()
	return iu
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (iu *InodeUpdate) RemoveAnnotationIDs(ids ...uuid.UUID) *InodeUpdate {
	iu.mutation.RemoveAnnotationIDs(ids...)
	return iu
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (iu *InodeUpdate) RemoveAnnotations(a ...*Annotation) *InodeUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iu.RemoveAnnotationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iu.defaults()
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InodeUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InodeUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InodeUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InodeUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := inode.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InodeUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := inode.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Inode.name": %w`, err)}
		}
	}
	if _, ok := iu.mutation.NamespaceID(); iu.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Inode.namespace"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InodeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InodeUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inode.Table,
			Columns: inode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: inode.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(inode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(inode.FieldName, field.TypeString, value)
	}
	if iu.mutation.NameCleared() {
		_spec.ClearField(inode.FieldName, field.TypeString)
	}
	if value, ok := iu.mutation.Attributes(); ok {
		_spec.SetField(inode.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedAttributes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, inode.FieldAttributes, value)
		})
	}
	if iu.mutation.AttributesCleared() {
		_spec.ClearField(inode.FieldAttributes, field.TypeJSON)
	}
	if value, ok := iu.mutation.ExtendedType(); ok {
		_spec.SetField(inode.FieldExtendedType, field.TypeString, value)
	}
	if iu.mutation.ExtendedTypeCleared() {
		_spec.ClearField(inode.FieldExtendedType, field.TypeString)
	}
	if value, ok := iu.mutation.ReadOnly(); ok {
		_spec.SetField(inode.FieldReadOnly, field.TypeBool, value)
	}
	if iu.mutation.ReadOnlyCleared() {
		_spec.ClearField(inode.FieldReadOnly, field.TypeBool)
	}
	if iu.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inode.NamespaceTable,
			Columns: []string{inode.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inode.NamespaceTable,
			Columns: []string{inode.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.ChildrenTable,
			Columns: []string{inode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !iu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.ChildrenTable,
			Columns: []string{inode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.ChildrenTable,
			Columns: []string{inode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inode.ParentTable,
			Columns: []string{inode.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inode.ParentTable,
			Columns: []string{inode.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   inode.WorkflowTable,
			Columns: []string{inode.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   inode.WorkflowTable,
			Columns: []string{inode.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.MirrorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   inode.MirrorTable,
			Columns: []string{inode.MirrorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.MirrorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   inode.MirrorTable,
			Columns: []string{inode.MirrorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.AnnotationsTable,
			Columns: []string{inode.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !iu.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.AnnotationsTable,
			Columns: []string{inode.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.AnnotationsTable,
			Columns: []string{inode.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// InodeUpdateOne is the builder for updating a single Inode entity.
type InodeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InodeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InodeUpdateOne) SetUpdatedAt(t time.Time) *InodeUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetName sets the "name" field.
func (iuo *InodeUpdateOne) SetName(s string) *InodeUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *InodeUpdateOne) SetNillableName(s *string) *InodeUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// ClearName clears the value of the "name" field.
func (iuo *InodeUpdateOne) ClearName() *InodeUpdateOne {
	iuo.mutation.ClearName()
	return iuo
}

// SetAttributes sets the "attributes" field.
func (iuo *InodeUpdateOne) SetAttributes(s []string) *InodeUpdateOne {
	iuo.mutation.SetAttributes(s)
	return iuo
}

// AppendAttributes appends s to the "attributes" field.
func (iuo *InodeUpdateOne) AppendAttributes(s []string) *InodeUpdateOne {
	iuo.mutation.AppendAttributes(s)
	return iuo
}

// ClearAttributes clears the value of the "attributes" field.
func (iuo *InodeUpdateOne) ClearAttributes() *InodeUpdateOne {
	iuo.mutation.ClearAttributes()
	return iuo
}

// SetExtendedType sets the "extended_type" field.
func (iuo *InodeUpdateOne) SetExtendedType(s string) *InodeUpdateOne {
	iuo.mutation.SetExtendedType(s)
	return iuo
}

// SetNillableExtendedType sets the "extended_type" field if the given value is not nil.
func (iuo *InodeUpdateOne) SetNillableExtendedType(s *string) *InodeUpdateOne {
	if s != nil {
		iuo.SetExtendedType(*s)
	}
	return iuo
}

// ClearExtendedType clears the value of the "extended_type" field.
func (iuo *InodeUpdateOne) ClearExtendedType() *InodeUpdateOne {
	iuo.mutation.ClearExtendedType()
	return iuo
}

// SetReadOnly sets the "readOnly" field.
func (iuo *InodeUpdateOne) SetReadOnly(b bool) *InodeUpdateOne {
	iuo.mutation.SetReadOnly(b)
	return iuo
}

// SetNillableReadOnly sets the "readOnly" field if the given value is not nil.
func (iuo *InodeUpdateOne) SetNillableReadOnly(b *bool) *InodeUpdateOne {
	if b != nil {
		iuo.SetReadOnly(*b)
	}
	return iuo
}

// ClearReadOnly clears the value of the "readOnly" field.
func (iuo *InodeUpdateOne) ClearReadOnly() *InodeUpdateOne {
	iuo.mutation.ClearReadOnly()
	return iuo
}

// SetNamespaceID sets the "namespace" edge to the Namespace entity by ID.
func (iuo *InodeUpdateOne) SetNamespaceID(id uuid.UUID) *InodeUpdateOne {
	iuo.mutation.SetNamespaceID(id)
	return iuo
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (iuo *InodeUpdateOne) SetNamespace(n *Namespace) *InodeUpdateOne {
	return iuo.SetNamespaceID(n.ID)
}

// AddChildIDs adds the "children" edge to the Inode entity by IDs.
func (iuo *InodeUpdateOne) AddChildIDs(ids ...uuid.UUID) *InodeUpdateOne {
	iuo.mutation.AddChildIDs(ids...)
	return iuo
}

// AddChildren adds the "children" edges to the Inode entity.
func (iuo *InodeUpdateOne) AddChildren(i ...*Inode) *InodeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the Inode entity by ID.
func (iuo *InodeUpdateOne) SetParentID(id uuid.UUID) *InodeUpdateOne {
	iuo.mutation.SetParentID(id)
	return iuo
}

// SetNillableParentID sets the "parent" edge to the Inode entity by ID if the given value is not nil.
func (iuo *InodeUpdateOne) SetNillableParentID(id *uuid.UUID) *InodeUpdateOne {
	if id != nil {
		iuo = iuo.SetParentID(*id)
	}
	return iuo
}

// SetParent sets the "parent" edge to the Inode entity.
func (iuo *InodeUpdateOne) SetParent(i *Inode) *InodeUpdateOne {
	return iuo.SetParentID(i.ID)
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (iuo *InodeUpdateOne) SetWorkflowID(id uuid.UUID) *InodeUpdateOne {
	iuo.mutation.SetWorkflowID(id)
	return iuo
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (iuo *InodeUpdateOne) SetNillableWorkflowID(id *uuid.UUID) *InodeUpdateOne {
	if id != nil {
		iuo = iuo.SetWorkflowID(*id)
	}
	return iuo
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (iuo *InodeUpdateOne) SetWorkflow(w *Workflow) *InodeUpdateOne {
	return iuo.SetWorkflowID(w.ID)
}

// SetMirrorID sets the "mirror" edge to the Mirror entity by ID.
func (iuo *InodeUpdateOne) SetMirrorID(id uuid.UUID) *InodeUpdateOne {
	iuo.mutation.SetMirrorID(id)
	return iuo
}

// SetNillableMirrorID sets the "mirror" edge to the Mirror entity by ID if the given value is not nil.
func (iuo *InodeUpdateOne) SetNillableMirrorID(id *uuid.UUID) *InodeUpdateOne {
	if id != nil {
		iuo = iuo.SetMirrorID(*id)
	}
	return iuo
}

// SetMirror sets the "mirror" edge to the Mirror entity.
func (iuo *InodeUpdateOne) SetMirror(m *Mirror) *InodeUpdateOne {
	return iuo.SetMirrorID(m.ID)
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (iuo *InodeUpdateOne) AddAnnotationIDs(ids ...uuid.UUID) *InodeUpdateOne {
	iuo.mutation.AddAnnotationIDs(ids...)
	return iuo
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (iuo *InodeUpdateOne) AddAnnotations(a ...*Annotation) *InodeUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuo.AddAnnotationIDs(ids...)
}

// Mutation returns the InodeMutation object of the builder.
func (iuo *InodeUpdateOne) Mutation() *InodeMutation {
	return iuo.mutation
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (iuo *InodeUpdateOne) ClearNamespace() *InodeUpdateOne {
	iuo.mutation.ClearNamespace()
	return iuo
}

// ClearChildren clears all "children" edges to the Inode entity.
func (iuo *InodeUpdateOne) ClearChildren() *InodeUpdateOne {
	iuo.mutation.ClearChildren()
	return iuo
}

// RemoveChildIDs removes the "children" edge to Inode entities by IDs.
func (iuo *InodeUpdateOne) RemoveChildIDs(ids ...uuid.UUID) *InodeUpdateOne {
	iuo.mutation.RemoveChildIDs(ids...)
	return iuo
}

// RemoveChildren removes "children" edges to Inode entities.
func (iuo *InodeUpdateOne) RemoveChildren(i ...*Inode) *InodeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Inode entity.
func (iuo *InodeUpdateOne) ClearParent() *InodeUpdateOne {
	iuo.mutation.ClearParent()
	return iuo
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (iuo *InodeUpdateOne) ClearWorkflow() *InodeUpdateOne {
	iuo.mutation.ClearWorkflow()
	return iuo
}

// ClearMirror clears the "mirror" edge to the Mirror entity.
func (iuo *InodeUpdateOne) ClearMirror() *InodeUpdateOne {
	iuo.mutation.ClearMirror()
	return iuo
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (iuo *InodeUpdateOne) ClearAnnotations() *InodeUpdateOne {
	iuo.mutation.ClearAnnotations()
	return iuo
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (iuo *InodeUpdateOne) RemoveAnnotationIDs(ids ...uuid.UUID) *InodeUpdateOne {
	iuo.mutation.RemoveAnnotationIDs(ids...)
	return iuo
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (iuo *InodeUpdateOne) RemoveAnnotations(a ...*Annotation) *InodeUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return iuo.RemoveAnnotationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InodeUpdateOne) Select(field string, fields ...string) *InodeUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inode entity.
func (iuo *InodeUpdateOne) Save(ctx context.Context) (*Inode, error) {
	var (
		err  error
		node *Inode
	)
	iuo.defaults()
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Inode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InodeUpdateOne) SaveX(ctx context.Context) *Inode {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InodeUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InodeUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InodeUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := inode.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InodeUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := inode.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Inode.name": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.NamespaceID(); iuo.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Inode.namespace"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InodeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InodeUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InodeUpdateOne) sqlSave(ctx context.Context) (_node *Inode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inode.Table,
			Columns: inode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: inode.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Inode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inode.FieldID)
		for _, f := range fields {
			if !inode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(inode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(inode.FieldName, field.TypeString, value)
	}
	if iuo.mutation.NameCleared() {
		_spec.ClearField(inode.FieldName, field.TypeString)
	}
	if value, ok := iuo.mutation.Attributes(); ok {
		_spec.SetField(inode.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedAttributes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, inode.FieldAttributes, value)
		})
	}
	if iuo.mutation.AttributesCleared() {
		_spec.ClearField(inode.FieldAttributes, field.TypeJSON)
	}
	if value, ok := iuo.mutation.ExtendedType(); ok {
		_spec.SetField(inode.FieldExtendedType, field.TypeString, value)
	}
	if iuo.mutation.ExtendedTypeCleared() {
		_spec.ClearField(inode.FieldExtendedType, field.TypeString)
	}
	if value, ok := iuo.mutation.ReadOnly(); ok {
		_spec.SetField(inode.FieldReadOnly, field.TypeBool, value)
	}
	if iuo.mutation.ReadOnlyCleared() {
		_spec.ClearField(inode.FieldReadOnly, field.TypeBool)
	}
	if iuo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inode.NamespaceTable,
			Columns: []string{inode.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inode.NamespaceTable,
			Columns: []string{inode.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.ChildrenTable,
			Columns: []string{inode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !iuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.ChildrenTable,
			Columns: []string{inode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.ChildrenTable,
			Columns: []string{inode.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inode.ParentTable,
			Columns: []string{inode.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inode.ParentTable,
			Columns: []string{inode.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: inode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   inode.WorkflowTable,
			Columns: []string{inode.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   inode.WorkflowTable,
			Columns: []string{inode.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.MirrorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   inode.MirrorTable,
			Columns: []string{inode.MirrorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.MirrorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   inode.MirrorTable,
			Columns: []string{inode.MirrorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: mirror.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.AnnotationsTable,
			Columns: []string{inode.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !iuo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.AnnotationsTable,
			Columns: []string{inode.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inode.AnnotationsTable,
			Columns: []string{inode.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Inode{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
