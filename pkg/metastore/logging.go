package metastore

import (
	"context"
	"time"
)

// LogStore defines a high-level interface for managing logs in the Metastore.
type LogStore interface {
	// Append adds a log entry to the store.
	Append(ctx context.Context, log LogEntry) error
	// Get retrieves logs based on a time range or filter criteria.
	Get(ctx context.Context, options LogQueryOptions) ([]LogEntry, error)
}

// LogEntry represents a single log entry stored in the Metastore.
type LogEntry struct {
	ID        string            // Unique identifier for the log (optional, could be autogenerated).
	Timestamp time.Time         // When the log event occurred.
	Level     string            // Severity level of the log (e.g., INFO, ERROR, DEBUG).
	Message   string            // The main log message.
	Metadata  map[string]string // Additional contextual metadata (e.g., service name, tags).
}

// LogQueryOptions defines filters for querying logs.
type LogQueryOptions struct {
	StartTime time.Time         // Start of the time range for logs.
	EndTime   time.Time         // End of the time range for logs.
	Levels    []string          // Optional filter by log levels (e.g., INFO, ERROR).
	Metadata  map[string]string // Metadata filters (e.g., service name, environment).
	Keywords  []string          // Keywords to search within log messages.
	Limit     int               // Maximum number of logs to retrieve.
}
