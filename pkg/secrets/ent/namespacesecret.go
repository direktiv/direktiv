// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/pkg/secrets/ent/namespacesecret"
)

// NamespaceSecret is the model entity for the NamespaceSecret schema.
type NamespaceSecret struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Ns holds the value of the "ns" field.
	Ns string `json:"ns,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret []byte `json:"secret,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NamespaceSecret) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case namespacesecret.FieldSecret:
			values[i] = new([]byte)
		case namespacesecret.FieldID:
			values[i] = new(sql.NullInt64)
		case namespacesecret.FieldNs, namespacesecret.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NamespaceSecret", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NamespaceSecret fields.
func (ns *NamespaceSecret) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case namespacesecret.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ns.ID = int(value.Int64)
		case namespacesecret.FieldNs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ns", values[i])
			} else if value.Valid {
				ns.Ns = value.String
			}
		case namespacesecret.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ns.Name = value.String
			}
		case namespacesecret.FieldSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				ns.Secret = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NamespaceSecret.
// Note that you need to call NamespaceSecret.Unwrap() before calling this method if this NamespaceSecret
// was returned from a transaction, and the transaction was committed or rolled back.
func (ns *NamespaceSecret) Update() *NamespaceSecretUpdateOne {
	return (&NamespaceSecretClient{config: ns.config}).UpdateOne(ns)
}

// Unwrap unwraps the NamespaceSecret entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ns *NamespaceSecret) Unwrap() *NamespaceSecret {
	_tx, ok := ns.config.driver.(*txDriver)
	if !ok {
		panic("ent: NamespaceSecret is not a transactional entity")
	}
	ns.config.driver = _tx.drv
	return ns
}

// String implements the fmt.Stringer.
func (ns *NamespaceSecret) String() string {
	var builder strings.Builder
	builder.WriteString("NamespaceSecret(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ns.ID))
	builder.WriteString("ns=")
	builder.WriteString(ns.Ns)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ns.Name)
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(fmt.Sprintf("%v", ns.Secret))
	builder.WriteByte(')')
	return builder.String()
}

// NamespaceSecrets is a parsable slice of NamespaceSecret.
type NamespaceSecrets []*NamespaceSecret

func (ns NamespaceSecrets) config(cfg config) {
	for _i := range ns {
		ns[_i].config = cfg
	}
}
