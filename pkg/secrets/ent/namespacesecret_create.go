// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/direktiv/direktiv/pkg/secrets/ent/namespacesecret"
)

// NamespaceSecretCreate is the builder for creating a NamespaceSecret entity.
type NamespaceSecretCreate struct {
	config
	mutation *NamespaceSecretMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNs sets the "ns" field.
func (nsc *NamespaceSecretCreate) SetNs(s string) *NamespaceSecretCreate {
	nsc.mutation.SetNs(s)
	return nsc
}

// SetName sets the "name" field.
func (nsc *NamespaceSecretCreate) SetName(s string) *NamespaceSecretCreate {
	nsc.mutation.SetName(s)
	return nsc
}

// SetSecret sets the "secret" field.
func (nsc *NamespaceSecretCreate) SetSecret(b []byte) *NamespaceSecretCreate {
	nsc.mutation.SetSecret(b)
	return nsc
}

// Mutation returns the NamespaceSecretMutation object of the builder.
func (nsc *NamespaceSecretCreate) Mutation() *NamespaceSecretMutation {
	return nsc.mutation
}

// Save creates the NamespaceSecret in the database.
func (nsc *NamespaceSecretCreate) Save(ctx context.Context) (*NamespaceSecret, error) {
	var (
		err  error
		node *NamespaceSecret
	)
	if len(nsc.hooks) == 0 {
		if err = nsc.check(); err != nil {
			return nil, err
		}
		node, err = nsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamespaceSecretMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nsc.check(); err != nil {
				return nil, err
			}
			nsc.mutation = mutation
			if node, err = nsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nsc.hooks) - 1; i >= 0; i-- {
			if nsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NamespaceSecret)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NamespaceSecretMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nsc *NamespaceSecretCreate) SaveX(ctx context.Context) *NamespaceSecret {
	v, err := nsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nsc *NamespaceSecretCreate) Exec(ctx context.Context) error {
	_, err := nsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsc *NamespaceSecretCreate) ExecX(ctx context.Context) {
	if err := nsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsc *NamespaceSecretCreate) check() error {
	if _, ok := nsc.mutation.Ns(); !ok {
		return &ValidationError{Name: "ns", err: errors.New(`ent: missing required field "NamespaceSecret.ns"`)}
	}
	if _, ok := nsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "NamespaceSecret.name"`)}
	}
	if _, ok := nsc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`ent: missing required field "NamespaceSecret.secret"`)}
	}
	if v, ok := nsc.mutation.Secret(); ok {
		if err := namespacesecret.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`ent: validator failed for field "NamespaceSecret.secret": %w`, err)}
		}
	}
	return nil
}

func (nsc *NamespaceSecretCreate) sqlSave(ctx context.Context) (*NamespaceSecret, error) {
	_node, _spec := nsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nsc *NamespaceSecretCreate) createSpec() (*NamespaceSecret, *sqlgraph.CreateSpec) {
	var (
		_node = &NamespaceSecret{config: nsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: namespacesecret.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: namespacesecret.FieldID,
			},
		}
	)
	_spec.OnConflict = nsc.conflict
	if value, ok := nsc.mutation.Ns(); ok {
		_spec.SetField(namespacesecret.FieldNs, field.TypeString, value)
		_node.Ns = value
	}
	if value, ok := nsc.mutation.Name(); ok {
		_spec.SetField(namespacesecret.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nsc.mutation.Secret(); ok {
		_spec.SetField(namespacesecret.FieldSecret, field.TypeBytes, value)
		_node.Secret = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NamespaceSecret.Create().
//		SetNs(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NamespaceSecretUpsert) {
//			SetNs(v+v).
//		}).
//		Exec(ctx)
func (nsc *NamespaceSecretCreate) OnConflict(opts ...sql.ConflictOption) *NamespaceSecretUpsertOne {
	nsc.conflict = opts
	return &NamespaceSecretUpsertOne{
		create: nsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NamespaceSecret.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nsc *NamespaceSecretCreate) OnConflictColumns(columns ...string) *NamespaceSecretUpsertOne {
	nsc.conflict = append(nsc.conflict, sql.ConflictColumns(columns...))
	return &NamespaceSecretUpsertOne{
		create: nsc,
	}
}

type (
	// NamespaceSecretUpsertOne is the builder for "upsert"-ing
	//  one NamespaceSecret node.
	NamespaceSecretUpsertOne struct {
		create *NamespaceSecretCreate
	}

	// NamespaceSecretUpsert is the "OnConflict" setter.
	NamespaceSecretUpsert struct {
		*sql.UpdateSet
	}
)

// SetNs sets the "ns" field.
func (u *NamespaceSecretUpsert) SetNs(v string) *NamespaceSecretUpsert {
	u.Set(namespacesecret.FieldNs, v)
	return u
}

// UpdateNs sets the "ns" field to the value that was provided on create.
func (u *NamespaceSecretUpsert) UpdateNs() *NamespaceSecretUpsert {
	u.SetExcluded(namespacesecret.FieldNs)
	return u
}

// SetName sets the "name" field.
func (u *NamespaceSecretUpsert) SetName(v string) *NamespaceSecretUpsert {
	u.Set(namespacesecret.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NamespaceSecretUpsert) UpdateName() *NamespaceSecretUpsert {
	u.SetExcluded(namespacesecret.FieldName)
	return u
}

// SetSecret sets the "secret" field.
func (u *NamespaceSecretUpsert) SetSecret(v []byte) *NamespaceSecretUpsert {
	u.Set(namespacesecret.FieldSecret, v)
	return u
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *NamespaceSecretUpsert) UpdateSecret() *NamespaceSecretUpsert {
	u.SetExcluded(namespacesecret.FieldSecret)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.NamespaceSecret.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NamespaceSecretUpsertOne) UpdateNewValues() *NamespaceSecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NamespaceSecret.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NamespaceSecretUpsertOne) Ignore() *NamespaceSecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NamespaceSecretUpsertOne) DoNothing() *NamespaceSecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NamespaceSecretCreate.OnConflict
// documentation for more info.
func (u *NamespaceSecretUpsertOne) Update(set func(*NamespaceSecretUpsert)) *NamespaceSecretUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NamespaceSecretUpsert{UpdateSet: update})
	}))
	return u
}

// SetNs sets the "ns" field.
func (u *NamespaceSecretUpsertOne) SetNs(v string) *NamespaceSecretUpsertOne {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.SetNs(v)
	})
}

// UpdateNs sets the "ns" field to the value that was provided on create.
func (u *NamespaceSecretUpsertOne) UpdateNs() *NamespaceSecretUpsertOne {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.UpdateNs()
	})
}

// SetName sets the "name" field.
func (u *NamespaceSecretUpsertOne) SetName(v string) *NamespaceSecretUpsertOne {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NamespaceSecretUpsertOne) UpdateName() *NamespaceSecretUpsertOne {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.UpdateName()
	})
}

// SetSecret sets the "secret" field.
func (u *NamespaceSecretUpsertOne) SetSecret(v []byte) *NamespaceSecretUpsertOne {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *NamespaceSecretUpsertOne) UpdateSecret() *NamespaceSecretUpsertOne {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.UpdateSecret()
	})
}

// Exec executes the query.
func (u *NamespaceSecretUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NamespaceSecretCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NamespaceSecretUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NamespaceSecretUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NamespaceSecretUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NamespaceSecretCreateBulk is the builder for creating many NamespaceSecret entities in bulk.
type NamespaceSecretCreateBulk struct {
	config
	builders []*NamespaceSecretCreate
	conflict []sql.ConflictOption
}

// Save creates the NamespaceSecret entities in the database.
func (nscb *NamespaceSecretCreateBulk) Save(ctx context.Context) ([]*NamespaceSecret, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nscb.builders))
	nodes := make([]*NamespaceSecret, len(nscb.builders))
	mutators := make([]Mutator, len(nscb.builders))
	for i := range nscb.builders {
		func(i int, root context.Context) {
			builder := nscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NamespaceSecretMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nscb *NamespaceSecretCreateBulk) SaveX(ctx context.Context) []*NamespaceSecret {
	v, err := nscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nscb *NamespaceSecretCreateBulk) Exec(ctx context.Context) error {
	_, err := nscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nscb *NamespaceSecretCreateBulk) ExecX(ctx context.Context) {
	if err := nscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NamespaceSecret.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NamespaceSecretUpsert) {
//			SetNs(v+v).
//		}).
//		Exec(ctx)
func (nscb *NamespaceSecretCreateBulk) OnConflict(opts ...sql.ConflictOption) *NamespaceSecretUpsertBulk {
	nscb.conflict = opts
	return &NamespaceSecretUpsertBulk{
		create: nscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NamespaceSecret.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nscb *NamespaceSecretCreateBulk) OnConflictColumns(columns ...string) *NamespaceSecretUpsertBulk {
	nscb.conflict = append(nscb.conflict, sql.ConflictColumns(columns...))
	return &NamespaceSecretUpsertBulk{
		create: nscb,
	}
}

// NamespaceSecretUpsertBulk is the builder for "upsert"-ing
// a bulk of NamespaceSecret nodes.
type NamespaceSecretUpsertBulk struct {
	create *NamespaceSecretCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NamespaceSecret.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NamespaceSecretUpsertBulk) UpdateNewValues() *NamespaceSecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NamespaceSecret.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NamespaceSecretUpsertBulk) Ignore() *NamespaceSecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NamespaceSecretUpsertBulk) DoNothing() *NamespaceSecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NamespaceSecretCreateBulk.OnConflict
// documentation for more info.
func (u *NamespaceSecretUpsertBulk) Update(set func(*NamespaceSecretUpsert)) *NamespaceSecretUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NamespaceSecretUpsert{UpdateSet: update})
	}))
	return u
}

// SetNs sets the "ns" field.
func (u *NamespaceSecretUpsertBulk) SetNs(v string) *NamespaceSecretUpsertBulk {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.SetNs(v)
	})
}

// UpdateNs sets the "ns" field to the value that was provided on create.
func (u *NamespaceSecretUpsertBulk) UpdateNs() *NamespaceSecretUpsertBulk {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.UpdateNs()
	})
}

// SetName sets the "name" field.
func (u *NamespaceSecretUpsertBulk) SetName(v string) *NamespaceSecretUpsertBulk {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NamespaceSecretUpsertBulk) UpdateName() *NamespaceSecretUpsertBulk {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.UpdateName()
	})
}

// SetSecret sets the "secret" field.
func (u *NamespaceSecretUpsertBulk) SetSecret(v []byte) *NamespaceSecretUpsertBulk {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *NamespaceSecretUpsertBulk) UpdateSecret() *NamespaceSecretUpsertBulk {
	return u.Update(func(s *NamespaceSecretUpsert) {
		s.UpdateSecret()
	})
}

// Exec executes the query.
func (u *NamespaceSecretUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NamespaceSecretCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NamespaceSecretCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NamespaceSecretUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
