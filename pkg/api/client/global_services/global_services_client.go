// Code generated by go-swagger; DO NOT EDIT.

package global_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new global services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for global services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateGlobalService(params *CreateGlobalServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGlobalServiceOK, error)

	DeleteGlobalRevision(params *DeleteGlobalRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGlobalRevisionOK, error)

	DeleteGlobalService(params *DeleteGlobalServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGlobalServiceOK, error)

	GetGlobalService(params *GetGlobalServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGlobalServiceOK, error)

	GetGlobalServiceList(params *GetGlobalServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGlobalServiceListOK, error)

	ListGlobalServiceRevisionPods(params *ListGlobalServiceRevisionPodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGlobalServiceRevisionPodsOK, error)

	UpdateGlobalService(params *UpdateGlobalServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGlobalServiceOK, error)

	UpdateGlobalServiceTraffic(params *UpdateGlobalServiceTrafficParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGlobalServiceTrafficOK, error)

	WatchGlobalServiceRevision(params *WatchGlobalServiceRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WatchGlobalServiceRevisionOK, error)

	WatchGlobalServiceRevisionList(params *WatchGlobalServiceRevisionListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WatchGlobalServiceRevisionListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateGlobalService creates global service

  Creates global scoped knative service.
Service Names are unique on a scope level.
These services can be used as functions in workflows, more about this can be read here:
https://docs.direktiv.io/docs/walkthrough/using-functions.html

*/
func (a *Client) CreateGlobalService(params *CreateGlobalServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGlobalServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGlobalServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGlobalService",
		Method:             "POST",
		PathPattern:        "/api/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateGlobalServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGlobalServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGlobalService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGlobalRevision deletes global service revision

  Delete a global scoped knative service revision.
The target revision generation is the number suffix on a revision.
Example: A revisions named 'global-fast-request-00003' would have the revisionGeneration '00003'.
Note: Revisions with traffic cannot be deleted.

*/
func (a *Client) DeleteGlobalRevision(params *DeleteGlobalRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGlobalRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGlobalRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGlobalRevision",
		Method:             "DELETE",
		PathPattern:        "/api/functions/{serviceName}/revisions/{revisionGeneration}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteGlobalRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGlobalRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGlobalRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGlobalService deletes global service

  Deletes global scoped knative service and all its revisions.

*/
func (a *Client) DeleteGlobalService(params *DeleteGlobalServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGlobalServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGlobalServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGlobalService",
		Method:             "DELETE",
		PathPattern:        "/api/functions/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteGlobalServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGlobalServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGlobalService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGlobalService gets global service details

  Get details of a global scoped knative service.

*/
func (a *Client) GetGlobalService(params *GetGlobalServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGlobalServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGlobalService",
		Method:             "GET",
		PathPattern:        "/api/functions/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGlobalServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGlobalService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGlobalServiceList gets global services list

  Gets a list of global knative services.

*/
func (a *Client) GetGlobalServiceList(params *GetGlobalServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGlobalServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGlobalServiceList",
		Method:             "GET",
		PathPattern:        "/api/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGlobalServiceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGlobalServiceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListGlobalServiceRevisionPods gets global service revision pods list

  List a revisions pods of a global scoped knative service.
The target revision generation is the number suffix on a revision.
Example: A revisions named 'global-fast-request-00003' would have the revisionGeneration '00003' .

*/
func (a *Client) ListGlobalServiceRevisionPods(params *ListGlobalServiceRevisionPodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGlobalServiceRevisionPodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGlobalServiceRevisionPodsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGlobalServiceRevisionPods",
		Method:             "GET",
		PathPattern:        "/api/functions/{serviceName}/revisions/{revisionGeneration}/pods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListGlobalServiceRevisionPodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGlobalServiceRevisionPodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGlobalServiceRevisionPods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGlobalService creates global service revision

  Creates a new global scoped knative service revision
Revisions are created with a traffic percentage. This percentage controls how much traffic will be directed to this revision.
Traffic can be set to 100 to direct all traffic.

*/
func (a *Client) UpdateGlobalService(params *UpdateGlobalServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGlobalServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGlobalServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGlobalService",
		Method:             "POST",
		PathPattern:        "/api/functions/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateGlobalServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGlobalServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGlobalService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGlobalServiceTraffic updates global service traffic

  Update Global Service traffic directed to each revision, traffic can only be configured between two revisions.
All other revisions will bet set to 0 traffic.

*/
func (a *Client) UpdateGlobalServiceTraffic(params *UpdateGlobalServiceTrafficParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGlobalServiceTrafficOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGlobalServiceTrafficParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGlobalServiceTraffic",
		Method:             "PATCH",
		PathPattern:        "/api/functions/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateGlobalServiceTrafficReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGlobalServiceTrafficOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGlobalServiceTraffic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchGlobalServiceRevision watches global service revision

  Watch a global scoped knative service revision.
The target revision generation is the number suffix on a revision.
Example: A revisions named 'global-fast-request-00003' would have the revisionGeneration '00003'.
Note: This is a Server-Sent-Event endpoint, and will not work with the default swagger client.

*/
func (a *Client) WatchGlobalServiceRevision(params *WatchGlobalServiceRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WatchGlobalServiceRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchGlobalServiceRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "watchGlobalServiceRevision",
		Method:             "GET",
		PathPattern:        "/api/functions/{serviceName}/revisions/{revisionGeneration}",
		ProducesMediaTypes: []string{"text/event-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WatchGlobalServiceRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchGlobalServiceRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchGlobalServiceRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchGlobalServiceRevisionList watches global service revision list

  Watch the revision list of a global scoped knative service.
Note: This is a Server-Sent-Event endpoint, and will not work with the default swagger client.

*/
func (a *Client) WatchGlobalServiceRevisionList(params *WatchGlobalServiceRevisionListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WatchGlobalServiceRevisionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchGlobalServiceRevisionListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "watchGlobalServiceRevisionList",
		Method:             "GET",
		PathPattern:        "/api/functions/{serviceName}/revisions",
		ProducesMediaTypes: []string{"text/event-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WatchGlobalServiceRevisionListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchGlobalServiceRevisionListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchGlobalServiceRevisionList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
