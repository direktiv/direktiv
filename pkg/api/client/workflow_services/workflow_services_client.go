// Code generated by go-swagger; DO NOT EDIT.

package workflow_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workflow services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetWorkflowService(params *GetWorkflowServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowServiceOK, error)

	GetWorkflowServiceRevision(params *GetWorkflowServiceRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowServiceRevisionOK, error)

	GetWorkflowServiceRevisionList(params *GetWorkflowServiceRevisionListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowServiceRevisionListOK, error)

	ListWorkflowServiceRevisionPods(params *ListWorkflowServiceRevisionPodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWorkflowServiceRevisionPodsOK, error)

	ListWorkflowServices(params *ListWorkflowServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWorkflowServicesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetWorkflowService gets workflow service details

  Get a workflow scoped knative service details.
Note: This is a Server-Sent-Event endpoint, and will not work with the default swagger client.

*/
func (a *Client) GetWorkflowService(params *GetWorkflowServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowService",
		Method:             "GET",
		PathPattern:        "/api/functions/namespaces/{namespace}/tree/{workflow}?op=function",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkflowServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowServiceRevision gets workflow service revision

  Get a workflow scoped knative service revision.
This will return details on a single revision.
The target revision generation (rev query) is the number suffix on a revision.
Example: A revisions named 'workflow-10640097968065193909-get-00001' would have the revisionGeneration '00001'.

*/
func (a *Client) GetWorkflowServiceRevision(params *GetWorkflowServiceRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowServiceRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowServiceRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowServiceRevision",
		Method:             "GET",
		PathPattern:        "/api/functions/namespaces/{namespace}/tree/{workflow}?op=function-revision",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkflowServiceRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowServiceRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowServiceRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowServiceRevisionList gets workflow service revision list

  Get the revision list of a workflow scoped knative service.

*/
func (a *Client) GetWorkflowServiceRevisionList(params *GetWorkflowServiceRevisionListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowServiceRevisionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowServiceRevisionListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowServiceRevisionList",
		Method:             "GET",
		PathPattern:        "/api/functions/namespaces/{namespace}/tree/{workflow}?op=function-revisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkflowServiceRevisionListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowServiceRevisionListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowServiceRevisionList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListWorkflowServiceRevisionPods gets workflow service revision pods list

  List a revisions pods of a workflow scoped knative service.
The target revision generation (rev query) is the number suffix on a revision.
Example: A revisions named 'workflow-10640097968065193909-get-00001' would have the revisionGeneration '00001'.

*/
func (a *Client) ListWorkflowServiceRevisionPods(params *ListWorkflowServiceRevisionPodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWorkflowServiceRevisionPodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWorkflowServiceRevisionPodsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWorkflowServiceRevisionPods",
		Method:             "GET",
		PathPattern:        "/api/functions/namespaces/{namespace}/tree/{workflow}?op=pods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListWorkflowServiceRevisionPodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListWorkflowServiceRevisionPodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listWorkflowServiceRevisionPods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListWorkflowServices gets workflow services list

  Gets a list of workflow knative services.

*/
func (a *Client) ListWorkflowServices(params *ListWorkflowServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListWorkflowServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWorkflowServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWorkflowServices",
		Method:             "GET",
		PathPattern:        "/api/functions/namespaces/{namespace}/tree/{workflow}?op=services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListWorkflowServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListWorkflowServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listWorkflowServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
