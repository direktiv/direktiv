// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new instances API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for instances API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelInstance(params *CancelInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelInstanceOK, error)

	GetInstance(params *GetInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceOK, error)

	GetInstanceInput(params *GetInstanceInputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceInputOK, error)

	GetInstanceList(params *GetInstanceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceListOK, error)

	GetInstanceOutput(params *GetInstanceOutputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceOutputOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelInstance cancels a pending instance

  Cancel a currently pending instance.

*/
func (a *Client) CancelInstance(params *CancelInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelInstance",
		Method:             "POST",
		PathPattern:        "/api/namespaces/{namespace}/instances/{instance}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CancelInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstance gets a instance

  Gets the details of a executed workflow instance in this namespace.

*/
func (a *Client) GetInstance(params *GetInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstance",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/instances/{instance}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetInstanceInput gets a instance input

  Gets the input an instance was provided when executed.

*/
func (a *Client) GetInstanceInput(params *GetInstanceInputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceInputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceInputParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstanceInput",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/instances/{instance}/input",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInstanceInputReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstanceInputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstanceInput: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstanceList gets list instances

  Gets a list of instances in a namespace.

*/
func (a *Client) GetInstanceList(params *GetInstanceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstanceList",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInstanceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstanceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstanceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstanceOutput gets a instance output

  Gets the output an instance was provided when executed.

*/
func (a *Client) GetInstanceOutput(params *GetInstanceOutputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceOutputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceOutputParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstanceOutput",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/instances/{instance}/output",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInstanceOutputReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstanceOutputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstanceOutput: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
