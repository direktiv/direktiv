// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new metrics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for metrics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NamespaceMetricsFailed(params *NamespaceMetricsFailedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamespaceMetricsFailedOK, error)

	NamespaceMetricsInvoked(params *NamespaceMetricsInvokedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamespaceMetricsInvokedOK, error)

	NamespaceMetricsMilliseconds(params *NamespaceMetricsMillisecondsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamespaceMetricsMillisecondsOK, error)

	NamespaceMetricsSuccessful(params *NamespaceMetricsSuccessfulParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamespaceMetricsSuccessfulOK, error)

	WorkflowMetricsInvoked(params *WorkflowMetricsInvokedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkflowMetricsInvokedOK, error)

	WorkflowMetricsMilliseconds(params *WorkflowMetricsMillisecondsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkflowMetricsMillisecondsOK, error)

	WorkflowMetricsStateMilliseconds(params *WorkflowMetricsStateMillisecondsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkflowMetricsStateMillisecondsOK, error)

	WorkflowMetricsSuccessful(params *WorkflowMetricsSuccessfulParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkflowMetricsSuccessfulOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NamespaceMetricsFailed gets namespace failed workflow instances metrics

  Get metrics of failed workflows in the targeted namespace.

*/
func (a *Client) NamespaceMetricsFailed(params *NamespaceMetricsFailedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamespaceMetricsFailedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceMetricsFailedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "namespaceMetricsFailed",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/metrics/failed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceMetricsFailedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceMetricsFailedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for namespaceMetricsFailed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NamespaceMetricsInvoked gets namespace invoked workflow metrics

  Get metrics of invoked workflows in the targeted namespace.

*/
func (a *Client) NamespaceMetricsInvoked(params *NamespaceMetricsInvokedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamespaceMetricsInvokedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceMetricsInvokedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "namespaceMetricsInvoked",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/metrics/invoked",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceMetricsInvokedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceMetricsInvokedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for namespaceMetricsInvoked: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NamespaceMetricsMilliseconds gets namespace workflow timing metrics

  Get timing metrics of workflows in the targeted namespace.

*/
func (a *Client) NamespaceMetricsMilliseconds(params *NamespaceMetricsMillisecondsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamespaceMetricsMillisecondsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceMetricsMillisecondsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "namespaceMetricsMilliseconds",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/metrics/milliseconds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceMetricsMillisecondsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceMetricsMillisecondsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for namespaceMetricsMilliseconds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NamespaceMetricsSuccessful gets namespace successful workflow instances metrics

  Get metrics of successful workflows in the targeted namespace.

*/
func (a *Client) NamespaceMetricsSuccessful(params *NamespaceMetricsSuccessfulParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*NamespaceMetricsSuccessfulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceMetricsSuccessfulParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "namespaceMetricsSuccessful",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/metrics/successful",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceMetricsSuccessfulReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceMetricsSuccessfulOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for namespaceMetricsSuccessful: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowMetricsInvoked gets invoked workflow metrics

  Get metrics of invoked workflow instances.

*/
func (a *Client) WorkflowMetricsInvoked(params *WorkflowMetricsInvokedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkflowMetricsInvokedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowMetricsInvokedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "workflowMetricsInvoked",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/tree/{workflow}?op=metrics-invoked",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowMetricsInvokedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowMetricsInvokedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflowMetricsInvoked: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowMetricsMilliseconds gets workflow time metrics

  Get the timing metrics of a workflow's instance.
This returns a total sum of the milliseconds a workflow has been executed for.

*/
func (a *Client) WorkflowMetricsMilliseconds(params *WorkflowMetricsMillisecondsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkflowMetricsMillisecondsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowMetricsMillisecondsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "workflowMetricsMilliseconds",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/tree/{workflow}?op=metrics-failed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowMetricsMillisecondsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowMetricsMillisecondsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflowMetricsMilliseconds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowMetricsStateMilliseconds gets a workflow state time metrics

  Get the state timing metrics of a workflow's instance.
This returns the timing of individual states in a workflow.

*/
func (a *Client) WorkflowMetricsStateMilliseconds(params *WorkflowMetricsStateMillisecondsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkflowMetricsStateMillisecondsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowMetricsStateMillisecondsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "workflowMetricsStateMilliseconds",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/tree/{workflow}?op=metrics-state-milliseconds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowMetricsStateMillisecondsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowMetricsStateMillisecondsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflowMetricsStateMilliseconds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WorkflowMetricsSuccessful gets successful workflow metrics

  Get metrics of a workflow, where the instance was successful.

*/
func (a *Client) WorkflowMetricsSuccessful(params *WorkflowMetricsSuccessfulParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkflowMetricsSuccessfulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowMetricsSuccessfulParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "workflowMetricsSuccessful",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/tree/{workflow}?op=metrics-successful",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowMetricsSuccessfulReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowMetricsSuccessfulOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflowMetricsSuccessful: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
