// Code generated by go-swagger; DO NOT EDIT.

package namespace_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNamespaceServiceTrafficReader is a Reader for the UpdateNamespaceServiceTraffic structure.
type UpdateNamespaceServiceTrafficReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNamespaceServiceTrafficReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNamespaceServiceTrafficOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNamespaceServiceTrafficOK creates a UpdateNamespaceServiceTrafficOK with default headers values
func NewUpdateNamespaceServiceTrafficOK() *UpdateNamespaceServiceTrafficOK {
	return &UpdateNamespaceServiceTrafficOK{}
}

/* UpdateNamespaceServiceTrafficOK describes a response with status code 200, with default header values.

successfully updated service traffic
*/
type UpdateNamespaceServiceTrafficOK struct {
}

func (o *UpdateNamespaceServiceTrafficOK) Error() string {
	return fmt.Sprintf("[PATCH /api/functions/namespaces/{namespace}/function/{serviceName}][%d] updateNamespaceServiceTrafficOK ", 200)
}

func (o *UpdateNamespaceServiceTrafficOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*UpdateNamespaceServiceTrafficBody update namespace service traffic body
// Example: {"values":[{"percent":60,"revision":"namespace-direktiv-fast-request-00002"},{"percent":40,"revision":"namespace-direktiv-fast-request-00001"}]}
swagger:model UpdateNamespaceServiceTrafficBody
*/
type UpdateNamespaceServiceTrafficBody struct {

	// List of revision traffic targets
	// Required: true
	Values []*UpdateNamespaceServiceTrafficParamsBodyValuesItems0 `json:"values"`
}

// Validate validates this update namespace service traffic body
func (o *UpdateNamespaceServiceTrafficBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNamespaceServiceTrafficBody) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("Service Traffic"+"."+"values", "body", o.Values); err != nil {
		return err
	}

	for i := 0; i < len(o.Values); i++ {
		if swag.IsZero(o.Values[i]) { // not required
			continue
		}

		if o.Values[i] != nil {
			if err := o.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Service Traffic" + "." + "values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Service Traffic" + "." + "values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update namespace service traffic body based on the context it is used
func (o *UpdateNamespaceServiceTrafficBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNamespaceServiceTrafficBody) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Values); i++ {

		if o.Values[i] != nil {
			if err := o.Values[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Service Traffic" + "." + "values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Service Traffic" + "." + "values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNamespaceServiceTrafficBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNamespaceServiceTrafficBody) UnmarshalBinary(b []byte) error {
	var res UpdateNamespaceServiceTrafficBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNamespaceServiceTrafficParamsBodyValuesItems0 update namespace service traffic params body values items0
swagger:model UpdateNamespaceServiceTrafficParamsBodyValuesItems0
*/
type UpdateNamespaceServiceTrafficParamsBodyValuesItems0 struct {

	// Target traffice percentage
	Percent int64 `json:"percent,omitempty"`

	// Target service revision
	Revision string `json:"revision,omitempty"`
}

// Validate validates this update namespace service traffic params body values items0
func (o *UpdateNamespaceServiceTrafficParamsBodyValuesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update namespace service traffic params body values items0 based on context it is used
func (o *UpdateNamespaceServiceTrafficParamsBodyValuesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNamespaceServiceTrafficParamsBodyValuesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNamespaceServiceTrafficParamsBodyValuesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNamespaceServiceTrafficParamsBodyValuesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
