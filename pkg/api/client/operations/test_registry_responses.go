// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestRegistryReader is a Reader for the TestRegistry structure.
type TestRegistryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestRegistryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestRegistryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewTestRegistryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTestRegistryOK creates a TestRegistryOK with default headers values
func NewTestRegistryOK() *TestRegistryOK {
	return &TestRegistryOK{}
}

/* TestRegistryOK describes a response with status code 200, with default header values.

registry is valid
*/
type TestRegistryOK struct {
}

func (o *TestRegistryOK) Error() string {
	return fmt.Sprintf("[POST /api/functions/registries/test][%d] testRegistryOK ", 200)
}

func (o *TestRegistryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTestRegistryUnauthorized creates a TestRegistryUnauthorized with default headers values
func NewTestRegistryUnauthorized() *TestRegistryUnauthorized {
	return &TestRegistryUnauthorized{}
}

/* TestRegistryUnauthorized describes a response with status code 401, with default header values.

unauthorized to access the registry
*/
type TestRegistryUnauthorized struct {
}

func (o *TestRegistryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/functions/registries/test][%d] testRegistryUnauthorized ", 401)
}

func (o *TestRegistryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*TestRegistryBody test registry body
// Example: {"token":"8QwFLg%D$qg*","url":"https://prod.customreg.io","username":"admin"}
swagger:model TestRegistryBody
*/
type TestRegistryBody struct {

	// token to authenticate with the registry
	// Required: true
	Password *string `json:"password"`

	// The url to test if the registry is valid
	// Required: true
	URL *string `json:"url"`

	// username to authenticate with the registry
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this test registry body
func (o *TestRegistryBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TestRegistryBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("Registry Payload"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *TestRegistryBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("Registry Payload"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

func (o *TestRegistryBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("Registry Payload"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this test registry body based on context it is used
func (o *TestRegistryBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TestRegistryBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TestRegistryBody) UnmarshalBinary(b []byte) error {
	var res TestRegistryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
