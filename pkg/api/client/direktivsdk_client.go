// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/direktiv/direktiv/pkg/api/client/directory"
	"github.com/direktiv/direktiv/pkg/api/client/events"
	"github.com/direktiv/direktiv/pkg/api/client/global_services"
	"github.com/direktiv/direktiv/pkg/api/client/instances"
	"github.com/direktiv/direktiv/pkg/api/client/logs"
	"github.com/direktiv/direktiv/pkg/api/client/metrics"
	"github.com/direktiv/direktiv/pkg/api/client/namespace_services"
	"github.com/direktiv/direktiv/pkg/api/client/namespaces"
	"github.com/direktiv/direktiv/pkg/api/client/node"
	"github.com/direktiv/direktiv/pkg/api/client/operations"
	"github.com/direktiv/direktiv/pkg/api/client/other"
	"github.com/direktiv/direktiv/pkg/api/client/registries"
	"github.com/direktiv/direktiv/pkg/api/client/secrets"
	"github.com/direktiv/direktiv/pkg/api/client/variables"
	"github.com/direktiv/direktiv/pkg/api/client/workflow_services"
	"github.com/direktiv/direktiv/pkg/api/client/workflows"
)

// Default direktivsdk HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new direktivsdk HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Direktivsdk {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new direktivsdk HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Direktivsdk {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new direktivsdk client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Direktivsdk {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Direktivsdk)
	cli.Transport = transport
	cli.Directory = directory.New(transport, formats)
	cli.Events = events.New(transport, formats)
	cli.GlobalServices = global_services.New(transport, formats)
	cli.Instances = instances.New(transport, formats)
	cli.Logs = logs.New(transport, formats)
	cli.Metrics = metrics.New(transport, formats)
	cli.NamespaceServices = namespace_services.New(transport, formats)
	cli.Namespaces = namespaces.New(transport, formats)
	cli.Node = node.New(transport, formats)
	cli.Operations = operations.New(transport, formats)
	cli.Other = other.New(transport, formats)
	cli.Registries = registries.New(transport, formats)
	cli.Secrets = secrets.New(transport, formats)
	cli.Variables = variables.New(transport, formats)
	cli.WorkflowServices = workflow_services.New(transport, formats)
	cli.Workflows = workflows.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Direktivsdk is a client for direktivsdk
type Direktivsdk struct {
	Directory directory.ClientService

	Events events.ClientService

	GlobalServices global_services.ClientService

	Instances instances.ClientService

	Logs logs.ClientService

	Metrics metrics.ClientService

	NamespaceServices namespace_services.ClientService

	Namespaces namespaces.ClientService

	Node node.ClientService

	Operations operations.ClientService

	Other other.ClientService

	Registries registries.ClientService

	Secrets secrets.ClientService

	Variables variables.ClientService

	WorkflowServices workflow_services.ClientService

	Workflows workflows.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Direktivsdk) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Directory.SetTransport(transport)
	c.Events.SetTransport(transport)
	c.GlobalServices.SetTransport(transport)
	c.Instances.SetTransport(transport)
	c.Logs.SetTransport(transport)
	c.Metrics.SetTransport(transport)
	c.NamespaceServices.SetTransport(transport)
	c.Namespaces.SetTransport(transport)
	c.Node.SetTransport(transport)
	c.Operations.SetTransport(transport)
	c.Other.SetTransport(transport)
	c.Registries.SetTransport(transport)
	c.Secrets.SetTransport(transport)
	c.Variables.SetTransport(transport)
	c.WorkflowServices.SetTransport(transport)
	c.Workflows.SetTransport(transport)
}
