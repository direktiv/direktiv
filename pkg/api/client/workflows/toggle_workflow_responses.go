// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ToggleWorkflowReader is a Reader for the ToggleWorkflow structure.
type ToggleWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ToggleWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewToggleWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewToggleWorkflowOK creates a ToggleWorkflowOK with default headers values
func NewToggleWorkflowOK() *ToggleWorkflowOK {
	return &ToggleWorkflowOK{}
}

/* ToggleWorkflowOK describes a response with status code 200, with default header values.

successfully updated workflow live status
*/
type ToggleWorkflowOK struct {
}

func (o *ToggleWorkflowOK) Error() string {
	return fmt.Sprintf("[POST /api/namespaces/{namespace}/tree/{workflow}?op=toggle][%d] toggleWorkflowOK ", 200)
}

func (o *ToggleWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*ToggleWorkflowBody toggle workflow body
// Example: {"live":false}
swagger:model ToggleWorkflowBody
*/
type ToggleWorkflowBody struct {

	// Workflow live status
	// Required: true
	Live *bool `json:"live"`
}

// Validate validates this toggle workflow body
func (o *ToggleWorkflowBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLive(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ToggleWorkflowBody) validateLive(formats strfmt.Registry) error {

	if err := validate.Required("Workflow Live Status"+"."+"live", "body", o.Live); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this toggle workflow body based on context it is used
func (o *ToggleWorkflowBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ToggleWorkflowBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ToggleWorkflowBody) UnmarshalBinary(b []byte) error {
	var res ToggleWorkflowBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
