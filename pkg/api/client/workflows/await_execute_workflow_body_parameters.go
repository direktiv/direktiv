// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAwaitExecuteWorkflowBodyParams creates a new AwaitExecuteWorkflowBodyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAwaitExecuteWorkflowBodyParams() *AwaitExecuteWorkflowBodyParams {
	return &AwaitExecuteWorkflowBodyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAwaitExecuteWorkflowBodyParamsWithTimeout creates a new AwaitExecuteWorkflowBodyParams object
// with the ability to set a timeout on a request.
func NewAwaitExecuteWorkflowBodyParamsWithTimeout(timeout time.Duration) *AwaitExecuteWorkflowBodyParams {
	return &AwaitExecuteWorkflowBodyParams{
		timeout: timeout,
	}
}

// NewAwaitExecuteWorkflowBodyParamsWithContext creates a new AwaitExecuteWorkflowBodyParams object
// with the ability to set a context for a request.
func NewAwaitExecuteWorkflowBodyParamsWithContext(ctx context.Context) *AwaitExecuteWorkflowBodyParams {
	return &AwaitExecuteWorkflowBodyParams{
		Context: ctx,
	}
}

// NewAwaitExecuteWorkflowBodyParamsWithHTTPClient creates a new AwaitExecuteWorkflowBodyParams object
// with the ability to set a custom HTTPClient for a request.
func NewAwaitExecuteWorkflowBodyParamsWithHTTPClient(client *http.Client) *AwaitExecuteWorkflowBodyParams {
	return &AwaitExecuteWorkflowBodyParams{
		HTTPClient: client,
	}
}

/* AwaitExecuteWorkflowBodyParams contains all the parameters to send to the API endpoint
   for the await execute workflow body operation.

   Typically these are written to a http.Request.
*/
type AwaitExecuteWorkflowBodyParams struct {

	/* WorkflowInput.

	   The input of this workflow instance
	*/
	WorkflowInput interface{}

	/* Ctype.

	   Manually set the Content-Type response header instead of auto-detected. This doesn't change the body of the response in any way.
	*/
	Ctype *string

	/* Field.

	   If provided, instead of returning the entire output json the response body will contain the single top-level json field
	*/
	Field *string

	/* Namespace.

	   target namespace
	*/
	Namespace string

	/* RawOutput.

	   If set to true, will return an empty output as null, encoded base64 data as decoded binary data, and quoted json strings as a escaped string.
	*/
	RawOutput *bool

	/* Workflow.

	   path to target workflow
	*/
	Workflow string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the await execute workflow body params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AwaitExecuteWorkflowBodyParams) WithDefaults() *AwaitExecuteWorkflowBodyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the await execute workflow body params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AwaitExecuteWorkflowBodyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) WithTimeout(timeout time.Duration) *AwaitExecuteWorkflowBodyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) WithContext(ctx context.Context) *AwaitExecuteWorkflowBodyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) WithHTTPClient(client *http.Client) *AwaitExecuteWorkflowBodyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWorkflowInput adds the workflowInput to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) WithWorkflowInput(workflowInput interface{}) *AwaitExecuteWorkflowBodyParams {
	o.SetWorkflowInput(workflowInput)
	return o
}

// SetWorkflowInput adds the workflowInput to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) SetWorkflowInput(workflowInput interface{}) {
	o.WorkflowInput = workflowInput
}

// WithCtype adds the ctype to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) WithCtype(ctype *string) *AwaitExecuteWorkflowBodyParams {
	o.SetCtype(ctype)
	return o
}

// SetCtype adds the ctype to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) SetCtype(ctype *string) {
	o.Ctype = ctype
}

// WithField adds the field to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) WithField(field *string) *AwaitExecuteWorkflowBodyParams {
	o.SetField(field)
	return o
}

// SetField adds the field to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) SetField(field *string) {
	o.Field = field
}

// WithNamespace adds the namespace to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) WithNamespace(namespace string) *AwaitExecuteWorkflowBodyParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithRawOutput adds the rawOutput to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) WithRawOutput(rawOutput *bool) *AwaitExecuteWorkflowBodyParams {
	o.SetRawOutput(rawOutput)
	return o
}

// SetRawOutput adds the rawOutput to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) SetRawOutput(rawOutput *bool) {
	o.RawOutput = rawOutput
}

// WithWorkflow adds the workflow to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) WithWorkflow(workflow string) *AwaitExecuteWorkflowBodyParams {
	o.SetWorkflow(workflow)
	return o
}

// SetWorkflow adds the workflow to the await execute workflow body params
func (o *AwaitExecuteWorkflowBodyParams) SetWorkflow(workflow string) {
	o.Workflow = workflow
}

// WriteToRequest writes these params to a swagger request
func (o *AwaitExecuteWorkflowBodyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.WorkflowInput != nil {
		if err := r.SetBodyParam(o.WorkflowInput); err != nil {
			return err
		}
	}

	if o.Ctype != nil {

		// query param ctype
		var qrCtype string

		if o.Ctype != nil {
			qrCtype = *o.Ctype
		}
		qCtype := qrCtype
		if qCtype != "" {

			if err := r.SetQueryParam("ctype", qCtype); err != nil {
				return err
			}
		}
	}

	if o.Field != nil {

		// query param field
		var qrField string

		if o.Field != nil {
			qrField = *o.Field
		}
		qField := qrField
		if qField != "" {

			if err := r.SetQueryParam("field", qField); err != nil {
				return err
			}
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.RawOutput != nil {

		// query param raw-output
		var qrRawOutput bool

		if o.RawOutput != nil {
			qrRawOutput = *o.RawOutput
		}
		qRawOutput := swag.FormatBool(qrRawOutput)
		if qRawOutput != "" {

			if err := r.SetQueryParam("raw-output", qRawOutput); err != nil {
				return err
			}
		}
	}

	// path param workflow
	if err := r.SetPathParam("workflow", o.Workflow); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
