// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewExecuteWorkflowParams creates a new ExecuteWorkflowParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewExecuteWorkflowParams() *ExecuteWorkflowParams {
	return &ExecuteWorkflowParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewExecuteWorkflowParamsWithTimeout creates a new ExecuteWorkflowParams object
// with the ability to set a timeout on a request.
func NewExecuteWorkflowParamsWithTimeout(timeout time.Duration) *ExecuteWorkflowParams {
	return &ExecuteWorkflowParams{
		timeout: timeout,
	}
}

// NewExecuteWorkflowParamsWithContext creates a new ExecuteWorkflowParams object
// with the ability to set a context for a request.
func NewExecuteWorkflowParamsWithContext(ctx context.Context) *ExecuteWorkflowParams {
	return &ExecuteWorkflowParams{
		Context: ctx,
	}
}

// NewExecuteWorkflowParamsWithHTTPClient creates a new ExecuteWorkflowParams object
// with the ability to set a custom HTTPClient for a request.
func NewExecuteWorkflowParamsWithHTTPClient(client *http.Client) *ExecuteWorkflowParams {
	return &ExecuteWorkflowParams{
		HTTPClient: client,
	}
}

/* ExecuteWorkflowParams contains all the parameters to send to the API endpoint
   for the execute workflow operation.

   Typically these are written to a http.Request.
*/
type ExecuteWorkflowParams struct {

	/* WorkflowInput.

	   The input of this workflow instance
	*/
	WorkflowInput interface{}

	/* Namespace.

	   target namespace
	*/
	Namespace string

	/* Op.

	   the operation for the api

	   Default: "execute"
	*/
	Op string

	/* Workflow.

	   path to target workflow
	*/
	Workflow string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the execute workflow params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteWorkflowParams) WithDefaults() *ExecuteWorkflowParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the execute workflow params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteWorkflowParams) SetDefaults() {
	var (
		opDefault = string("execute")
	)

	val := ExecuteWorkflowParams{
		Op: opDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the execute workflow params
func (o *ExecuteWorkflowParams) WithTimeout(timeout time.Duration) *ExecuteWorkflowParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the execute workflow params
func (o *ExecuteWorkflowParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the execute workflow params
func (o *ExecuteWorkflowParams) WithContext(ctx context.Context) *ExecuteWorkflowParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the execute workflow params
func (o *ExecuteWorkflowParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the execute workflow params
func (o *ExecuteWorkflowParams) WithHTTPClient(client *http.Client) *ExecuteWorkflowParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the execute workflow params
func (o *ExecuteWorkflowParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWorkflowInput adds the workflowInput to the execute workflow params
func (o *ExecuteWorkflowParams) WithWorkflowInput(workflowInput interface{}) *ExecuteWorkflowParams {
	o.SetWorkflowInput(workflowInput)
	return o
}

// SetWorkflowInput adds the workflowInput to the execute workflow params
func (o *ExecuteWorkflowParams) SetWorkflowInput(workflowInput interface{}) {
	o.WorkflowInput = workflowInput
}

// WithNamespace adds the namespace to the execute workflow params
func (o *ExecuteWorkflowParams) WithNamespace(namespace string) *ExecuteWorkflowParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the execute workflow params
func (o *ExecuteWorkflowParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithOp adds the op to the execute workflow params
func (o *ExecuteWorkflowParams) WithOp(op string) *ExecuteWorkflowParams {
	o.SetOp(op)
	return o
}

// SetOp adds the op to the execute workflow params
func (o *ExecuteWorkflowParams) SetOp(op string) {
	o.Op = op
}

// WithWorkflow adds the workflow to the execute workflow params
func (o *ExecuteWorkflowParams) WithWorkflow(workflow string) *ExecuteWorkflowParams {
	o.SetWorkflow(workflow)
	return o
}

// SetWorkflow adds the workflow to the execute workflow params
func (o *ExecuteWorkflowParams) SetWorkflow(workflow string) {
	o.Workflow = workflow
}

// WriteToRequest writes these params to a swagger request
func (o *ExecuteWorkflowParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.WorkflowInput != nil {
		if err := r.SetBodyParam(o.WorkflowInput); err != nil {
			return err
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// query param op
	qrOp := o.Op
	qOp := qrOp
	if qOp != "" {

		if err := r.SetQueryParam("op", qOp); err != nil {
			return err
		}
	}

	// path param workflow
	if err := r.SetPathParam("workflow", o.Workflow); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
