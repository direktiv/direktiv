// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSetWorkflowCloudEventLogsParams creates a new SetWorkflowCloudEventLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSetWorkflowCloudEventLogsParams() *SetWorkflowCloudEventLogsParams {
	return &SetWorkflowCloudEventLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSetWorkflowCloudEventLogsParamsWithTimeout creates a new SetWorkflowCloudEventLogsParams object
// with the ability to set a timeout on a request.
func NewSetWorkflowCloudEventLogsParamsWithTimeout(timeout time.Duration) *SetWorkflowCloudEventLogsParams {
	return &SetWorkflowCloudEventLogsParams{
		timeout: timeout,
	}
}

// NewSetWorkflowCloudEventLogsParamsWithContext creates a new SetWorkflowCloudEventLogsParams object
// with the ability to set a context for a request.
func NewSetWorkflowCloudEventLogsParamsWithContext(ctx context.Context) *SetWorkflowCloudEventLogsParams {
	return &SetWorkflowCloudEventLogsParams{
		Context: ctx,
	}
}

// NewSetWorkflowCloudEventLogsParamsWithHTTPClient creates a new SetWorkflowCloudEventLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSetWorkflowCloudEventLogsParamsWithHTTPClient(client *http.Client) *SetWorkflowCloudEventLogsParams {
	return &SetWorkflowCloudEventLogsParams{
		HTTPClient: client,
	}
}

/* SetWorkflowCloudEventLogsParams contains all the parameters to send to the API endpoint
   for the set workflow cloud event logs operation.

   Typically these are written to a http.Request.
*/
type SetWorkflowCloudEventLogsParams struct {

	/* CloudEventLogger.

	   Cloud event logger to target
	*/
	CloudEventLogger SetWorkflowCloudEventLogsBody

	/* Namespace.

	   target namespace
	*/
	Namespace string

	/* Workflow.

	   path to target workflow
	*/
	Workflow string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the set workflow cloud event logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetWorkflowCloudEventLogsParams) WithDefaults() *SetWorkflowCloudEventLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the set workflow cloud event logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetWorkflowCloudEventLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) WithTimeout(timeout time.Duration) *SetWorkflowCloudEventLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) WithContext(ctx context.Context) *SetWorkflowCloudEventLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) WithHTTPClient(client *http.Client) *SetWorkflowCloudEventLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCloudEventLogger adds the cloudEventLogger to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) WithCloudEventLogger(cloudEventLogger SetWorkflowCloudEventLogsBody) *SetWorkflowCloudEventLogsParams {
	o.SetCloudEventLogger(cloudEventLogger)
	return o
}

// SetCloudEventLogger adds the cloudEventLogger to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) SetCloudEventLogger(cloudEventLogger SetWorkflowCloudEventLogsBody) {
	o.CloudEventLogger = cloudEventLogger
}

// WithNamespace adds the namespace to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) WithNamespace(namespace string) *SetWorkflowCloudEventLogsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithWorkflow adds the workflow to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) WithWorkflow(workflow string) *SetWorkflowCloudEventLogsParams {
	o.SetWorkflow(workflow)
	return o
}

// SetWorkflow adds the workflow to the set workflow cloud event logs params
func (o *SetWorkflowCloudEventLogsParams) SetWorkflow(workflow string) {
	o.Workflow = workflow
}

// WriteToRequest writes these params to a swagger request
func (o *SetWorkflowCloudEventLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.CloudEventLogger); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param workflow
	if err := r.SetPathParam("workflow", o.Workflow); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
