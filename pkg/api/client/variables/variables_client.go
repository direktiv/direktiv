// Code generated by go-swagger; DO NOT EDIT.

package variables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new variables API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for variables API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteInstanceVariable(params *DeleteInstanceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInstanceVariableOK, error)

	DeleteNamespaceVariable(params *DeleteNamespaceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNamespaceVariableOK, error)

	DeleteWorkflowVariable(params *DeleteWorkflowVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkflowVariableOK, error)

	GetInstanceVariable(params *GetInstanceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceVariableOK, error)

	GetInstanceVariables(params *GetInstanceVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceVariablesOK, error)

	GetNamespaceVariable(params *GetNamespaceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceVariableOK, error)

	GetNamespaceVariables(params *GetNamespaceVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceVariablesOK, error)

	GetWorkflowVariable(params *GetWorkflowVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowVariableOK, error)

	GetWorkflowVariables(params *GetWorkflowVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowVariablesOK, error)

	SetInstanceVariable(params *SetInstanceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetInstanceVariableOK, error)

	SetNamespaceVariable(params *SetNamespaceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetNamespaceVariableOK, error)

	SetWorkflowVariable(params *SetWorkflowVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetWorkflowVariableOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteInstanceVariable deletes a instance variable

  Delete a instance variable.

*/
func (a *Client) DeleteInstanceVariable(params *DeleteInstanceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInstanceVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteInstanceVariable",
		Method:             "DELETE",
		PathPattern:        "/api/namespaces/{namespace}/instances/{instance}/vars/{variable}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInstanceVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInstanceVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteInstanceVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNamespaceVariable deletes a namespace variable

  Delete a namespace variable.

*/
func (a *Client) DeleteNamespaceVariable(params *DeleteNamespaceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNamespaceVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNamespaceVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNamespaceVariable",
		Method:             "DELETE",
		PathPattern:        "/api/namespaces/{namespace}/vars/{variable}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNamespaceVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNamespaceVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNamespaceVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteWorkflowVariable deletes a workflow variable

  Delete a workflow variable.

*/
func (a *Client) DeleteWorkflowVariable(params *DeleteWorkflowVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkflowVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkflowVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWorkflowVariable",
		Method:             "DELETE",
		PathPattern:        "/api/namespaces/{namespace}/tree/{workflow}?op=delete-var",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWorkflowVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkflowVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteWorkflowVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstanceVariable gets a instance variable

  Get the value sorted in a instance variable.

*/
func (a *Client) GetInstanceVariable(params *GetInstanceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstanceVariable",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/instances/{instance}/vars/{variable}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInstanceVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstanceVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstanceVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstanceVariables gets list of instance variable

  Gets a list of variables in a instance.

*/
func (a *Client) GetInstanceVariables(params *GetInstanceVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstanceVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceVariablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstanceVariables",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/instances/{instance}/vars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInstanceVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstanceVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstanceVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNamespaceVariable gets a namespace variable

  Get the value sorted in a namespace variable.

*/
func (a *Client) GetNamespaceVariable(params *GetNamespaceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespaceVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNamespaceVariable",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/vars/{variable}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNamespaceVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespaceVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNamespaceVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNamespaceVariables gets namespace variable list

  Gets a list of variables in a namespace.

*/
func (a *Client) GetNamespaceVariables(params *GetNamespaceVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNamespaceVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespaceVariablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNamespaceVariables",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/vars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNamespaceVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespaceVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNamespaceVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowVariable gets a workflow variable

  Get the value sorted in a workflow variable.

*/
func (a *Client) GetWorkflowVariable(params *GetWorkflowVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowVariable",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/tree/{workflow}?op=var",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkflowVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkflowVariables gets list of workflow variables

  Gets a list of variables in a workflow.

*/
func (a *Client) GetWorkflowVariables(params *GetWorkflowVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkflowVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowVariablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowVariables",
		Method:             "GET",
		PathPattern:        "/api/namespaces/{namespace}/tree/{workflow}?op=vars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkflowVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetInstanceVariable sets a instance variable

  Set the value sorted in a instance variable.
If the target variable does not exists, it will be created.
Variable data can be anything so long as it can be represented as a string.

*/
func (a *Client) SetInstanceVariable(params *SetInstanceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetInstanceVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetInstanceVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setInstanceVariable",
		Method:             "PUT",
		PathPattern:        "/api/namespaces/{namespace}/instances/{instance}/vars/{variable}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetInstanceVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetInstanceVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setInstanceVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetNamespaceVariable sets a namespace variable

  Set the value sorted in a namespace variable.
If the target variable does not exists, it will be created.
Variable data can be anything so long as it can be represented as a string.

*/
func (a *Client) SetNamespaceVariable(params *SetNamespaceVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetNamespaceVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetNamespaceVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setNamespaceVariable",
		Method:             "PUT",
		PathPattern:        "/api/namespaces/{namespace}/vars/{variable}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetNamespaceVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetNamespaceVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setNamespaceVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetWorkflowVariable sets a workflow variable

  Set the value sorted in a workflow variable.
If the target variable does not exists, it will be created.
Variable data can be anything so long as it can be represented as a string.

*/
func (a *Client) SetWorkflowVariable(params *SetWorkflowVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetWorkflowVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWorkflowVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setWorkflowVariable",
		Method:             "PUT",
		PathPattern:        "/api/namespaces/{namespace}/tree/{workflow}?op=set-var",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetWorkflowVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetWorkflowVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setWorkflowVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
