// Code generated by go-swagger; DO NOT EDIT.

package other

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new other API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for other API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BroadcastCloudevent(params *BroadcastCloudeventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BroadcastCloudeventOK, error)

	JqPlayground(params *JqPlaygroundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JqPlaygroundOK, error)

	Version(params *VersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BroadcastCloudevent broadcasts cloud event

  Broadcast a cloud event to a namespace.
Cloud events posted to this api will be picked up by any workflows listening to the same event type on the namescape.
The body of this request should follow the cloud event core specification defined at https://github.com/cloudevents/spec .

*/
func (a *Client) BroadcastCloudevent(params *BroadcastCloudeventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BroadcastCloudeventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBroadcastCloudeventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "broadcastCloudevent",
		Method:             "POST",
		PathPattern:        "/api/namespaces/{namespace}/broadcast",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BroadcastCloudeventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BroadcastCloudeventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for broadcastCloudevent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JqPlayground js q playground api to test jq queries

  JQ Playground is a sandbox where you can test jq queries with custom data.

*/
func (a *Client) JqPlayground(params *JqPlaygroundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JqPlaygroundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJqPlaygroundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "jqPlayground",
		Method:             "POST",
		PathPattern:        "/api/jq",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JqPlaygroundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JqPlaygroundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for jqPlayground: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Version returns version information for servers in the cluster

  Returns version information for servers in the cluster.

*/
func (a *Client) Version(params *VersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "version",
		Method:             "GET",
		PathPattern:        "/api/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for version: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
