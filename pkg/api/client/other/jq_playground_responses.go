// Code generated by go-swagger; DO NOT EDIT.

package other

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JqPlaygroundReader is a Reader for the JqPlayground structure.
type JqPlaygroundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *JqPlaygroundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewJqPlaygroundOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewJqPlaygroundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewJqPlaygroundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewJqPlaygroundOK creates a JqPlaygroundOK with default headers values
func NewJqPlaygroundOK() *JqPlaygroundOK {
	return &JqPlaygroundOK{}
}

/* JqPlaygroundOK describes a response with status code 200, with default header values.

jq query was successful
*/
type JqPlaygroundOK struct {
}

func (o *JqPlaygroundOK) Error() string {
	return fmt.Sprintf("[POST /api/jq][%d] jqPlaygroundOK ", 200)
}

func (o *JqPlaygroundOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewJqPlaygroundBadRequest creates a JqPlaygroundBadRequest with default headers values
func NewJqPlaygroundBadRequest() *JqPlaygroundBadRequest {
	return &JqPlaygroundBadRequest{}
}

/* JqPlaygroundBadRequest describes a response with status code 400, with default header values.

the request was invalid
*/
type JqPlaygroundBadRequest struct {
}

func (o *JqPlaygroundBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/jq][%d] jqPlaygroundBadRequest ", 400)
}

func (o *JqPlaygroundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewJqPlaygroundInternalServerError creates a JqPlaygroundInternalServerError with default headers values
func NewJqPlaygroundInternalServerError() *JqPlaygroundInternalServerError {
	return &JqPlaygroundInternalServerError{}
}

/* JqPlaygroundInternalServerError describes a response with status code 500, with default header values.

an unexpected internal error occurred
*/
type JqPlaygroundInternalServerError struct {
}

func (o *JqPlaygroundInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/jq][%d] jqPlaygroundInternalServerError ", 500)
}

func (o *JqPlaygroundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*JqPlaygroundBody jq playground body
// Example: {"data":"eyJhIjogMSwgImIiOiAyLCAiYyI6IDQsICJkIjogN30=","query":"map(select(. \u003e= 2))"}
swagger:model JqPlaygroundBody
*/
type JqPlaygroundBody struct {

	// JSON data encoded in base64
	// Required: true
	Data *string `json:"data"`

	// jq query to manipulate JSON data
	// Required: true
	Query *string `json:"query"`
}

// Validate validates this jq playground body
func (o *JqPlaygroundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *JqPlaygroundBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("JQ payload"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

func (o *JqPlaygroundBody) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("JQ payload"+"."+"query", "body", o.Query); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this jq playground body based on context it is used
func (o *JqPlaygroundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *JqPlaygroundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *JqPlaygroundBody) UnmarshalBinary(b []byte) error {
	var res JqPlaygroundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
