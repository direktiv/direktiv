// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vorteil/direktiv/ent/workflowevents"
	"github.com/vorteil/direktiv/ent/workfloweventswait"
)

// WorkflowEventsWaitCreate is the builder for creating a WorkflowEventsWait entity.
type WorkflowEventsWaitCreate struct {
	config
	mutation *WorkflowEventsWaitMutation
	hooks    []Hook
}

// SetEvents sets the "events" field.
func (wewc *WorkflowEventsWaitCreate) SetEvents(m map[string]interface{}) *WorkflowEventsWaitCreate {
	wewc.mutation.SetEvents(m)
	return wewc
}

// SetWorkfloweventID sets the "workflowevent" edge to the WorkflowEvents entity by ID.
func (wewc *WorkflowEventsWaitCreate) SetWorkfloweventID(id int) *WorkflowEventsWaitCreate {
	wewc.mutation.SetWorkfloweventID(id)
	return wewc
}

// SetWorkflowevent sets the "workflowevent" edge to the WorkflowEvents entity.
func (wewc *WorkflowEventsWaitCreate) SetWorkflowevent(w *WorkflowEvents) *WorkflowEventsWaitCreate {
	return wewc.SetWorkfloweventID(w.ID)
}

// Mutation returns the WorkflowEventsWaitMutation object of the builder.
func (wewc *WorkflowEventsWaitCreate) Mutation() *WorkflowEventsWaitMutation {
	return wewc.mutation
}

// Save creates the WorkflowEventsWait in the database.
func (wewc *WorkflowEventsWaitCreate) Save(ctx context.Context) (*WorkflowEventsWait, error) {
	var (
		err  error
		node *WorkflowEventsWait
	)
	if len(wewc.hooks) == 0 {
		if err = wewc.check(); err != nil {
			return nil, err
		}
		node, err = wewc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkflowEventsWaitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wewc.check(); err != nil {
				return nil, err
			}
			wewc.mutation = mutation
			if node, err = wewc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wewc.hooks) - 1; i >= 0; i-- {
			if wewc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wewc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wewc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wewc *WorkflowEventsWaitCreate) SaveX(ctx context.Context) *WorkflowEventsWait {
	v, err := wewc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wewc *WorkflowEventsWaitCreate) Exec(ctx context.Context) error {
	_, err := wewc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wewc *WorkflowEventsWaitCreate) ExecX(ctx context.Context) {
	if err := wewc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wewc *WorkflowEventsWaitCreate) check() error {
	if _, ok := wewc.mutation.Events(); !ok {
		return &ValidationError{Name: "events", err: errors.New(`ent: missing required field "events"`)}
	}
	if _, ok := wewc.mutation.WorkfloweventID(); !ok {
		return &ValidationError{Name: "workflowevent", err: errors.New("ent: missing required edge \"workflowevent\"")}
	}
	return nil
}

func (wewc *WorkflowEventsWaitCreate) sqlSave(ctx context.Context) (*WorkflowEventsWait, error) {
	_node, _spec := wewc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wewc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wewc *WorkflowEventsWaitCreate) createSpec() (*WorkflowEventsWait, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowEventsWait{config: wewc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workfloweventswait.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workfloweventswait.FieldID,
			},
		}
	)
	if value, ok := wewc.mutation.Events(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: workfloweventswait.FieldEvents,
		})
		_node.Events = value
	}
	if nodes := wewc.mutation.WorkfloweventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workfloweventswait.WorkfloweventTable,
			Columns: []string{workfloweventswait.WorkfloweventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workflowevents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_events_wfeventswait = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowEventsWaitCreateBulk is the builder for creating many WorkflowEventsWait entities in bulk.
type WorkflowEventsWaitCreateBulk struct {
	config
	builders []*WorkflowEventsWaitCreate
}

// Save creates the WorkflowEventsWait entities in the database.
func (wewcb *WorkflowEventsWaitCreateBulk) Save(ctx context.Context) ([]*WorkflowEventsWait, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wewcb.builders))
	nodes := make([]*WorkflowEventsWait, len(wewcb.builders))
	mutators := make([]Mutator, len(wewcb.builders))
	for i := range wewcb.builders {
		func(i int, root context.Context) {
			builder := wewcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowEventsWaitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wewcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wewcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wewcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wewcb *WorkflowEventsWaitCreateBulk) SaveX(ctx context.Context) []*WorkflowEventsWait {
	v, err := wewcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wewcb *WorkflowEventsWaitCreateBulk) Exec(ctx context.Context) error {
	_, err := wewcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wewcb *WorkflowEventsWaitCreateBulk) ExecX(ctx context.Context) {
	if err := wewcb.Exec(ctx); err != nil {
		panic(err)
	}
}
