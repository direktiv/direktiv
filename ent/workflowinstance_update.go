// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vorteil/direktiv/ent/predicate"
	"github.com/vorteil/direktiv/ent/workflow"
	"github.com/vorteil/direktiv/ent/workflowevents"
	"github.com/vorteil/direktiv/ent/workflowinstance"
)

// WorkflowInstanceUpdate is the builder for updating WorkflowInstance entities.
type WorkflowInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowInstanceMutation
}

// Where adds a new predicate for the WorkflowInstanceUpdate builder.
func (wiu *WorkflowInstanceUpdate) Where(ps ...predicate.WorkflowInstance) *WorkflowInstanceUpdate {
	wiu.mutation.predicates = append(wiu.mutation.predicates, ps...)
	return wiu
}

// SetInstanceID sets the "instanceID" field.
func (wiu *WorkflowInstanceUpdate) SetInstanceID(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetInstanceID(s)
	return wiu
}

// SetInvokedBy sets the "invokedBy" field.
func (wiu *WorkflowInstanceUpdate) SetInvokedBy(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetInvokedBy(s)
	return wiu
}

// SetStatus sets the "status" field.
func (wiu *WorkflowInstanceUpdate) SetStatus(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetStatus(s)
	return wiu
}

// SetRevision sets the "revision" field.
func (wiu *WorkflowInstanceUpdate) SetRevision(i int) *WorkflowInstanceUpdate {
	wiu.mutation.ResetRevision()
	wiu.mutation.SetRevision(i)
	return wiu
}

// AddRevision adds i to the "revision" field.
func (wiu *WorkflowInstanceUpdate) AddRevision(i int) *WorkflowInstanceUpdate {
	wiu.mutation.AddRevision(i)
	return wiu
}

// SetBeginTime sets the "beginTime" field.
func (wiu *WorkflowInstanceUpdate) SetBeginTime(t time.Time) *WorkflowInstanceUpdate {
	wiu.mutation.SetBeginTime(t)
	return wiu
}

// SetEndTime sets the "endTime" field.
func (wiu *WorkflowInstanceUpdate) SetEndTime(t time.Time) *WorkflowInstanceUpdate {
	wiu.mutation.SetEndTime(t)
	return wiu
}

// SetNillableEndTime sets the "endTime" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableEndTime(t *time.Time) *WorkflowInstanceUpdate {
	if t != nil {
		wiu.SetEndTime(*t)
	}
	return wiu
}

// ClearEndTime clears the value of the "endTime" field.
func (wiu *WorkflowInstanceUpdate) ClearEndTime() *WorkflowInstanceUpdate {
	wiu.mutation.ClearEndTime()
	return wiu
}

// SetFlow sets the "flow" field.
func (wiu *WorkflowInstanceUpdate) SetFlow(s []string) *WorkflowInstanceUpdate {
	wiu.mutation.SetFlow(s)
	return wiu
}

// ClearFlow clears the value of the "flow" field.
func (wiu *WorkflowInstanceUpdate) ClearFlow() *WorkflowInstanceUpdate {
	wiu.mutation.ClearFlow()
	return wiu
}

// SetInput sets the "input" field.
func (wiu *WorkflowInstanceUpdate) SetInput(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetInput(s)
	return wiu
}

// SetOutput sets the "output" field.
func (wiu *WorkflowInstanceUpdate) SetOutput(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetOutput(s)
	return wiu
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableOutput(s *string) *WorkflowInstanceUpdate {
	if s != nil {
		wiu.SetOutput(*s)
	}
	return wiu
}

// ClearOutput clears the value of the "output" field.
func (wiu *WorkflowInstanceUpdate) ClearOutput() *WorkflowInstanceUpdate {
	wiu.mutation.ClearOutput()
	return wiu
}

// SetStateData sets the "stateData" field.
func (wiu *WorkflowInstanceUpdate) SetStateData(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetStateData(s)
	return wiu
}

// SetNillableStateData sets the "stateData" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableStateData(s *string) *WorkflowInstanceUpdate {
	if s != nil {
		wiu.SetStateData(*s)
	}
	return wiu
}

// ClearStateData clears the value of the "stateData" field.
func (wiu *WorkflowInstanceUpdate) ClearStateData() *WorkflowInstanceUpdate {
	wiu.mutation.ClearStateData()
	return wiu
}

// SetMemory sets the "memory" field.
func (wiu *WorkflowInstanceUpdate) SetMemory(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetMemory(s)
	return wiu
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableMemory(s *string) *WorkflowInstanceUpdate {
	if s != nil {
		wiu.SetMemory(*s)
	}
	return wiu
}

// ClearMemory clears the value of the "memory" field.
func (wiu *WorkflowInstanceUpdate) ClearMemory() *WorkflowInstanceUpdate {
	wiu.mutation.ClearMemory()
	return wiu
}

// SetDeadline sets the "deadline" field.
func (wiu *WorkflowInstanceUpdate) SetDeadline(t time.Time) *WorkflowInstanceUpdate {
	wiu.mutation.SetDeadline(t)
	return wiu
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableDeadline(t *time.Time) *WorkflowInstanceUpdate {
	if t != nil {
		wiu.SetDeadline(*t)
	}
	return wiu
}

// ClearDeadline clears the value of the "deadline" field.
func (wiu *WorkflowInstanceUpdate) ClearDeadline() *WorkflowInstanceUpdate {
	wiu.mutation.ClearDeadline()
	return wiu
}

// SetAttempts sets the "attempts" field.
func (wiu *WorkflowInstanceUpdate) SetAttempts(i int) *WorkflowInstanceUpdate {
	wiu.mutation.ResetAttempts()
	wiu.mutation.SetAttempts(i)
	return wiu
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableAttempts(i *int) *WorkflowInstanceUpdate {
	if i != nil {
		wiu.SetAttempts(*i)
	}
	return wiu
}

// AddAttempts adds i to the "attempts" field.
func (wiu *WorkflowInstanceUpdate) AddAttempts(i int) *WorkflowInstanceUpdate {
	wiu.mutation.AddAttempts(i)
	return wiu
}

// ClearAttempts clears the value of the "attempts" field.
func (wiu *WorkflowInstanceUpdate) ClearAttempts() *WorkflowInstanceUpdate {
	wiu.mutation.ClearAttempts()
	return wiu
}

// SetErrorCode sets the "errorCode" field.
func (wiu *WorkflowInstanceUpdate) SetErrorCode(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetErrorCode(s)
	return wiu
}

// SetNillableErrorCode sets the "errorCode" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableErrorCode(s *string) *WorkflowInstanceUpdate {
	if s != nil {
		wiu.SetErrorCode(*s)
	}
	return wiu
}

// ClearErrorCode clears the value of the "errorCode" field.
func (wiu *WorkflowInstanceUpdate) ClearErrorCode() *WorkflowInstanceUpdate {
	wiu.mutation.ClearErrorCode()
	return wiu
}

// SetErrorMessage sets the "errorMessage" field.
func (wiu *WorkflowInstanceUpdate) SetErrorMessage(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetErrorMessage(s)
	return wiu
}

// SetNillableErrorMessage sets the "errorMessage" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableErrorMessage(s *string) *WorkflowInstanceUpdate {
	if s != nil {
		wiu.SetErrorMessage(*s)
	}
	return wiu
}

// ClearErrorMessage clears the value of the "errorMessage" field.
func (wiu *WorkflowInstanceUpdate) ClearErrorMessage() *WorkflowInstanceUpdate {
	wiu.mutation.ClearErrorMessage()
	return wiu
}

// SetStateBeginTime sets the "stateBeginTime" field.
func (wiu *WorkflowInstanceUpdate) SetStateBeginTime(t time.Time) *WorkflowInstanceUpdate {
	wiu.mutation.SetStateBeginTime(t)
	return wiu
}

// SetNillableStateBeginTime sets the "stateBeginTime" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableStateBeginTime(t *time.Time) *WorkflowInstanceUpdate {
	if t != nil {
		wiu.SetStateBeginTime(*t)
	}
	return wiu
}

// ClearStateBeginTime clears the value of the "stateBeginTime" field.
func (wiu *WorkflowInstanceUpdate) ClearStateBeginTime() *WorkflowInstanceUpdate {
	wiu.mutation.ClearStateBeginTime()
	return wiu
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wiu *WorkflowInstanceUpdate) SetWorkflowID(id uuid.UUID) *WorkflowInstanceUpdate {
	wiu.mutation.SetWorkflowID(id)
	return wiu
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wiu *WorkflowInstanceUpdate) SetWorkflow(w *Workflow) *WorkflowInstanceUpdate {
	return wiu.SetWorkflowID(w.ID)
}

// AddInstanceIDs adds the "instance" edge to the WorkflowEvents entity by IDs.
func (wiu *WorkflowInstanceUpdate) AddInstanceIDs(ids ...int) *WorkflowInstanceUpdate {
	wiu.mutation.AddInstanceIDs(ids...)
	return wiu
}

// AddInstance adds the "instance" edges to the WorkflowEvents entity.
func (wiu *WorkflowInstanceUpdate) AddInstance(w ...*WorkflowEvents) *WorkflowInstanceUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wiu.AddInstanceIDs(ids...)
}

// Mutation returns the WorkflowInstanceMutation object of the builder.
func (wiu *WorkflowInstanceUpdate) Mutation() *WorkflowInstanceMutation {
	return wiu.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (wiu *WorkflowInstanceUpdate) ClearWorkflow() *WorkflowInstanceUpdate {
	wiu.mutation.ClearWorkflow()
	return wiu
}

// ClearInstance clears all "instance" edges to the WorkflowEvents entity.
func (wiu *WorkflowInstanceUpdate) ClearInstance() *WorkflowInstanceUpdate {
	wiu.mutation.ClearInstance()
	return wiu
}

// RemoveInstanceIDs removes the "instance" edge to WorkflowEvents entities by IDs.
func (wiu *WorkflowInstanceUpdate) RemoveInstanceIDs(ids ...int) *WorkflowInstanceUpdate {
	wiu.mutation.RemoveInstanceIDs(ids...)
	return wiu
}

// RemoveInstance removes "instance" edges to WorkflowEvents entities.
func (wiu *WorkflowInstanceUpdate) RemoveInstance(w ...*WorkflowEvents) *WorkflowInstanceUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wiu.RemoveInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wiu *WorkflowInstanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wiu.hooks) == 0 {
		if err = wiu.check(); err != nil {
			return 0, err
		}
		affected, err = wiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkflowInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wiu.check(); err != nil {
				return 0, err
			}
			wiu.mutation = mutation
			affected, err = wiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wiu.hooks) - 1; i >= 0; i-- {
			mut = wiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wiu *WorkflowInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := wiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wiu *WorkflowInstanceUpdate) Exec(ctx context.Context) error {
	_, err := wiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiu *WorkflowInstanceUpdate) ExecX(ctx context.Context) {
	if err := wiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wiu *WorkflowInstanceUpdate) check() error {
	if _, ok := wiu.mutation.WorkflowID(); wiu.mutation.WorkflowCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"workflow\"")
	}
	return nil
}

func (wiu *WorkflowInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workflowinstance.Table,
			Columns: workflowinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workflowinstance.FieldID,
			},
		},
	}
	if ps := wiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiu.mutation.InstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldInstanceID,
		})
	}
	if value, ok := wiu.mutation.InvokedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldInvokedBy,
		})
	}
	if value, ok := wiu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldStatus,
		})
	}
	if value, ok := wiu.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workflowinstance.FieldRevision,
		})
	}
	if value, ok := wiu.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workflowinstance.FieldRevision,
		})
	}
	if value, ok := wiu.mutation.BeginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workflowinstance.FieldBeginTime,
		})
	}
	if value, ok := wiu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workflowinstance.FieldEndTime,
		})
	}
	if wiu.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workflowinstance.FieldEndTime,
		})
	}
	if value, ok := wiu.mutation.Flow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: workflowinstance.FieldFlow,
		})
	}
	if wiu.mutation.FlowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: workflowinstance.FieldFlow,
		})
	}
	if value, ok := wiu.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldInput,
		})
	}
	if value, ok := wiu.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldOutput,
		})
	}
	if wiu.mutation.OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldOutput,
		})
	}
	if value, ok := wiu.mutation.StateData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldStateData,
		})
	}
	if wiu.mutation.StateDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldStateData,
		})
	}
	if value, ok := wiu.mutation.Memory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldMemory,
		})
	}
	if wiu.mutation.MemoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldMemory,
		})
	}
	if value, ok := wiu.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workflowinstance.FieldDeadline,
		})
	}
	if wiu.mutation.DeadlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workflowinstance.FieldDeadline,
		})
	}
	if value, ok := wiu.mutation.Attempts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workflowinstance.FieldAttempts,
		})
	}
	if value, ok := wiu.mutation.AddedAttempts(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workflowinstance.FieldAttempts,
		})
	}
	if wiu.mutation.AttemptsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workflowinstance.FieldAttempts,
		})
	}
	if value, ok := wiu.mutation.ErrorCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldErrorCode,
		})
	}
	if wiu.mutation.ErrorCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldErrorCode,
		})
	}
	if value, ok := wiu.mutation.ErrorMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldErrorMessage,
		})
	}
	if wiu.mutation.ErrorMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldErrorMessage,
		})
	}
	if value, ok := wiu.mutation.StateBeginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workflowinstance.FieldStateBeginTime,
		})
	}
	if wiu.mutation.StateBeginTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workflowinstance.FieldStateBeginTime,
		})
	}
	if wiu.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowinstance.WorkflowTable,
			Columns: []string{workflowinstance.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiu.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowinstance.WorkflowTable,
			Columns: []string{workflowinstance.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wiu.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowinstance.InstanceTable,
			Columns: []string{workflowinstance.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workflowevents.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiu.mutation.RemovedInstanceIDs(); len(nodes) > 0 && !wiu.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowinstance.InstanceTable,
			Columns: []string{workflowinstance.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workflowevents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiu.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowinstance.InstanceTable,
			Columns: []string{workflowinstance.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workflowevents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowinstance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WorkflowInstanceUpdateOne is the builder for updating a single WorkflowInstance entity.
type WorkflowInstanceUpdateOne struct {
	config
	hooks    []Hook
	mutation *WorkflowInstanceMutation
}

// SetInstanceID sets the "instanceID" field.
func (wiuo *WorkflowInstanceUpdateOne) SetInstanceID(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetInstanceID(s)
	return wiuo
}

// SetInvokedBy sets the "invokedBy" field.
func (wiuo *WorkflowInstanceUpdateOne) SetInvokedBy(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetInvokedBy(s)
	return wiuo
}

// SetStatus sets the "status" field.
func (wiuo *WorkflowInstanceUpdateOne) SetStatus(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetStatus(s)
	return wiuo
}

// SetRevision sets the "revision" field.
func (wiuo *WorkflowInstanceUpdateOne) SetRevision(i int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.ResetRevision()
	wiuo.mutation.SetRevision(i)
	return wiuo
}

// AddRevision adds i to the "revision" field.
func (wiuo *WorkflowInstanceUpdateOne) AddRevision(i int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.AddRevision(i)
	return wiuo
}

// SetBeginTime sets the "beginTime" field.
func (wiuo *WorkflowInstanceUpdateOne) SetBeginTime(t time.Time) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetBeginTime(t)
	return wiuo
}

// SetEndTime sets the "endTime" field.
func (wiuo *WorkflowInstanceUpdateOne) SetEndTime(t time.Time) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetEndTime(t)
	return wiuo
}

// SetNillableEndTime sets the "endTime" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableEndTime(t *time.Time) *WorkflowInstanceUpdateOne {
	if t != nil {
		wiuo.SetEndTime(*t)
	}
	return wiuo
}

// ClearEndTime clears the value of the "endTime" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearEndTime() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearEndTime()
	return wiuo
}

// SetFlow sets the "flow" field.
func (wiuo *WorkflowInstanceUpdateOne) SetFlow(s []string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetFlow(s)
	return wiuo
}

// ClearFlow clears the value of the "flow" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearFlow() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearFlow()
	return wiuo
}

// SetInput sets the "input" field.
func (wiuo *WorkflowInstanceUpdateOne) SetInput(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetInput(s)
	return wiuo
}

// SetOutput sets the "output" field.
func (wiuo *WorkflowInstanceUpdateOne) SetOutput(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetOutput(s)
	return wiuo
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableOutput(s *string) *WorkflowInstanceUpdateOne {
	if s != nil {
		wiuo.SetOutput(*s)
	}
	return wiuo
}

// ClearOutput clears the value of the "output" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearOutput() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearOutput()
	return wiuo
}

// SetStateData sets the "stateData" field.
func (wiuo *WorkflowInstanceUpdateOne) SetStateData(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetStateData(s)
	return wiuo
}

// SetNillableStateData sets the "stateData" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableStateData(s *string) *WorkflowInstanceUpdateOne {
	if s != nil {
		wiuo.SetStateData(*s)
	}
	return wiuo
}

// ClearStateData clears the value of the "stateData" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearStateData() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearStateData()
	return wiuo
}

// SetMemory sets the "memory" field.
func (wiuo *WorkflowInstanceUpdateOne) SetMemory(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetMemory(s)
	return wiuo
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableMemory(s *string) *WorkflowInstanceUpdateOne {
	if s != nil {
		wiuo.SetMemory(*s)
	}
	return wiuo
}

// ClearMemory clears the value of the "memory" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearMemory() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearMemory()
	return wiuo
}

// SetDeadline sets the "deadline" field.
func (wiuo *WorkflowInstanceUpdateOne) SetDeadline(t time.Time) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetDeadline(t)
	return wiuo
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableDeadline(t *time.Time) *WorkflowInstanceUpdateOne {
	if t != nil {
		wiuo.SetDeadline(*t)
	}
	return wiuo
}

// ClearDeadline clears the value of the "deadline" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearDeadline() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearDeadline()
	return wiuo
}

// SetAttempts sets the "attempts" field.
func (wiuo *WorkflowInstanceUpdateOne) SetAttempts(i int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.ResetAttempts()
	wiuo.mutation.SetAttempts(i)
	return wiuo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableAttempts(i *int) *WorkflowInstanceUpdateOne {
	if i != nil {
		wiuo.SetAttempts(*i)
	}
	return wiuo
}

// AddAttempts adds i to the "attempts" field.
func (wiuo *WorkflowInstanceUpdateOne) AddAttempts(i int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.AddAttempts(i)
	return wiuo
}

// ClearAttempts clears the value of the "attempts" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearAttempts() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearAttempts()
	return wiuo
}

// SetErrorCode sets the "errorCode" field.
func (wiuo *WorkflowInstanceUpdateOne) SetErrorCode(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetErrorCode(s)
	return wiuo
}

// SetNillableErrorCode sets the "errorCode" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableErrorCode(s *string) *WorkflowInstanceUpdateOne {
	if s != nil {
		wiuo.SetErrorCode(*s)
	}
	return wiuo
}

// ClearErrorCode clears the value of the "errorCode" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearErrorCode() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearErrorCode()
	return wiuo
}

// SetErrorMessage sets the "errorMessage" field.
func (wiuo *WorkflowInstanceUpdateOne) SetErrorMessage(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetErrorMessage(s)
	return wiuo
}

// SetNillableErrorMessage sets the "errorMessage" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableErrorMessage(s *string) *WorkflowInstanceUpdateOne {
	if s != nil {
		wiuo.SetErrorMessage(*s)
	}
	return wiuo
}

// ClearErrorMessage clears the value of the "errorMessage" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearErrorMessage() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearErrorMessage()
	return wiuo
}

// SetStateBeginTime sets the "stateBeginTime" field.
func (wiuo *WorkflowInstanceUpdateOne) SetStateBeginTime(t time.Time) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetStateBeginTime(t)
	return wiuo
}

// SetNillableStateBeginTime sets the "stateBeginTime" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableStateBeginTime(t *time.Time) *WorkflowInstanceUpdateOne {
	if t != nil {
		wiuo.SetStateBeginTime(*t)
	}
	return wiuo
}

// ClearStateBeginTime clears the value of the "stateBeginTime" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearStateBeginTime() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearStateBeginTime()
	return wiuo
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wiuo *WorkflowInstanceUpdateOne) SetWorkflowID(id uuid.UUID) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetWorkflowID(id)
	return wiuo
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wiuo *WorkflowInstanceUpdateOne) SetWorkflow(w *Workflow) *WorkflowInstanceUpdateOne {
	return wiuo.SetWorkflowID(w.ID)
}

// AddInstanceIDs adds the "instance" edge to the WorkflowEvents entity by IDs.
func (wiuo *WorkflowInstanceUpdateOne) AddInstanceIDs(ids ...int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.AddInstanceIDs(ids...)
	return wiuo
}

// AddInstance adds the "instance" edges to the WorkflowEvents entity.
func (wiuo *WorkflowInstanceUpdateOne) AddInstance(w ...*WorkflowEvents) *WorkflowInstanceUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wiuo.AddInstanceIDs(ids...)
}

// Mutation returns the WorkflowInstanceMutation object of the builder.
func (wiuo *WorkflowInstanceUpdateOne) Mutation() *WorkflowInstanceMutation {
	return wiuo.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (wiuo *WorkflowInstanceUpdateOne) ClearWorkflow() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearWorkflow()
	return wiuo
}

// ClearInstance clears all "instance" edges to the WorkflowEvents entity.
func (wiuo *WorkflowInstanceUpdateOne) ClearInstance() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearInstance()
	return wiuo
}

// RemoveInstanceIDs removes the "instance" edge to WorkflowEvents entities by IDs.
func (wiuo *WorkflowInstanceUpdateOne) RemoveInstanceIDs(ids ...int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.RemoveInstanceIDs(ids...)
	return wiuo
}

// RemoveInstance removes "instance" edges to WorkflowEvents entities.
func (wiuo *WorkflowInstanceUpdateOne) RemoveInstance(w ...*WorkflowEvents) *WorkflowInstanceUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wiuo.RemoveInstanceIDs(ids...)
}

// Save executes the query and returns the updated WorkflowInstance entity.
func (wiuo *WorkflowInstanceUpdateOne) Save(ctx context.Context) (*WorkflowInstance, error) {
	var (
		err  error
		node *WorkflowInstance
	)
	if len(wiuo.hooks) == 0 {
		if err = wiuo.check(); err != nil {
			return nil, err
		}
		node, err = wiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkflowInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wiuo.check(); err != nil {
				return nil, err
			}
			wiuo.mutation = mutation
			node, err = wiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wiuo.hooks) - 1; i >= 0; i-- {
			mut = wiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wiuo *WorkflowInstanceUpdateOne) SaveX(ctx context.Context) *WorkflowInstance {
	node, err := wiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wiuo *WorkflowInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := wiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiuo *WorkflowInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := wiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wiuo *WorkflowInstanceUpdateOne) check() error {
	if _, ok := wiuo.mutation.WorkflowID(); wiuo.mutation.WorkflowCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"workflow\"")
	}
	return nil
}

func (wiuo *WorkflowInstanceUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowInstance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workflowinstance.Table,
			Columns: workflowinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workflowinstance.FieldID,
			},
		},
	}
	id, ok := wiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WorkflowInstance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := wiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiuo.mutation.InstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldInstanceID,
		})
	}
	if value, ok := wiuo.mutation.InvokedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldInvokedBy,
		})
	}
	if value, ok := wiuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldStatus,
		})
	}
	if value, ok := wiuo.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workflowinstance.FieldRevision,
		})
	}
	if value, ok := wiuo.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workflowinstance.FieldRevision,
		})
	}
	if value, ok := wiuo.mutation.BeginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workflowinstance.FieldBeginTime,
		})
	}
	if value, ok := wiuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workflowinstance.FieldEndTime,
		})
	}
	if wiuo.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workflowinstance.FieldEndTime,
		})
	}
	if value, ok := wiuo.mutation.Flow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: workflowinstance.FieldFlow,
		})
	}
	if wiuo.mutation.FlowCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: workflowinstance.FieldFlow,
		})
	}
	if value, ok := wiuo.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldInput,
		})
	}
	if value, ok := wiuo.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldOutput,
		})
	}
	if wiuo.mutation.OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldOutput,
		})
	}
	if value, ok := wiuo.mutation.StateData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldStateData,
		})
	}
	if wiuo.mutation.StateDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldStateData,
		})
	}
	if value, ok := wiuo.mutation.Memory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldMemory,
		})
	}
	if wiuo.mutation.MemoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldMemory,
		})
	}
	if value, ok := wiuo.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workflowinstance.FieldDeadline,
		})
	}
	if wiuo.mutation.DeadlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workflowinstance.FieldDeadline,
		})
	}
	if value, ok := wiuo.mutation.Attempts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workflowinstance.FieldAttempts,
		})
	}
	if value, ok := wiuo.mutation.AddedAttempts(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workflowinstance.FieldAttempts,
		})
	}
	if wiuo.mutation.AttemptsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: workflowinstance.FieldAttempts,
		})
	}
	if value, ok := wiuo.mutation.ErrorCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldErrorCode,
		})
	}
	if wiuo.mutation.ErrorCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldErrorCode,
		})
	}
	if value, ok := wiuo.mutation.ErrorMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workflowinstance.FieldErrorMessage,
		})
	}
	if wiuo.mutation.ErrorMessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: workflowinstance.FieldErrorMessage,
		})
	}
	if value, ok := wiuo.mutation.StateBeginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workflowinstance.FieldStateBeginTime,
		})
	}
	if wiuo.mutation.StateBeginTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: workflowinstance.FieldStateBeginTime,
		})
	}
	if wiuo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowinstance.WorkflowTable,
			Columns: []string{workflowinstance.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiuo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowinstance.WorkflowTable,
			Columns: []string{workflowinstance.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wiuo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowinstance.InstanceTable,
			Columns: []string{workflowinstance.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workflowevents.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiuo.mutation.RemovedInstanceIDs(); len(nodes) > 0 && !wiuo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowinstance.InstanceTable,
			Columns: []string{workflowinstance.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workflowevents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiuo.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowinstance.InstanceTable,
			Columns: []string{workflowinstance.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workflowevents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowInstance{config: wiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowinstance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
