// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vorteil/direktiv/ent/workflow"
	"github.com/vorteil/direktiv/ent/workflowevents"
	"github.com/vorteil/direktiv/ent/workfloweventswait"
	"github.com/vorteil/direktiv/ent/workflowinstance"
)

// WorkflowEventsCreate is the builder for creating a WorkflowEvents entity.
type WorkflowEventsCreate struct {
	config
	mutation *WorkflowEventsMutation
	hooks    []Hook
}

// SetEvents sets the "events" field.
func (wec *WorkflowEventsCreate) SetEvents(m []map[string]interface{}) *WorkflowEventsCreate {
	wec.mutation.SetEvents(m)
	return wec
}

// SetCorrelations sets the "correlations" field.
func (wec *WorkflowEventsCreate) SetCorrelations(s []string) *WorkflowEventsCreate {
	wec.mutation.SetCorrelations(s)
	return wec
}

// SetSignature sets the "signature" field.
func (wec *WorkflowEventsCreate) SetSignature(b []byte) *WorkflowEventsCreate {
	wec.mutation.SetSignature(b)
	return wec
}

// SetCount sets the "count" field.
func (wec *WorkflowEventsCreate) SetCount(i int) *WorkflowEventsCreate {
	wec.mutation.SetCount(i)
	return wec
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wec *WorkflowEventsCreate) SetWorkflowID(id uuid.UUID) *WorkflowEventsCreate {
	wec.mutation.SetWorkflowID(id)
	return wec
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wec *WorkflowEventsCreate) SetWorkflow(w *Workflow) *WorkflowEventsCreate {
	return wec.SetWorkflowID(w.ID)
}

// AddWfeventswaitIDs adds the "wfeventswait" edge to the WorkflowEventsWait entity by IDs.
func (wec *WorkflowEventsCreate) AddWfeventswaitIDs(ids ...int) *WorkflowEventsCreate {
	wec.mutation.AddWfeventswaitIDs(ids...)
	return wec
}

// AddWfeventswait adds the "wfeventswait" edges to the WorkflowEventsWait entity.
func (wec *WorkflowEventsCreate) AddWfeventswait(w ...*WorkflowEventsWait) *WorkflowEventsCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wec.AddWfeventswaitIDs(ids...)
}

// SetWorkflowinstanceID sets the "workflowinstance" edge to the WorkflowInstance entity by ID.
func (wec *WorkflowEventsCreate) SetWorkflowinstanceID(id int) *WorkflowEventsCreate {
	wec.mutation.SetWorkflowinstanceID(id)
	return wec
}

// SetNillableWorkflowinstanceID sets the "workflowinstance" edge to the WorkflowInstance entity by ID if the given value is not nil.
func (wec *WorkflowEventsCreate) SetNillableWorkflowinstanceID(id *int) *WorkflowEventsCreate {
	if id != nil {
		wec = wec.SetWorkflowinstanceID(*id)
	}
	return wec
}

// SetWorkflowinstance sets the "workflowinstance" edge to the WorkflowInstance entity.
func (wec *WorkflowEventsCreate) SetWorkflowinstance(w *WorkflowInstance) *WorkflowEventsCreate {
	return wec.SetWorkflowinstanceID(w.ID)
}

// Mutation returns the WorkflowEventsMutation object of the builder.
func (wec *WorkflowEventsCreate) Mutation() *WorkflowEventsMutation {
	return wec.mutation
}

// Save creates the WorkflowEvents in the database.
func (wec *WorkflowEventsCreate) Save(ctx context.Context) (*WorkflowEvents, error) {
	var (
		err  error
		node *WorkflowEvents
	)
	if len(wec.hooks) == 0 {
		if err = wec.check(); err != nil {
			return nil, err
		}
		node, err = wec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkflowEventsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wec.check(); err != nil {
				return nil, err
			}
			wec.mutation = mutation
			node, err = wec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wec.hooks) - 1; i >= 0; i-- {
			mut = wec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WorkflowEventsCreate) SaveX(ctx context.Context) *WorkflowEvents {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (wec *WorkflowEventsCreate) check() error {
	if _, ok := wec.mutation.Events(); !ok {
		return &ValidationError{Name: "events", err: errors.New("ent: missing required field \"events\"")}
	}
	if _, ok := wec.mutation.Correlations(); !ok {
		return &ValidationError{Name: "correlations", err: errors.New("ent: missing required field \"correlations\"")}
	}
	if _, ok := wec.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New("ent: missing required field \"count\"")}
	}
	if _, ok := wec.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow", err: errors.New("ent: missing required edge \"workflow\"")}
	}
	return nil
}

func (wec *WorkflowEventsCreate) sqlSave(ctx context.Context) (*WorkflowEvents, error) {
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wec *WorkflowEventsCreate) createSpec() (*WorkflowEvents, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowEvents{config: wec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workflowevents.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workflowevents.FieldID,
			},
		}
	)
	if value, ok := wec.mutation.Events(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: workflowevents.FieldEvents,
		})
		_node.Events = value
	}
	if value, ok := wec.mutation.Correlations(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: workflowevents.FieldCorrelations,
		})
		_node.Correlations = value
	}
	if value, ok := wec.mutation.Signature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: workflowevents.FieldSignature,
		})
		_node.Signature = value
	}
	if value, ok := wec.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workflowevents.FieldCount,
		})
		_node.Count = value
	}
	if nodes := wec.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowevents.WorkflowTable,
			Columns: []string{workflowevents.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_wfevents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.WfeventswaitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowevents.WfeventswaitTable,
			Columns: []string{workflowevents.WfeventswaitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workfloweventswait.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.WorkflowinstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowevents.WorkflowinstanceTable,
			Columns: []string{workflowevents.WorkflowinstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workflowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_instance_instance = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowEventsCreateBulk is the builder for creating many WorkflowEvents entities in bulk.
type WorkflowEventsCreateBulk struct {
	config
	builders []*WorkflowEventsCreate
}

// Save creates the WorkflowEvents entities in the database.
func (wecb *WorkflowEventsCreateBulk) Save(ctx context.Context) ([]*WorkflowEvents, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WorkflowEvents, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowEventsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WorkflowEventsCreateBulk) SaveX(ctx context.Context) []*WorkflowEvents {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
