// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/vorteil/direktiv/ent/predicate"
	"github.com/vorteil/direktiv/ent/workflow"
	"github.com/vorteil/direktiv/ent/workflowevents"
	"github.com/vorteil/direktiv/ent/workfloweventswait"
	"github.com/vorteil/direktiv/ent/workflowinstance"
)

// WorkflowEventsQuery is the builder for querying WorkflowEvents entities.
type WorkflowEventsQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.WorkflowEvents
	// eager-loading edges.
	withWorkflow         *WorkflowQuery
	withWfeventswait     *WorkflowEventsWaitQuery
	withWorkflowinstance *WorkflowInstanceQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkflowEventsQuery builder.
func (weq *WorkflowEventsQuery) Where(ps ...predicate.WorkflowEvents) *WorkflowEventsQuery {
	weq.predicates = append(weq.predicates, ps...)
	return weq
}

// Limit adds a limit step to the query.
func (weq *WorkflowEventsQuery) Limit(limit int) *WorkflowEventsQuery {
	weq.limit = &limit
	return weq
}

// Offset adds an offset step to the query.
func (weq *WorkflowEventsQuery) Offset(offset int) *WorkflowEventsQuery {
	weq.offset = &offset
	return weq
}

// Order adds an order step to the query.
func (weq *WorkflowEventsQuery) Order(o ...OrderFunc) *WorkflowEventsQuery {
	weq.order = append(weq.order, o...)
	return weq
}

// QueryWorkflow chains the current query on the "workflow" edge.
func (weq *WorkflowEventsQuery) QueryWorkflow() *WorkflowQuery {
	query := &WorkflowQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowevents.Table, workflowevents.FieldID, selector),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowevents.WorkflowTable, workflowevents.WorkflowColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWfeventswait chains the current query on the "wfeventswait" edge.
func (weq *WorkflowEventsQuery) QueryWfeventswait() *WorkflowEventsWaitQuery {
	query := &WorkflowEventsWaitQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowevents.Table, workflowevents.FieldID, selector),
			sqlgraph.To(workfloweventswait.Table, workfloweventswait.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflowevents.WfeventswaitTable, workflowevents.WfeventswaitColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflowinstance chains the current query on the "workflowinstance" edge.
func (weq *WorkflowEventsQuery) QueryWorkflowinstance() *WorkflowInstanceQuery {
	query := &WorkflowInstanceQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowevents.Table, workflowevents.FieldID, selector),
			sqlgraph.To(workflowinstance.Table, workflowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowevents.WorkflowinstanceTable, workflowevents.WorkflowinstanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkflowEvents entity from the query.
// Returns a *NotFoundError when no WorkflowEvents was found.
func (weq *WorkflowEventsQuery) First(ctx context.Context) (*WorkflowEvents, error) {
	nodes, err := weq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workflowevents.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (weq *WorkflowEventsQuery) FirstX(ctx context.Context) *WorkflowEvents {
	node, err := weq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkflowEvents ID from the query.
// Returns a *NotFoundError when no WorkflowEvents ID was found.
func (weq *WorkflowEventsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = weq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workflowevents.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (weq *WorkflowEventsQuery) FirstIDX(ctx context.Context) int {
	id, err := weq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkflowEvents entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one WorkflowEvents entity is not found.
// Returns a *NotFoundError when no WorkflowEvents entities are found.
func (weq *WorkflowEventsQuery) Only(ctx context.Context) (*WorkflowEvents, error) {
	nodes, err := weq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workflowevents.Label}
	default:
		return nil, &NotSingularError{workflowevents.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (weq *WorkflowEventsQuery) OnlyX(ctx context.Context) *WorkflowEvents {
	node, err := weq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkflowEvents ID in the query.
// Returns a *NotSingularError when exactly one WorkflowEvents ID is not found.
// Returns a *NotFoundError when no entities are found.
func (weq *WorkflowEventsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = weq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workflowevents.Label}
	default:
		err = &NotSingularError{workflowevents.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (weq *WorkflowEventsQuery) OnlyIDX(ctx context.Context) int {
	id, err := weq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkflowEventsSlice.
func (weq *WorkflowEventsQuery) All(ctx context.Context) ([]*WorkflowEvents, error) {
	if err := weq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return weq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (weq *WorkflowEventsQuery) AllX(ctx context.Context) []*WorkflowEvents {
	nodes, err := weq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkflowEvents IDs.
func (weq *WorkflowEventsQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := weq.Select(workflowevents.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (weq *WorkflowEventsQuery) IDsX(ctx context.Context) []int {
	ids, err := weq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (weq *WorkflowEventsQuery) Count(ctx context.Context) (int, error) {
	if err := weq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return weq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (weq *WorkflowEventsQuery) CountX(ctx context.Context) int {
	count, err := weq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (weq *WorkflowEventsQuery) Exist(ctx context.Context) (bool, error) {
	if err := weq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return weq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (weq *WorkflowEventsQuery) ExistX(ctx context.Context) bool {
	exist, err := weq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkflowEventsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (weq *WorkflowEventsQuery) Clone() *WorkflowEventsQuery {
	if weq == nil {
		return nil
	}
	return &WorkflowEventsQuery{
		config:               weq.config,
		limit:                weq.limit,
		offset:               weq.offset,
		order:                append([]OrderFunc{}, weq.order...),
		predicates:           append([]predicate.WorkflowEvents{}, weq.predicates...),
		withWorkflow:         weq.withWorkflow.Clone(),
		withWfeventswait:     weq.withWfeventswait.Clone(),
		withWorkflowinstance: weq.withWorkflowinstance.Clone(),
		// clone intermediate query.
		sql:  weq.sql.Clone(),
		path: weq.path,
	}
}

// WithWorkflow tells the query-builder to eager-load the nodes that are connected to
// the "workflow" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEventsQuery) WithWorkflow(opts ...func(*WorkflowQuery)) *WorkflowEventsQuery {
	query := &WorkflowQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withWorkflow = query
	return weq
}

// WithWfeventswait tells the query-builder to eager-load the nodes that are connected to
// the "wfeventswait" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEventsQuery) WithWfeventswait(opts ...func(*WorkflowEventsWaitQuery)) *WorkflowEventsQuery {
	query := &WorkflowEventsWaitQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withWfeventswait = query
	return weq
}

// WithWorkflowinstance tells the query-builder to eager-load the nodes that are connected to
// the "workflowinstance" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowEventsQuery) WithWorkflowinstance(opts ...func(*WorkflowInstanceQuery)) *WorkflowEventsQuery {
	query := &WorkflowInstanceQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withWorkflowinstance = query
	return weq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Events []map[string]interface {} `json:"events,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkflowEvents.Query().
//		GroupBy(workflowevents.FieldEvents).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (weq *WorkflowEventsQuery) GroupBy(field string, fields ...string) *WorkflowEventsGroupBy {
	group := &WorkflowEventsGroupBy{config: weq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return weq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Events []map[string]interface {} `json:"events,omitempty"`
//	}
//
//	client.WorkflowEvents.Query().
//		Select(workflowevents.FieldEvents).
//		Scan(ctx, &v)
//
func (weq *WorkflowEventsQuery) Select(field string, fields ...string) *WorkflowEventsSelect {
	weq.fields = append([]string{field}, fields...)
	return &WorkflowEventsSelect{WorkflowEventsQuery: weq}
}

func (weq *WorkflowEventsQuery) prepareQuery(ctx context.Context) error {
	for _, f := range weq.fields {
		if !workflowevents.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if weq.path != nil {
		prev, err := weq.path(ctx)
		if err != nil {
			return err
		}
		weq.sql = prev
	}
	return nil
}

func (weq *WorkflowEventsQuery) sqlAll(ctx context.Context) ([]*WorkflowEvents, error) {
	var (
		nodes       = []*WorkflowEvents{}
		withFKs     = weq.withFKs
		_spec       = weq.querySpec()
		loadedTypes = [3]bool{
			weq.withWorkflow != nil,
			weq.withWfeventswait != nil,
			weq.withWorkflowinstance != nil,
		}
	)
	if weq.withWorkflow != nil || weq.withWorkflowinstance != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workflowevents.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &WorkflowEvents{config: weq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, weq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := weq.withWorkflow; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*WorkflowEvents)
		for i := range nodes {
			fk := nodes[i].workflow_wfevents
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(workflow.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "workflow_wfevents" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Workflow = n
			}
		}
	}

	if query := weq.withWfeventswait; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*WorkflowEvents)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Wfeventswait = []*WorkflowEventsWait{}
		}
		query.withFKs = true
		query.Where(predicate.WorkflowEventsWait(func(s *sql.Selector) {
			s.Where(sql.InValues(workflowevents.WfeventswaitColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.workflow_events_wfeventswait
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "workflow_events_wfeventswait" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "workflow_events_wfeventswait" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Wfeventswait = append(node.Edges.Wfeventswait, n)
		}
	}

	if query := weq.withWorkflowinstance; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*WorkflowEvents)
		for i := range nodes {
			fk := nodes[i].workflow_instance_instance
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(workflowinstance.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "workflow_instance_instance" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Workflowinstance = n
			}
		}
	}

	return nodes, nil
}

func (weq *WorkflowEventsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := weq.querySpec()
	return sqlgraph.CountNodes(ctx, weq.driver, _spec)
}

func (weq *WorkflowEventsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := weq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (weq *WorkflowEventsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workflowevents.Table,
			Columns: workflowevents.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workflowevents.FieldID,
			},
		},
		From:   weq.sql,
		Unique: true,
	}
	if fields := weq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowevents.FieldID)
		for i := range fields {
			if fields[i] != workflowevents.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := weq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := weq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := weq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := weq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, workflowevents.ValidColumn)
			}
		}
	}
	return _spec
}

func (weq *WorkflowEventsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(weq.driver.Dialect())
	t1 := builder.Table(workflowevents.Table)
	selector := builder.Select(t1.Columns(workflowevents.Columns...)...).From(t1)
	if weq.sql != nil {
		selector = weq.sql
		selector.Select(selector.Columns(workflowevents.Columns...)...)
	}
	for _, p := range weq.predicates {
		p(selector)
	}
	for _, p := range weq.order {
		p(selector, workflowevents.ValidColumn)
	}
	if offset := weq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := weq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkflowEventsGroupBy is the group-by builder for WorkflowEvents entities.
type WorkflowEventsGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wegb *WorkflowEventsGroupBy) Aggregate(fns ...AggregateFunc) *WorkflowEventsGroupBy {
	wegb.fns = append(wegb.fns, fns...)
	return wegb
}

// Scan applies the group-by query and scans the result into the given value.
func (wegb *WorkflowEventsGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := wegb.path(ctx)
	if err != nil {
		return err
	}
	wegb.sql = query
	return wegb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wegb *WorkflowEventsGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := wegb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkflowEventsGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkflowEventsGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wegb *WorkflowEventsGroupBy) StringsX(ctx context.Context) []string {
	v, err := wegb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkflowEventsGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = wegb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workflowevents.Label}
	default:
		err = fmt.Errorf("ent: WorkflowEventsGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (wegb *WorkflowEventsGroupBy) StringX(ctx context.Context) string {
	v, err := wegb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkflowEventsGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkflowEventsGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wegb *WorkflowEventsGroupBy) IntsX(ctx context.Context) []int {
	v, err := wegb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkflowEventsGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = wegb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workflowevents.Label}
	default:
		err = fmt.Errorf("ent: WorkflowEventsGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (wegb *WorkflowEventsGroupBy) IntX(ctx context.Context) int {
	v, err := wegb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkflowEventsGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkflowEventsGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wegb *WorkflowEventsGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := wegb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkflowEventsGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = wegb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workflowevents.Label}
	default:
		err = fmt.Errorf("ent: WorkflowEventsGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (wegb *WorkflowEventsGroupBy) Float64X(ctx context.Context) float64 {
	v, err := wegb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkflowEventsGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkflowEventsGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wegb *WorkflowEventsGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := wegb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkflowEventsGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = wegb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workflowevents.Label}
	default:
		err = fmt.Errorf("ent: WorkflowEventsGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (wegb *WorkflowEventsGroupBy) BoolX(ctx context.Context) bool {
	v, err := wegb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wegb *WorkflowEventsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range wegb.fields {
		if !workflowevents.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := wegb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wegb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wegb *WorkflowEventsGroupBy) sqlQuery() *sql.Selector {
	selector := wegb.sql
	columns := make([]string, 0, len(wegb.fields)+len(wegb.fns))
	columns = append(columns, wegb.fields...)
	for _, fn := range wegb.fns {
		columns = append(columns, fn(selector, workflowevents.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(wegb.fields...)
}

// WorkflowEventsSelect is the builder for selecting fields of WorkflowEvents entities.
type WorkflowEventsSelect struct {
	*WorkflowEventsQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (wes *WorkflowEventsSelect) Scan(ctx context.Context, v interface{}) error {
	if err := wes.prepareQuery(ctx); err != nil {
		return err
	}
	wes.sql = wes.WorkflowEventsQuery.sqlQuery(ctx)
	return wes.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wes *WorkflowEventsSelect) ScanX(ctx context.Context, v interface{}) {
	if err := wes.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (wes *WorkflowEventsSelect) Strings(ctx context.Context) ([]string, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkflowEventsSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wes *WorkflowEventsSelect) StringsX(ctx context.Context) []string {
	v, err := wes.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (wes *WorkflowEventsSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = wes.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workflowevents.Label}
	default:
		err = fmt.Errorf("ent: WorkflowEventsSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (wes *WorkflowEventsSelect) StringX(ctx context.Context) string {
	v, err := wes.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (wes *WorkflowEventsSelect) Ints(ctx context.Context) ([]int, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkflowEventsSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wes *WorkflowEventsSelect) IntsX(ctx context.Context) []int {
	v, err := wes.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (wes *WorkflowEventsSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = wes.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workflowevents.Label}
	default:
		err = fmt.Errorf("ent: WorkflowEventsSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (wes *WorkflowEventsSelect) IntX(ctx context.Context) int {
	v, err := wes.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (wes *WorkflowEventsSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkflowEventsSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wes *WorkflowEventsSelect) Float64sX(ctx context.Context) []float64 {
	v, err := wes.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (wes *WorkflowEventsSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = wes.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workflowevents.Label}
	default:
		err = fmt.Errorf("ent: WorkflowEventsSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (wes *WorkflowEventsSelect) Float64X(ctx context.Context) float64 {
	v, err := wes.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (wes *WorkflowEventsSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkflowEventsSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wes *WorkflowEventsSelect) BoolsX(ctx context.Context) []bool {
	v, err := wes.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (wes *WorkflowEventsSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = wes.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workflowevents.Label}
	default:
		err = fmt.Errorf("ent: WorkflowEventsSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (wes *WorkflowEventsSelect) BoolX(ctx context.Context) bool {
	v, err := wes.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wes *WorkflowEventsSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := wes.sqlQuery().Query()
	if err := wes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wes *WorkflowEventsSelect) sqlQuery() sql.Querier {
	selector := wes.sql
	selector.Select(selector.Columns(wes.fields...)...)
	return selector
}
