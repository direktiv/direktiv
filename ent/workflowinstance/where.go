// Code generated by entc, DO NOT EDIT.

package workflowinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vorteil/direktiv/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// InstanceID applies equality check predicate on the "instanceID" field. It's identical to InstanceIDEQ.
func InstanceID(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceID), v))
	})
}

// InvokedBy applies equality check predicate on the "invokedBy" field. It's identical to InvokedByEQ.
func InvokedBy(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInvokedBy), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Revision applies equality check predicate on the "revision" field. It's identical to RevisionEQ.
func Revision(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevision), v))
	})
}

// BeginTime applies equality check predicate on the "beginTime" field. It's identical to BeginTimeEQ.
func BeginTime(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeginTime), v))
	})
}

// EndTime applies equality check predicate on the "endTime" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// Input applies equality check predicate on the "input" field. It's identical to InputEQ.
func Input(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInput), v))
	})
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutput), v))
	})
}

// StateData applies equality check predicate on the "stateData" field. It's identical to StateDataEQ.
func StateData(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateData), v))
	})
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemory), v))
	})
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeadline), v))
	})
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttempts), v))
	})
}

// ErrorCode applies equality check predicate on the "errorCode" field. It's identical to ErrorCodeEQ.
func ErrorCode(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorCode), v))
	})
}

// ErrorMessage applies equality check predicate on the "errorMessage" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorMessage), v))
	})
}

// InstanceIDEQ applies the EQ predicate on the "instanceID" field.
func InstanceIDEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceID), v))
	})
}

// InstanceIDNEQ applies the NEQ predicate on the "instanceID" field.
func InstanceIDNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceID), v))
	})
}

// InstanceIDIn applies the In predicate on the "instanceID" field.
func InstanceIDIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstanceID), v...))
	})
}

// InstanceIDNotIn applies the NotIn predicate on the "instanceID" field.
func InstanceIDNotIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstanceID), v...))
	})
}

// InstanceIDGT applies the GT predicate on the "instanceID" field.
func InstanceIDGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceID), v))
	})
}

// InstanceIDGTE applies the GTE predicate on the "instanceID" field.
func InstanceIDGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceID), v))
	})
}

// InstanceIDLT applies the LT predicate on the "instanceID" field.
func InstanceIDLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceID), v))
	})
}

// InstanceIDLTE applies the LTE predicate on the "instanceID" field.
func InstanceIDLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceID), v))
	})
}

// InstanceIDContains applies the Contains predicate on the "instanceID" field.
func InstanceIDContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceID), v))
	})
}

// InstanceIDHasPrefix applies the HasPrefix predicate on the "instanceID" field.
func InstanceIDHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceID), v))
	})
}

// InstanceIDHasSuffix applies the HasSuffix predicate on the "instanceID" field.
func InstanceIDHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceID), v))
	})
}

// InstanceIDEqualFold applies the EqualFold predicate on the "instanceID" field.
func InstanceIDEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceID), v))
	})
}

// InstanceIDContainsFold applies the ContainsFold predicate on the "instanceID" field.
func InstanceIDContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceID), v))
	})
}

// InvokedByEQ applies the EQ predicate on the "invokedBy" field.
func InvokedByEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInvokedBy), v))
	})
}

// InvokedByNEQ applies the NEQ predicate on the "invokedBy" field.
func InvokedByNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInvokedBy), v))
	})
}

// InvokedByIn applies the In predicate on the "invokedBy" field.
func InvokedByIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInvokedBy), v...))
	})
}

// InvokedByNotIn applies the NotIn predicate on the "invokedBy" field.
func InvokedByNotIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInvokedBy), v...))
	})
}

// InvokedByGT applies the GT predicate on the "invokedBy" field.
func InvokedByGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInvokedBy), v))
	})
}

// InvokedByGTE applies the GTE predicate on the "invokedBy" field.
func InvokedByGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInvokedBy), v))
	})
}

// InvokedByLT applies the LT predicate on the "invokedBy" field.
func InvokedByLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInvokedBy), v))
	})
}

// InvokedByLTE applies the LTE predicate on the "invokedBy" field.
func InvokedByLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInvokedBy), v))
	})
}

// InvokedByContains applies the Contains predicate on the "invokedBy" field.
func InvokedByContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInvokedBy), v))
	})
}

// InvokedByHasPrefix applies the HasPrefix predicate on the "invokedBy" field.
func InvokedByHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInvokedBy), v))
	})
}

// InvokedByHasSuffix applies the HasSuffix predicate on the "invokedBy" field.
func InvokedByHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInvokedBy), v))
	})
}

// InvokedByEqualFold applies the EqualFold predicate on the "invokedBy" field.
func InvokedByEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInvokedBy), v))
	})
}

// InvokedByContainsFold applies the ContainsFold predicate on the "invokedBy" field.
func InvokedByContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInvokedBy), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// RevisionEQ applies the EQ predicate on the "revision" field.
func RevisionEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevision), v))
	})
}

// RevisionNEQ applies the NEQ predicate on the "revision" field.
func RevisionNEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRevision), v))
	})
}

// RevisionIn applies the In predicate on the "revision" field.
func RevisionIn(vs ...int) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRevision), v...))
	})
}

// RevisionNotIn applies the NotIn predicate on the "revision" field.
func RevisionNotIn(vs ...int) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRevision), v...))
	})
}

// RevisionGT applies the GT predicate on the "revision" field.
func RevisionGT(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRevision), v))
	})
}

// RevisionGTE applies the GTE predicate on the "revision" field.
func RevisionGTE(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRevision), v))
	})
}

// RevisionLT applies the LT predicate on the "revision" field.
func RevisionLT(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRevision), v))
	})
}

// RevisionLTE applies the LTE predicate on the "revision" field.
func RevisionLTE(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRevision), v))
	})
}

// BeginTimeEQ applies the EQ predicate on the "beginTime" field.
func BeginTimeEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeginTime), v))
	})
}

// BeginTimeNEQ applies the NEQ predicate on the "beginTime" field.
func BeginTimeNEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBeginTime), v))
	})
}

// BeginTimeIn applies the In predicate on the "beginTime" field.
func BeginTimeIn(vs ...time.Time) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBeginTime), v...))
	})
}

// BeginTimeNotIn applies the NotIn predicate on the "beginTime" field.
func BeginTimeNotIn(vs ...time.Time) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBeginTime), v...))
	})
}

// BeginTimeGT applies the GT predicate on the "beginTime" field.
func BeginTimeGT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBeginTime), v))
	})
}

// BeginTimeGTE applies the GTE predicate on the "beginTime" field.
func BeginTimeGTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBeginTime), v))
	})
}

// BeginTimeLT applies the LT predicate on the "beginTime" field.
func BeginTimeLT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBeginTime), v))
	})
}

// BeginTimeLTE applies the LTE predicate on the "beginTime" field.
func BeginTimeLTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBeginTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "endTime" field.
func EndTimeEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "endTime" field.
func EndTimeNEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "endTime" field.
func EndTimeIn(vs ...time.Time) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "endTime" field.
func EndTimeNotIn(vs ...time.Time) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "endTime" field.
func EndTimeGT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "endTime" field.
func EndTimeGTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "endTime" field.
func EndTimeLT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "endTime" field.
func EndTimeLTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// EndTimeIsNil applies the IsNil predicate on the "endTime" field.
func EndTimeIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndTime)))
	})
}

// EndTimeNotNil applies the NotNil predicate on the "endTime" field.
func EndTimeNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndTime)))
	})
}

// FlowIsNil applies the IsNil predicate on the "flow" field.
func FlowIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFlow)))
	})
}

// FlowNotNil applies the NotNil predicate on the "flow" field.
func FlowNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFlow)))
	})
}

// InputEQ applies the EQ predicate on the "input" field.
func InputEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInput), v))
	})
}

// InputNEQ applies the NEQ predicate on the "input" field.
func InputNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInput), v))
	})
}

// InputIn applies the In predicate on the "input" field.
func InputIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInput), v...))
	})
}

// InputNotIn applies the NotIn predicate on the "input" field.
func InputNotIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInput), v...))
	})
}

// InputGT applies the GT predicate on the "input" field.
func InputGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInput), v))
	})
}

// InputGTE applies the GTE predicate on the "input" field.
func InputGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInput), v))
	})
}

// InputLT applies the LT predicate on the "input" field.
func InputLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInput), v))
	})
}

// InputLTE applies the LTE predicate on the "input" field.
func InputLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInput), v))
	})
}

// InputContains applies the Contains predicate on the "input" field.
func InputContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInput), v))
	})
}

// InputHasPrefix applies the HasPrefix predicate on the "input" field.
func InputHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInput), v))
	})
}

// InputHasSuffix applies the HasSuffix predicate on the "input" field.
func InputHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInput), v))
	})
}

// InputEqualFold applies the EqualFold predicate on the "input" field.
func InputEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInput), v))
	})
}

// InputContainsFold applies the ContainsFold predicate on the "input" field.
func InputContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInput), v))
	})
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutput), v))
	})
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutput), v))
	})
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOutput), v...))
	})
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOutput), v...))
	})
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutput), v))
	})
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutput), v))
	})
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutput), v))
	})
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutput), v))
	})
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOutput), v))
	})
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOutput), v))
	})
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOutput), v))
	})
}

// OutputIsNil applies the IsNil predicate on the "output" field.
func OutputIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOutput)))
	})
}

// OutputNotNil applies the NotNil predicate on the "output" field.
func OutputNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOutput)))
	})
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOutput), v))
	})
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOutput), v))
	})
}

// StateDataEQ applies the EQ predicate on the "stateData" field.
func StateDataEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateData), v))
	})
}

// StateDataNEQ applies the NEQ predicate on the "stateData" field.
func StateDataNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStateData), v))
	})
}

// StateDataIn applies the In predicate on the "stateData" field.
func StateDataIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStateData), v...))
	})
}

// StateDataNotIn applies the NotIn predicate on the "stateData" field.
func StateDataNotIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStateData), v...))
	})
}

// StateDataGT applies the GT predicate on the "stateData" field.
func StateDataGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStateData), v))
	})
}

// StateDataGTE applies the GTE predicate on the "stateData" field.
func StateDataGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStateData), v))
	})
}

// StateDataLT applies the LT predicate on the "stateData" field.
func StateDataLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStateData), v))
	})
}

// StateDataLTE applies the LTE predicate on the "stateData" field.
func StateDataLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStateData), v))
	})
}

// StateDataContains applies the Contains predicate on the "stateData" field.
func StateDataContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStateData), v))
	})
}

// StateDataHasPrefix applies the HasPrefix predicate on the "stateData" field.
func StateDataHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStateData), v))
	})
}

// StateDataHasSuffix applies the HasSuffix predicate on the "stateData" field.
func StateDataHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStateData), v))
	})
}

// StateDataIsNil applies the IsNil predicate on the "stateData" field.
func StateDataIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStateData)))
	})
}

// StateDataNotNil applies the NotNil predicate on the "stateData" field.
func StateDataNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStateData)))
	})
}

// StateDataEqualFold applies the EqualFold predicate on the "stateData" field.
func StateDataEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStateData), v))
	})
}

// StateDataContainsFold applies the ContainsFold predicate on the "stateData" field.
func StateDataContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStateData), v))
	})
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemory), v))
	})
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemory), v))
	})
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemory), v...))
	})
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemory), v...))
	})
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemory), v))
	})
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemory), v))
	})
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemory), v))
	})
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemory), v))
	})
}

// MemoryContains applies the Contains predicate on the "memory" field.
func MemoryContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMemory), v))
	})
}

// MemoryHasPrefix applies the HasPrefix predicate on the "memory" field.
func MemoryHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMemory), v))
	})
}

// MemoryHasSuffix applies the HasSuffix predicate on the "memory" field.
func MemoryHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMemory), v))
	})
}

// MemoryIsNil applies the IsNil predicate on the "memory" field.
func MemoryIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMemory)))
	})
}

// MemoryNotNil applies the NotNil predicate on the "memory" field.
func MemoryNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMemory)))
	})
}

// MemoryEqualFold applies the EqualFold predicate on the "memory" field.
func MemoryEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMemory), v))
	})
}

// MemoryContainsFold applies the ContainsFold predicate on the "memory" field.
func MemoryContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMemory), v))
	})
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeadline), v))
	})
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeadline), v))
	})
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...time.Time) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeadline), v...))
	})
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...time.Time) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeadline), v...))
	})
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeadline), v))
	})
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeadline), v))
	})
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeadline), v))
	})
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeadline), v))
	})
}

// DeadlineIsNil applies the IsNil predicate on the "deadline" field.
func DeadlineIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeadline)))
	})
}

// DeadlineNotNil applies the NotNil predicate on the "deadline" field.
func DeadlineNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeadline)))
	})
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttempts), v))
	})
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttempts), v))
	})
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAttempts), v...))
	})
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAttempts), v...))
	})
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAttempts), v))
	})
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAttempts), v))
	})
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAttempts), v))
	})
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAttempts), v))
	})
}

// AttemptsIsNil applies the IsNil predicate on the "attempts" field.
func AttemptsIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAttempts)))
	})
}

// AttemptsNotNil applies the NotNil predicate on the "attempts" field.
func AttemptsNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAttempts)))
	})
}

// ErrorCodeEQ applies the EQ predicate on the "errorCode" field.
func ErrorCodeEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeNEQ applies the NEQ predicate on the "errorCode" field.
func ErrorCodeNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeIn applies the In predicate on the "errorCode" field.
func ErrorCodeIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldErrorCode), v...))
	})
}

// ErrorCodeNotIn applies the NotIn predicate on the "errorCode" field.
func ErrorCodeNotIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldErrorCode), v...))
	})
}

// ErrorCodeGT applies the GT predicate on the "errorCode" field.
func ErrorCodeGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeGTE applies the GTE predicate on the "errorCode" field.
func ErrorCodeGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeLT applies the LT predicate on the "errorCode" field.
func ErrorCodeLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeLTE applies the LTE predicate on the "errorCode" field.
func ErrorCodeLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeContains applies the Contains predicate on the "errorCode" field.
func ErrorCodeContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeHasPrefix applies the HasPrefix predicate on the "errorCode" field.
func ErrorCodeHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeHasSuffix applies the HasSuffix predicate on the "errorCode" field.
func ErrorCodeHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeIsNil applies the IsNil predicate on the "errorCode" field.
func ErrorCodeIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldErrorCode)))
	})
}

// ErrorCodeNotNil applies the NotNil predicate on the "errorCode" field.
func ErrorCodeNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldErrorCode)))
	})
}

// ErrorCodeEqualFold applies the EqualFold predicate on the "errorCode" field.
func ErrorCodeEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldErrorCode), v))
	})
}

// ErrorCodeContainsFold applies the ContainsFold predicate on the "errorCode" field.
func ErrorCodeContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldErrorCode), v))
	})
}

// ErrorMessageEQ applies the EQ predicate on the "errorMessage" field.
func ErrorMessageEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageNEQ applies the NEQ predicate on the "errorMessage" field.
func ErrorMessageNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageIn applies the In predicate on the "errorMessage" field.
func ErrorMessageIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldErrorMessage), v...))
	})
}

// ErrorMessageNotIn applies the NotIn predicate on the "errorMessage" field.
func ErrorMessageNotIn(vs ...string) predicate.WorkflowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldErrorMessage), v...))
	})
}

// ErrorMessageGT applies the GT predicate on the "errorMessage" field.
func ErrorMessageGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageGTE applies the GTE predicate on the "errorMessage" field.
func ErrorMessageGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageLT applies the LT predicate on the "errorMessage" field.
func ErrorMessageLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageLTE applies the LTE predicate on the "errorMessage" field.
func ErrorMessageLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageContains applies the Contains predicate on the "errorMessage" field.
func ErrorMessageContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "errorMessage" field.
func ErrorMessageHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "errorMessage" field.
func ErrorMessageHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageIsNil applies the IsNil predicate on the "errorMessage" field.
func ErrorMessageIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldErrorMessage)))
	})
}

// ErrorMessageNotNil applies the NotNil predicate on the "errorMessage" field.
func ErrorMessageNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldErrorMessage)))
	})
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "errorMessage" field.
func ErrorMessageEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldErrorMessage), v))
	})
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "errorMessage" field.
func ErrorMessageContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldErrorMessage), v))
	})
}

// HasWorkflow applies the HasEdge predicate on the "workflow" edge.
func HasWorkflow() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkflowTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowWith applies the HasEdge predicate on the "workflow" edge with a given conditions (other predicates).
func HasWorkflowWith(preds ...predicate.Workflow) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkflowInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstance applies the HasEdge predicate on the "instance" edge.
func HasInstance() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstanceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstanceWith applies the HasEdge predicate on the "instance" edge with a given conditions (other predicates).
func HasInstanceWith(preds ...predicate.WorkflowEvents) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstanceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowInstance) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowInstance) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowInstance) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		p(s.Not())
	})
}
