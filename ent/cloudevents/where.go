// Code generated by entc, DO NOT EDIT.

package cloudevents

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/direktiv/direktiv/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNamespace), v))
	})
}

// Fire applies equality check predicate on the "fire" field. It's identical to FireEQ.
func Fire(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFire), v))
	})
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// Processed applies equality check predicate on the "processed" field. It's identical to ProcessedEQ.
func Processed(v bool) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessed), v))
	})
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNamespace), v))
	})
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNamespace), v))
	})
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.CloudEvents {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CloudEvents(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNamespace), v...))
	})
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.CloudEvents {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CloudEvents(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNamespace), v...))
	})
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNamespace), v))
	})
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNamespace), v))
	})
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNamespace), v))
	})
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNamespace), v))
	})
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNamespace), v))
	})
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNamespace), v))
	})
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNamespace), v))
	})
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNamespace), v))
	})
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNamespace), v))
	})
}

// FireEQ applies the EQ predicate on the "fire" field.
func FireEQ(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFire), v))
	})
}

// FireNEQ applies the NEQ predicate on the "fire" field.
func FireNEQ(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFire), v))
	})
}

// FireIn applies the In predicate on the "fire" field.
func FireIn(vs ...time.Time) predicate.CloudEvents {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CloudEvents(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFire), v...))
	})
}

// FireNotIn applies the NotIn predicate on the "fire" field.
func FireNotIn(vs ...time.Time) predicate.CloudEvents {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CloudEvents(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFire), v...))
	})
}

// FireGT applies the GT predicate on the "fire" field.
func FireGT(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFire), v))
	})
}

// FireGTE applies the GTE predicate on the "fire" field.
func FireGTE(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFire), v))
	})
}

// FireLT applies the LT predicate on the "fire" field.
func FireLT(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFire), v))
	})
}

// FireLTE applies the LTE predicate on the "fire" field.
func FireLTE(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFire), v))
	})
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreated), v))
	})
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.CloudEvents {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CloudEvents(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreated), v...))
	})
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.CloudEvents {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CloudEvents(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreated), v...))
	})
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreated), v))
	})
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreated), v))
	})
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreated), v))
	})
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreated), v))
	})
}

// ProcessedEQ applies the EQ predicate on the "processed" field.
func ProcessedEQ(v bool) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessed), v))
	})
}

// ProcessedNEQ applies the NEQ predicate on the "processed" field.
func ProcessedNEQ(v bool) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcessed), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CloudEvents) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CloudEvents) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CloudEvents) predicate.CloudEvents {
	return predicate.CloudEvents(func(s *sql.Selector) {
		p(s.Not())
	})
}
