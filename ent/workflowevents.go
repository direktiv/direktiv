// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/vorteil/direktiv/ent/workflow"
	"github.com/vorteil/direktiv/ent/workflowevents"
	"github.com/vorteil/direktiv/ent/workflowinstance"
)

// WorkflowEvents is the model entity for the WorkflowEvents schema.
type WorkflowEvents struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Events holds the value of the "events" field.
	Events []map[string]interface{} `json:"events,omitempty"`
	// Correlations holds the value of the "correlations" field.
	Correlations []string `json:"correlations,omitempty"`
	// Signature holds the value of the "signature" field.
	Signature []byte `json:"signature,omitempty"`
	// Count holds the value of the "count" field.
	Count int `json:"count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowEventsQuery when eager-loading is set.
	Edges                      WorkflowEventsEdges `json:"edges"`
	workflow_wfevents          *uuid.UUID
	workflow_instance_instance *int
}

// WorkflowEventsEdges holds the relations/edges for other nodes in the graph.
type WorkflowEventsEdges struct {
	// Workflow holds the value of the workflow edge.
	Workflow *Workflow `json:"workflow,omitempty"`
	// Wfeventswait holds the value of the wfeventswait edge.
	Wfeventswait []*WorkflowEventsWait `json:"wfeventswait,omitempty"`
	// Workflowinstance holds the value of the workflowinstance edge.
	Workflowinstance *WorkflowInstance `json:"workflowinstance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEventsEdges) WorkflowOrErr() (*Workflow, error) {
	if e.loadedTypes[0] {
		if e.Workflow == nil {
			// The edge workflow was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workflow.Label}
		}
		return e.Workflow, nil
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// WfeventswaitOrErr returns the Wfeventswait value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowEventsEdges) WfeventswaitOrErr() ([]*WorkflowEventsWait, error) {
	if e.loadedTypes[1] {
		return e.Wfeventswait, nil
	}
	return nil, &NotLoadedError{edge: "wfeventswait"}
}

// WorkflowinstanceOrErr returns the Workflowinstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowEventsEdges) WorkflowinstanceOrErr() (*WorkflowInstance, error) {
	if e.loadedTypes[2] {
		if e.Workflowinstance == nil {
			// The edge workflowinstance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workflowinstance.Label}
		}
		return e.Workflowinstance, nil
	}
	return nil, &NotLoadedError{edge: "workflowinstance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowEvents) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowevents.FieldEvents, workflowevents.FieldCorrelations, workflowevents.FieldSignature:
			values[i] = new([]byte)
		case workflowevents.FieldID, workflowevents.FieldCount:
			values[i] = new(sql.NullInt64)
		case workflowevents.ForeignKeys[0]: // workflow_wfevents
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case workflowevents.ForeignKeys[1]: // workflow_instance_instance
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkflowEvents", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowEvents fields.
func (we *WorkflowEvents) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowevents.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			we.ID = int(value.Int64)
		case workflowevents.FieldEvents:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field events", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &we.Events); err != nil {
					return fmt.Errorf("unmarshal field events: %w", err)
				}
			}
		case workflowevents.FieldCorrelations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field correlations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &we.Correlations); err != nil {
					return fmt.Errorf("unmarshal field correlations: %w", err)
				}
			}
		case workflowevents.FieldSignature:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value != nil {
				we.Signature = *value
			}
		case workflowevents.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				we.Count = int(value.Int64)
			}
		case workflowevents.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_wfevents", values[i])
			} else if value.Valid {
				we.workflow_wfevents = new(uuid.UUID)
				*we.workflow_wfevents = *value.S.(*uuid.UUID)
			}
		case workflowevents.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workflow_instance_instance", value)
			} else if value.Valid {
				we.workflow_instance_instance = new(int)
				*we.workflow_instance_instance = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryWorkflow queries the "workflow" edge of the WorkflowEvents entity.
func (we *WorkflowEvents) QueryWorkflow() *WorkflowQuery {
	return (&WorkflowEventsClient{config: we.config}).QueryWorkflow(we)
}

// QueryWfeventswait queries the "wfeventswait" edge of the WorkflowEvents entity.
func (we *WorkflowEvents) QueryWfeventswait() *WorkflowEventsWaitQuery {
	return (&WorkflowEventsClient{config: we.config}).QueryWfeventswait(we)
}

// QueryWorkflowinstance queries the "workflowinstance" edge of the WorkflowEvents entity.
func (we *WorkflowEvents) QueryWorkflowinstance() *WorkflowInstanceQuery {
	return (&WorkflowEventsClient{config: we.config}).QueryWorkflowinstance(we)
}

// Update returns a builder for updating this WorkflowEvents.
// Note that you need to call WorkflowEvents.Unwrap() before calling this method if this WorkflowEvents
// was returned from a transaction, and the transaction was committed or rolled back.
func (we *WorkflowEvents) Update() *WorkflowEventsUpdateOne {
	return (&WorkflowEventsClient{config: we.config}).UpdateOne(we)
}

// Unwrap unwraps the WorkflowEvents entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (we *WorkflowEvents) Unwrap() *WorkflowEvents {
	tx, ok := we.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowEvents is not a transactional entity")
	}
	we.config.driver = tx.drv
	return we
}

// String implements the fmt.Stringer.
func (we *WorkflowEvents) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowEvents(")
	builder.WriteString(fmt.Sprintf("id=%v", we.ID))
	builder.WriteString(", events=")
	builder.WriteString(fmt.Sprintf("%v", we.Events))
	builder.WriteString(", correlations=")
	builder.WriteString(fmt.Sprintf("%v", we.Correlations))
	builder.WriteString(", signature=")
	builder.WriteString(fmt.Sprintf("%v", we.Signature))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", we.Count))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowEventsSlice is a parsable slice of WorkflowEvents.
type WorkflowEventsSlice []*WorkflowEvents

func (we WorkflowEventsSlice) config(cfg config) {
	for _i := range we {
		we[_i].config = cfg
	}
}
