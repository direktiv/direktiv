// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/direktiv/direktiv/ent/migrate"
	"github.com/google/uuid"

	"github.com/direktiv/direktiv/ent/cloudevents"
	"github.com/direktiv/direktiv/ent/namespace"
	"github.com/direktiv/direktiv/ent/services"
	"github.com/direktiv/direktiv/ent/workflow"
	"github.com/direktiv/direktiv/ent/workflowevents"
	"github.com/direktiv/direktiv/ent/workfloweventswait"
	"github.com/direktiv/direktiv/ent/workflowinstance"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CloudEvents is the client for interacting with the CloudEvents builders.
	CloudEvents *CloudEventsClient
	// Namespace is the client for interacting with the Namespace builders.
	Namespace *NamespaceClient
	// Services is the client for interacting with the Services builders.
	Services *ServicesClient
	// Workflow is the client for interacting with the Workflow builders.
	Workflow *WorkflowClient
	// WorkflowEvents is the client for interacting with the WorkflowEvents builders.
	WorkflowEvents *WorkflowEventsClient
	// WorkflowEventsWait is the client for interacting with the WorkflowEventsWait builders.
	WorkflowEventsWait *WorkflowEventsWaitClient
	// WorkflowInstance is the client for interacting with the WorkflowInstance builders.
	WorkflowInstance *WorkflowInstanceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CloudEvents = NewCloudEventsClient(c.config)
	c.Namespace = NewNamespaceClient(c.config)
	c.Services = NewServicesClient(c.config)
	c.Workflow = NewWorkflowClient(c.config)
	c.WorkflowEvents = NewWorkflowEventsClient(c.config)
	c.WorkflowEventsWait = NewWorkflowEventsWaitClient(c.config)
	c.WorkflowInstance = NewWorkflowInstanceClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		CloudEvents:        NewCloudEventsClient(cfg),
		Namespace:          NewNamespaceClient(cfg),
		Services:           NewServicesClient(cfg),
		Workflow:           NewWorkflowClient(cfg),
		WorkflowEvents:     NewWorkflowEventsClient(cfg),
		WorkflowEventsWait: NewWorkflowEventsWaitClient(cfg),
		WorkflowInstance:   NewWorkflowInstanceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:             cfg,
		CloudEvents:        NewCloudEventsClient(cfg),
		Namespace:          NewNamespaceClient(cfg),
		Services:           NewServicesClient(cfg),
		Workflow:           NewWorkflowClient(cfg),
		WorkflowEvents:     NewWorkflowEventsClient(cfg),
		WorkflowEventsWait: NewWorkflowEventsWaitClient(cfg),
		WorkflowInstance:   NewWorkflowInstanceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CloudEvents.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CloudEvents.Use(hooks...)
	c.Namespace.Use(hooks...)
	c.Services.Use(hooks...)
	c.Workflow.Use(hooks...)
	c.WorkflowEvents.Use(hooks...)
	c.WorkflowEventsWait.Use(hooks...)
	c.WorkflowInstance.Use(hooks...)
}

// CloudEventsClient is a client for the CloudEvents schema.
type CloudEventsClient struct {
	config
}

// NewCloudEventsClient returns a client for the CloudEvents from the given config.
func NewCloudEventsClient(c config) *CloudEventsClient {
	return &CloudEventsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cloudevents.Hooks(f(g(h())))`.
func (c *CloudEventsClient) Use(hooks ...Hook) {
	c.hooks.CloudEvents = append(c.hooks.CloudEvents, hooks...)
}

// Create returns a create builder for CloudEvents.
func (c *CloudEventsClient) Create() *CloudEventsCreate {
	mutation := newCloudEventsMutation(c.config, OpCreate)
	return &CloudEventsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CloudEvents entities.
func (c *CloudEventsClient) CreateBulk(builders ...*CloudEventsCreate) *CloudEventsCreateBulk {
	return &CloudEventsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CloudEvents.
func (c *CloudEventsClient) Update() *CloudEventsUpdate {
	mutation := newCloudEventsMutation(c.config, OpUpdate)
	return &CloudEventsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CloudEventsClient) UpdateOne(ce *CloudEvents) *CloudEventsUpdateOne {
	mutation := newCloudEventsMutation(c.config, OpUpdateOne, withCloudEvents(ce))
	return &CloudEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CloudEventsClient) UpdateOneID(id string) *CloudEventsUpdateOne {
	mutation := newCloudEventsMutation(c.config, OpUpdateOne, withCloudEventsID(id))
	return &CloudEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CloudEvents.
func (c *CloudEventsClient) Delete() *CloudEventsDelete {
	mutation := newCloudEventsMutation(c.config, OpDelete)
	return &CloudEventsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CloudEventsClient) DeleteOne(ce *CloudEvents) *CloudEventsDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CloudEventsClient) DeleteOneID(id string) *CloudEventsDeleteOne {
	builder := c.Delete().Where(cloudevents.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CloudEventsDeleteOne{builder}
}

// Query returns a query builder for CloudEvents.
func (c *CloudEventsClient) Query() *CloudEventsQuery {
	return &CloudEventsQuery{
		config: c.config,
	}
}

// Get returns a CloudEvents entity by its id.
func (c *CloudEventsClient) Get(ctx context.Context, id string) (*CloudEvents, error) {
	return c.Query().Where(cloudevents.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CloudEventsClient) GetX(ctx context.Context, id string) *CloudEvents {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CloudEventsClient) Hooks() []Hook {
	return c.hooks.CloudEvents
}

// NamespaceClient is a client for the Namespace schema.
type NamespaceClient struct {
	config
}

// NewNamespaceClient returns a client for the Namespace from the given config.
func NewNamespaceClient(c config) *NamespaceClient {
	return &NamespaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `namespace.Hooks(f(g(h())))`.
func (c *NamespaceClient) Use(hooks ...Hook) {
	c.hooks.Namespace = append(c.hooks.Namespace, hooks...)
}

// Create returns a create builder for Namespace.
func (c *NamespaceClient) Create() *NamespaceCreate {
	mutation := newNamespaceMutation(c.config, OpCreate)
	return &NamespaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Namespace entities.
func (c *NamespaceClient) CreateBulk(builders ...*NamespaceCreate) *NamespaceCreateBulk {
	return &NamespaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Namespace.
func (c *NamespaceClient) Update() *NamespaceUpdate {
	mutation := newNamespaceMutation(c.config, OpUpdate)
	return &NamespaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NamespaceClient) UpdateOne(n *Namespace) *NamespaceUpdateOne {
	mutation := newNamespaceMutation(c.config, OpUpdateOne, withNamespace(n))
	return &NamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NamespaceClient) UpdateOneID(id string) *NamespaceUpdateOne {
	mutation := newNamespaceMutation(c.config, OpUpdateOne, withNamespaceID(id))
	return &NamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Namespace.
func (c *NamespaceClient) Delete() *NamespaceDelete {
	mutation := newNamespaceMutation(c.config, OpDelete)
	return &NamespaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NamespaceClient) DeleteOne(n *Namespace) *NamespaceDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NamespaceClient) DeleteOneID(id string) *NamespaceDeleteOne {
	builder := c.Delete().Where(namespace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NamespaceDeleteOne{builder}
}

// Query returns a query builder for Namespace.
func (c *NamespaceClient) Query() *NamespaceQuery {
	return &NamespaceQuery{
		config: c.config,
	}
}

// Get returns a Namespace entity by its id.
func (c *NamespaceClient) Get(ctx context.Context, id string) (*Namespace, error) {
	return c.Query().Where(namespace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NamespaceClient) GetX(ctx context.Context, id string) *Namespace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkflows queries the workflows edge of a Namespace.
func (c *NamespaceClient) QueryWorkflows(n *Namespace) *WorkflowQuery {
	query := &WorkflowQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(namespace.Table, namespace.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, namespace.WorkflowsTable, namespace.WorkflowsColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NamespaceClient) Hooks() []Hook {
	return c.hooks.Namespace
}

// ServicesClient is a client for the Services schema.
type ServicesClient struct {
	config
}

// NewServicesClient returns a client for the Services from the given config.
func NewServicesClient(c config) *ServicesClient {
	return &ServicesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `services.Hooks(f(g(h())))`.
func (c *ServicesClient) Use(hooks ...Hook) {
	c.hooks.Services = append(c.hooks.Services, hooks...)
}

// Create returns a create builder for Services.
func (c *ServicesClient) Create() *ServicesCreate {
	mutation := newServicesMutation(c.config, OpCreate)
	return &ServicesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Services entities.
func (c *ServicesClient) CreateBulk(builders ...*ServicesCreate) *ServicesCreateBulk {
	return &ServicesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Services.
func (c *ServicesClient) Update() *ServicesUpdate {
	mutation := newServicesMutation(c.config, OpUpdate)
	return &ServicesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServicesClient) UpdateOne(s *Services) *ServicesUpdateOne {
	mutation := newServicesMutation(c.config, OpUpdateOne, withServices(s))
	return &ServicesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServicesClient) UpdateOneID(id int) *ServicesUpdateOne {
	mutation := newServicesMutation(c.config, OpUpdateOne, withServicesID(id))
	return &ServicesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Services.
func (c *ServicesClient) Delete() *ServicesDelete {
	mutation := newServicesMutation(c.config, OpDelete)
	return &ServicesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServicesClient) DeleteOne(s *Services) *ServicesDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServicesClient) DeleteOneID(id int) *ServicesDeleteOne {
	builder := c.Delete().Where(services.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServicesDeleteOne{builder}
}

// Query returns a query builder for Services.
func (c *ServicesClient) Query() *ServicesQuery {
	return &ServicesQuery{
		config: c.config,
	}
}

// Get returns a Services entity by its id.
func (c *ServicesClient) Get(ctx context.Context, id int) (*Services, error) {
	return c.Query().Where(services.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServicesClient) GetX(ctx context.Context, id int) *Services {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ServicesClient) Hooks() []Hook {
	return c.hooks.Services
}

// WorkflowClient is a client for the Workflow schema.
type WorkflowClient struct {
	config
}

// NewWorkflowClient returns a client for the Workflow from the given config.
func NewWorkflowClient(c config) *WorkflowClient {
	return &WorkflowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workflow.Hooks(f(g(h())))`.
func (c *WorkflowClient) Use(hooks ...Hook) {
	c.hooks.Workflow = append(c.hooks.Workflow, hooks...)
}

// Create returns a create builder for Workflow.
func (c *WorkflowClient) Create() *WorkflowCreate {
	mutation := newWorkflowMutation(c.config, OpCreate)
	return &WorkflowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workflow entities.
func (c *WorkflowClient) CreateBulk(builders ...*WorkflowCreate) *WorkflowCreateBulk {
	return &WorkflowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workflow.
func (c *WorkflowClient) Update() *WorkflowUpdate {
	mutation := newWorkflowMutation(c.config, OpUpdate)
	return &WorkflowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkflowClient) UpdateOne(w *Workflow) *WorkflowUpdateOne {
	mutation := newWorkflowMutation(c.config, OpUpdateOne, withWorkflow(w))
	return &WorkflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkflowClient) UpdateOneID(id uuid.UUID) *WorkflowUpdateOne {
	mutation := newWorkflowMutation(c.config, OpUpdateOne, withWorkflowID(id))
	return &WorkflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workflow.
func (c *WorkflowClient) Delete() *WorkflowDelete {
	mutation := newWorkflowMutation(c.config, OpDelete)
	return &WorkflowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkflowClient) DeleteOne(w *Workflow) *WorkflowDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkflowClient) DeleteOneID(id uuid.UUID) *WorkflowDeleteOne {
	builder := c.Delete().Where(workflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkflowDeleteOne{builder}
}

// Query returns a query builder for Workflow.
func (c *WorkflowClient) Query() *WorkflowQuery {
	return &WorkflowQuery{
		config: c.config,
	}
}

// Get returns a Workflow entity by its id.
func (c *WorkflowClient) Get(ctx context.Context, id uuid.UUID) (*Workflow, error) {
	return c.Query().Where(workflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkflowClient) GetX(ctx context.Context, id uuid.UUID) *Workflow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNamespace queries the namespace edge of a Workflow.
func (c *WorkflowClient) QueryNamespace(w *Workflow) *NamespaceQuery {
	query := &NamespaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(namespace.Table, namespace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflow.NamespaceTable, workflow.NamespaceColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstances queries the instances edge of a Workflow.
func (c *WorkflowClient) QueryInstances(w *Workflow) *WorkflowInstanceQuery {
	query := &WorkflowInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(workflowinstance.Table, workflowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.InstancesTable, workflow.InstancesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWfevents queries the wfevents edge of a Workflow.
func (c *WorkflowClient) QueryWfevents(w *Workflow) *WorkflowEventsQuery {
	query := &WorkflowEventsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(workflowevents.Table, workflowevents.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.WfeventsTable, workflow.WfeventsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkflowClient) Hooks() []Hook {
	return c.hooks.Workflow
}

// WorkflowEventsClient is a client for the WorkflowEvents schema.
type WorkflowEventsClient struct {
	config
}

// NewWorkflowEventsClient returns a client for the WorkflowEvents from the given config.
func NewWorkflowEventsClient(c config) *WorkflowEventsClient {
	return &WorkflowEventsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workflowevents.Hooks(f(g(h())))`.
func (c *WorkflowEventsClient) Use(hooks ...Hook) {
	c.hooks.WorkflowEvents = append(c.hooks.WorkflowEvents, hooks...)
}

// Create returns a create builder for WorkflowEvents.
func (c *WorkflowEventsClient) Create() *WorkflowEventsCreate {
	mutation := newWorkflowEventsMutation(c.config, OpCreate)
	return &WorkflowEventsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkflowEvents entities.
func (c *WorkflowEventsClient) CreateBulk(builders ...*WorkflowEventsCreate) *WorkflowEventsCreateBulk {
	return &WorkflowEventsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkflowEvents.
func (c *WorkflowEventsClient) Update() *WorkflowEventsUpdate {
	mutation := newWorkflowEventsMutation(c.config, OpUpdate)
	return &WorkflowEventsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkflowEventsClient) UpdateOne(we *WorkflowEvents) *WorkflowEventsUpdateOne {
	mutation := newWorkflowEventsMutation(c.config, OpUpdateOne, withWorkflowEvents(we))
	return &WorkflowEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkflowEventsClient) UpdateOneID(id int) *WorkflowEventsUpdateOne {
	mutation := newWorkflowEventsMutation(c.config, OpUpdateOne, withWorkflowEventsID(id))
	return &WorkflowEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkflowEvents.
func (c *WorkflowEventsClient) Delete() *WorkflowEventsDelete {
	mutation := newWorkflowEventsMutation(c.config, OpDelete)
	return &WorkflowEventsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkflowEventsClient) DeleteOne(we *WorkflowEvents) *WorkflowEventsDeleteOne {
	return c.DeleteOneID(we.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkflowEventsClient) DeleteOneID(id int) *WorkflowEventsDeleteOne {
	builder := c.Delete().Where(workflowevents.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkflowEventsDeleteOne{builder}
}

// Query returns a query builder for WorkflowEvents.
func (c *WorkflowEventsClient) Query() *WorkflowEventsQuery {
	return &WorkflowEventsQuery{
		config: c.config,
	}
}

// Get returns a WorkflowEvents entity by its id.
func (c *WorkflowEventsClient) Get(ctx context.Context, id int) (*WorkflowEvents, error) {
	return c.Query().Where(workflowevents.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkflowEventsClient) GetX(ctx context.Context, id int) *WorkflowEvents {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkflow queries the workflow edge of a WorkflowEvents.
func (c *WorkflowEventsClient) QueryWorkflow(we *WorkflowEvents) *WorkflowQuery {
	query := &WorkflowQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowevents.Table, workflowevents.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowevents.WorkflowTable, workflowevents.WorkflowColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWfeventswait queries the wfeventswait edge of a WorkflowEvents.
func (c *WorkflowEventsClient) QueryWfeventswait(we *WorkflowEvents) *WorkflowEventsWaitQuery {
	query := &WorkflowEventsWaitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowevents.Table, workflowevents.FieldID, id),
			sqlgraph.To(workfloweventswait.Table, workfloweventswait.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflowevents.WfeventswaitTable, workflowevents.WfeventswaitColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkflowinstance queries the workflowinstance edge of a WorkflowEvents.
func (c *WorkflowEventsClient) QueryWorkflowinstance(we *WorkflowEvents) *WorkflowInstanceQuery {
	query := &WorkflowInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowevents.Table, workflowevents.FieldID, id),
			sqlgraph.To(workflowinstance.Table, workflowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowevents.WorkflowinstanceTable, workflowevents.WorkflowinstanceColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkflowEventsClient) Hooks() []Hook {
	return c.hooks.WorkflowEvents
}

// WorkflowEventsWaitClient is a client for the WorkflowEventsWait schema.
type WorkflowEventsWaitClient struct {
	config
}

// NewWorkflowEventsWaitClient returns a client for the WorkflowEventsWait from the given config.
func NewWorkflowEventsWaitClient(c config) *WorkflowEventsWaitClient {
	return &WorkflowEventsWaitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workfloweventswait.Hooks(f(g(h())))`.
func (c *WorkflowEventsWaitClient) Use(hooks ...Hook) {
	c.hooks.WorkflowEventsWait = append(c.hooks.WorkflowEventsWait, hooks...)
}

// Create returns a create builder for WorkflowEventsWait.
func (c *WorkflowEventsWaitClient) Create() *WorkflowEventsWaitCreate {
	mutation := newWorkflowEventsWaitMutation(c.config, OpCreate)
	return &WorkflowEventsWaitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkflowEventsWait entities.
func (c *WorkflowEventsWaitClient) CreateBulk(builders ...*WorkflowEventsWaitCreate) *WorkflowEventsWaitCreateBulk {
	return &WorkflowEventsWaitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkflowEventsWait.
func (c *WorkflowEventsWaitClient) Update() *WorkflowEventsWaitUpdate {
	mutation := newWorkflowEventsWaitMutation(c.config, OpUpdate)
	return &WorkflowEventsWaitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkflowEventsWaitClient) UpdateOne(wew *WorkflowEventsWait) *WorkflowEventsWaitUpdateOne {
	mutation := newWorkflowEventsWaitMutation(c.config, OpUpdateOne, withWorkflowEventsWait(wew))
	return &WorkflowEventsWaitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkflowEventsWaitClient) UpdateOneID(id int) *WorkflowEventsWaitUpdateOne {
	mutation := newWorkflowEventsWaitMutation(c.config, OpUpdateOne, withWorkflowEventsWaitID(id))
	return &WorkflowEventsWaitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkflowEventsWait.
func (c *WorkflowEventsWaitClient) Delete() *WorkflowEventsWaitDelete {
	mutation := newWorkflowEventsWaitMutation(c.config, OpDelete)
	return &WorkflowEventsWaitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkflowEventsWaitClient) DeleteOne(wew *WorkflowEventsWait) *WorkflowEventsWaitDeleteOne {
	return c.DeleteOneID(wew.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkflowEventsWaitClient) DeleteOneID(id int) *WorkflowEventsWaitDeleteOne {
	builder := c.Delete().Where(workfloweventswait.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkflowEventsWaitDeleteOne{builder}
}

// Query returns a query builder for WorkflowEventsWait.
func (c *WorkflowEventsWaitClient) Query() *WorkflowEventsWaitQuery {
	return &WorkflowEventsWaitQuery{
		config: c.config,
	}
}

// Get returns a WorkflowEventsWait entity by its id.
func (c *WorkflowEventsWaitClient) Get(ctx context.Context, id int) (*WorkflowEventsWait, error) {
	return c.Query().Where(workfloweventswait.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkflowEventsWaitClient) GetX(ctx context.Context, id int) *WorkflowEventsWait {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkflowevent queries the workflowevent edge of a WorkflowEventsWait.
func (c *WorkflowEventsWaitClient) QueryWorkflowevent(wew *WorkflowEventsWait) *WorkflowEventsQuery {
	query := &WorkflowEventsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wew.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workfloweventswait.Table, workfloweventswait.FieldID, id),
			sqlgraph.To(workflowevents.Table, workflowevents.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workfloweventswait.WorkfloweventTable, workfloweventswait.WorkfloweventColumn),
		)
		fromV = sqlgraph.Neighbors(wew.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkflowEventsWaitClient) Hooks() []Hook {
	return c.hooks.WorkflowEventsWait
}

// WorkflowInstanceClient is a client for the WorkflowInstance schema.
type WorkflowInstanceClient struct {
	config
}

// NewWorkflowInstanceClient returns a client for the WorkflowInstance from the given config.
func NewWorkflowInstanceClient(c config) *WorkflowInstanceClient {
	return &WorkflowInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workflowinstance.Hooks(f(g(h())))`.
func (c *WorkflowInstanceClient) Use(hooks ...Hook) {
	c.hooks.WorkflowInstance = append(c.hooks.WorkflowInstance, hooks...)
}

// Create returns a create builder for WorkflowInstance.
func (c *WorkflowInstanceClient) Create() *WorkflowInstanceCreate {
	mutation := newWorkflowInstanceMutation(c.config, OpCreate)
	return &WorkflowInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkflowInstance entities.
func (c *WorkflowInstanceClient) CreateBulk(builders ...*WorkflowInstanceCreate) *WorkflowInstanceCreateBulk {
	return &WorkflowInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkflowInstance.
func (c *WorkflowInstanceClient) Update() *WorkflowInstanceUpdate {
	mutation := newWorkflowInstanceMutation(c.config, OpUpdate)
	return &WorkflowInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkflowInstanceClient) UpdateOne(wi *WorkflowInstance) *WorkflowInstanceUpdateOne {
	mutation := newWorkflowInstanceMutation(c.config, OpUpdateOne, withWorkflowInstance(wi))
	return &WorkflowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkflowInstanceClient) UpdateOneID(id int) *WorkflowInstanceUpdateOne {
	mutation := newWorkflowInstanceMutation(c.config, OpUpdateOne, withWorkflowInstanceID(id))
	return &WorkflowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkflowInstance.
func (c *WorkflowInstanceClient) Delete() *WorkflowInstanceDelete {
	mutation := newWorkflowInstanceMutation(c.config, OpDelete)
	return &WorkflowInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkflowInstanceClient) DeleteOne(wi *WorkflowInstance) *WorkflowInstanceDeleteOne {
	return c.DeleteOneID(wi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkflowInstanceClient) DeleteOneID(id int) *WorkflowInstanceDeleteOne {
	builder := c.Delete().Where(workflowinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkflowInstanceDeleteOne{builder}
}

// Query returns a query builder for WorkflowInstance.
func (c *WorkflowInstanceClient) Query() *WorkflowInstanceQuery {
	return &WorkflowInstanceQuery{
		config: c.config,
	}
}

// Get returns a WorkflowInstance entity by its id.
func (c *WorkflowInstanceClient) Get(ctx context.Context, id int) (*WorkflowInstance, error) {
	return c.Query().Where(workflowinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkflowInstanceClient) GetX(ctx context.Context, id int) *WorkflowInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkflow queries the workflow edge of a WorkflowInstance.
func (c *WorkflowInstanceClient) QueryWorkflow(wi *WorkflowInstance) *WorkflowQuery {
	query := &WorkflowQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowinstance.Table, workflowinstance.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowinstance.WorkflowTable, workflowinstance.WorkflowColumn),
		)
		fromV = sqlgraph.Neighbors(wi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstance queries the instance edge of a WorkflowInstance.
func (c *WorkflowInstanceClient) QueryInstance(wi *WorkflowInstance) *WorkflowEventsQuery {
	query := &WorkflowEventsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowinstance.Table, workflowinstance.FieldID, id),
			sqlgraph.To(workflowevents.Table, workflowevents.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflowinstance.InstanceTable, workflowinstance.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(wi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkflowInstanceClient) Hooks() []Hook {
	return c.hooks.WorkflowInstance
}
